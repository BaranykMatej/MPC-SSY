
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800200  0000041c  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  008002e8  008002e8  00000598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c6d  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001658  00000000  00000000  00002305  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d4  00000000  00000000  0000395d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00004034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000abb  00000000  00000000  0000416c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cb  00000000  00000000  00004c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000050f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	46 c0       	rjmp	.+140    	; 0x172 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	44 c0       	rjmp	.+136    	; 0x172 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	42 c0       	rjmp	.+132    	; 0x172 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	40 c0       	rjmp	.+128    	; 0x172 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	3e c0       	rjmp	.+124    	; 0x172 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3c c0       	rjmp	.+120    	; 0x172 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3a c0       	rjmp	.+116    	; 0x172 <__bad_interrupt>
  fe:	00 00       	nop
 100:	38 c0       	rjmp	.+112    	; 0x172 <__bad_interrupt>
 102:	00 00       	nop
 104:	36 c0       	rjmp	.+108    	; 0x172 <__bad_interrupt>
 106:	00 00       	nop
 108:	34 c0       	rjmp	.+104    	; 0x172 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	32 c0       	rjmp	.+100    	; 0x172 <__bad_interrupt>
 10e:	00 00       	nop
 110:	30 c0       	rjmp	.+96     	; 0x172 <__bad_interrupt>
 112:	00 00       	nop
 114:	2e c0       	rjmp	.+92     	; 0x172 <__bad_interrupt>
 116:	00 00       	nop
 118:	2c c0       	rjmp	.+88     	; 0x172 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2a c0       	rjmp	.+84     	; 0x172 <__bad_interrupt>
 11e:	00 00       	nop
 120:	28 c0       	rjmp	.+80     	; 0x172 <__bad_interrupt>
 122:	00 00       	nop
 124:	26 c0       	rjmp	.+76     	; 0x172 <__bad_interrupt>
 126:	00 00       	nop
 128:	24 c0       	rjmp	.+72     	; 0x172 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	22 c0       	rjmp	.+68     	; 0x172 <__bad_interrupt>
 12e:	00 00       	nop
 130:	20 c0       	rjmp	.+64     	; 0x172 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	ec e1       	ldi	r30, 0x1C	; 28
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a8 3e       	cpi	r26, 0xE8	; 232
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	23 e0       	ldi	r18, 0x03	; 3
 160:	a8 ee       	ldi	r26, 0xE8	; 232
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a8 30       	cpi	r26, 0x08	; 8
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	8b d0       	rcall	.+278    	; 0x286 <main>
 170:	53 c1       	rjmp	.+678    	; 0x418 <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <UART_init>:
 174:	9c 01       	movw	r18, r24
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	60 e2       	ldi	r22, 0x20	; 32
 17c:	71 ea       	ldi	r23, 0xA1	; 161
 17e:	87 e0       	ldi	r24, 0x07	; 7
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	dc d0       	rcall	.+440    	; 0x33c <__divmodsi4>
 184:	21 50       	subi	r18, 0x01	; 1
 186:	31 09       	sbc	r19, r1
 188:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 18c:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 196:	08 95       	ret

00000198 <UART_SendChar>:
 198:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 19c:	95 ff       	sbrs	r25, 5
 19e:	fc cf       	rjmp	.-8      	; 0x198 <UART_SendChar>
 1a0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1a4:	08 95       	ret

000001a6 <UART_GetChar>:
 1a6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 1aa:	88 23       	and	r24, r24
 1ac:	e4 f7       	brge	.-8      	; 0x1a6 <UART_GetChar>
 1ae:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1b2:	08 95       	ret

000001b4 <UART_SendStringNewLine>:
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <UART_SendStringNewLine+0xc>
 1bc:	ed df       	rcall	.-38     	; 0x198 <UART_SendChar>
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	88 81       	ld	r24, Y
 1c2:	81 11       	cpse	r24, r1
 1c4:	fb cf       	rjmp	.-10     	; 0x1bc <UART_SendStringNewLine+0x8>
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	e7 df       	rcall	.-50     	; 0x198 <UART_SendChar>
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	e5 df       	rcall	.-54     	; 0x198 <UART_SendChar>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	e3 df       	rcall	.-58     	; 0x198 <UART_SendChar>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <generateField>:
 1d8:	81 30       	cpi	r24, 0x01	; 1
    UART_SendStringNewLine("\033[2J\033[H");
}

void board_init() {
    UART_init(38400); // nastaveni rychlosti UARTu, 38400b/s
    stdout = &uart_str; // presmerovani STDOUT
 1da:	91 05       	cpc	r25, r1
 1dc:	79 f4       	brne	.+30     	; 0x1fc <generateField+0x24>
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <generateField+0x18>
 1e0:	fc 01       	movw	r30, r24
 1e2:	e8 51       	subi	r30, 0x18	; 24
 1e4:	fd 4f       	sbci	r31, 0xFD	; 253
 1e6:	21 e4       	ldi	r18, 0x41	; 65
 1e8:	28 0f       	add	r18, r24
 1ea:	20 83       	st	Z, r18
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <generateField+0x1c>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	8a 31       	cpi	r24, 0x1A	; 26
 1f6:	91 05       	cpc	r25, r1
 1f8:	9c f3       	brlt	.-26     	; 0x1e0 <generateField+0x8>
 1fa:	08 95       	ret
 1fc:	02 97       	sbiw	r24, 0x02	; 2
 1fe:	79 f4       	brne	.+30     	; 0x21e <generateField+0x46>
 200:	08 c0       	rjmp	.+16     	; 0x212 <generateField+0x3a>
 202:	fc 01       	movw	r30, r24
 204:	e8 51       	subi	r30, 0x18	; 24
 206:	fd 4f       	sbci	r31, 0xFD	; 253
 208:	21 e6       	ldi	r18, 0x61	; 97
 20a:	28 0f       	add	r18, r24
 20c:	20 83       	st	Z, r18
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	02 c0       	rjmp	.+4      	; 0x216 <generateField+0x3e>
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	8a 31       	cpi	r24, 0x1A	; 26
 218:	91 05       	cpc	r25, r1
 21a:	9c f3       	brlt	.-26     	; 0x202 <generateField+0x2a>
 21c:	08 95       	ret
 21e:	8d e0       	ldi	r24, 0x0D	; 13
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	ca c0       	rjmp	.+404    	; 0x3b8 <puts>
 224:	08 95       	ret

00000226 <printField>:
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	91 05       	cpc	r25, r1
 22e:	81 f4       	brne	.+32     	; 0x250 <printField+0x2a>
 230:	09 c0       	rjmp	.+18     	; 0x244 <printField+0x1e>
 232:	fe 01       	movw	r30, r28
 234:	e8 51       	subi	r30, 0x18	; 24
 236:	fd 4f       	sbci	r31, 0xFD	; 253
 238:	80 81       	ld	r24, Z
 23a:	ae df       	rcall	.-164    	; 0x198 <UART_SendChar>
 23c:	80 e2       	ldi	r24, 0x20	; 32
 23e:	ac df       	rcall	.-168    	; 0x198 <UART_SendChar>
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	02 c0       	rjmp	.+4      	; 0x248 <printField+0x22>
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	d0 e0       	ldi	r29, 0x00	; 0
 248:	ca 31       	cpi	r28, 0x1A	; 26
 24a:	d1 05       	cpc	r29, r1
 24c:	94 f3       	brlt	.-28     	; 0x232 <printField+0xc>
 24e:	14 c0       	rjmp	.+40     	; 0x278 <printField+0x52>
 250:	02 97       	sbiw	r24, 0x02	; 2
 252:	79 f4       	brne	.+30     	; 0x272 <printField+0x4c>
 254:	09 c0       	rjmp	.+18     	; 0x268 <printField+0x42>
 256:	fe 01       	movw	r30, r28
 258:	e8 51       	subi	r30, 0x18	; 24
 25a:	fd 4f       	sbci	r31, 0xFD	; 253
 25c:	80 81       	ld	r24, Z
 25e:	9c df       	rcall	.-200    	; 0x198 <UART_SendChar>
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	9a df       	rcall	.-204    	; 0x198 <UART_SendChar>
 264:	21 97       	sbiw	r28, 0x01	; 1
 266:	02 c0       	rjmp	.+4      	; 0x26c <printField+0x46>
 268:	c9 e1       	ldi	r28, 0x19	; 25
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	dd 23       	and	r29, r29
 26e:	9c f7       	brge	.-26     	; 0x256 <printField+0x30>
 270:	03 c0       	rjmp	.+6      	; 0x278 <printField+0x52>
 272:	8b e1       	ldi	r24, 0x1B	; 27
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	9e df       	rcall	.-196    	; 0x1b4 <UART_SendStringNewLine>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <clearConsole>:
 27e:	8a e2       	ldi	r24, 0x2A	; 42
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	98 cf       	rjmp	.-208    	; 0x1b4 <UART_SendStringNewLine>
 284:	08 95       	ret

00000286 <main>:
}

int main(void) {
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	2d 97       	sbiw	r28, 0x0d	; 13
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
    UART_init(38400);  // Initialize UART with 38400 baud
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	96 e9       	ldi	r25, 0x96	; 150
 2a0:	69 df       	rcall	.-302    	; 0x174 <UART_init>

    uint8_t test_sequence[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'U', 'A', 'R', 'T', '\r', '\n', 0 };
 2a2:	8d e0       	ldi	r24, 0x0D	; 13
 2a4:	e0 e0       	ldi	r30, 0x00	; 0
 2a6:	f2 e0       	ldi	r31, 0x02	; 2
 2a8:	de 01       	movw	r26, r28
 2aa:	11 96       	adiw	r26, 0x01	; 1
 2ac:	01 90       	ld	r0, Z+
 2ae:	0d 92       	st	X+, r0
 2b0:	8a 95       	dec	r24
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x26>

    for (uint8_t i = 0; test_sequence[i] != 0; i++) {
 2b4:	10 e0       	ldi	r17, 0x00	; 0
        UART_SendChar(test_sequence[i]);  // Send each character
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <main+0x36>
 2b8:	6f df       	rcall	.-290    	; 0x198 <UART_SendChar>
int main(void) {
    UART_init(38400);  // Initialize UART with 38400 baud

    uint8_t test_sequence[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'U', 'A', 'R', 'T', '\r', '\n', 0 };

    for (uint8_t i = 0; test_sequence[i] != 0; i++) {
 2ba:	1f 5f       	subi	r17, 0xFF	; 255
 2bc:	e1 e0       	ldi	r30, 0x01	; 1
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ec 0f       	add	r30, r28
 2c2:	fd 1f       	adc	r31, r29
 2c4:	e1 0f       	add	r30, r17
 2c6:	f1 1d       	adc	r31, r1
 2c8:	80 81       	ld	r24, Z
 2ca:	81 11       	cpse	r24, r1
 2cc:	f5 cf       	rjmp	.-22     	; 0x2b8 <main+0x32>
        UART_SendChar(test_sequence[i]);  // Send each character
    }
    
    UART_SendStringNewLine("Welcome to interactive terminal!");
 2ce:	82 e3       	ldi	r24, 0x32	; 50
 2d0:	92 e0       	ldi	r25, 0x02	; 2
 2d2:	70 df       	rcall	.-288    	; 0x1b4 <UART_SendStringNewLine>
    UART_SendStringNewLine("Choose a number for response:");
 2d4:	83 e5       	ldi	r24, 0x53	; 83
 2d6:	92 e0       	ldi	r25, 0x02	; 2
 2d8:	6d df       	rcall	.-294    	; 0x1b4 <UART_SendStringNewLine>
    UART_SendStringNewLine("1 ...... Print lowercase alphabet");
 2da:	81 e7       	ldi	r24, 0x71	; 113
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	6a df       	rcall	.-300    	; 0x1b4 <UART_SendStringNewLine>
    UART_SendStringNewLine("2 ...... Clear console");
 2e0:	83 e9       	ldi	r24, 0x93	; 147
 2e2:	92 e0       	ldi	r25, 0x02	; 2
    UART_SendStringNewLine("0 ...... Exit");
 2e4:	67 df       	rcall	.-306    	; 0x1b4 <UART_SendStringNewLine>
 2e6:	8a ea       	ldi	r24, 0xAA	; 170
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	64 df       	rcall	.-312    	; 0x1b4 <UART_SendStringNewLine>

    while (1) {
        uint8_t received = UART_GetChar();  // Wait for input
 2ec:	5c df       	rcall	.-328    	; 0x1a6 <UART_GetChar>
 2ee:	18 2f       	mov	r17, r24
        UART_SendChar(received);  // Echo back received character
 2f0:	53 df       	rcall	.-346    	; 0x198 <UART_SendChar>
        
        if (received == '1') {
 2f2:	11 33       	cpi	r17, 0x31	; 49
            // Generate lowercase alphabet
            generateField(NORMAL_CASE);
 2f4:	69 f4       	brne	.+26     	; 0x310 <main+0x8a>
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	90 e0       	ldi	r25, 0x00	; 0
            // Print it in the upward direction
            UART_SendStringNewLine("Lowercase Alphabet:");
 2fa:	6e df       	rcall	.-292    	; 0x1d8 <generateField>
 2fc:	88 eb       	ldi	r24, 0xB8	; 184
 2fe:	92 e0       	ldi	r25, 0x02	; 2
            printField(DIRECTION_UP);
 300:	59 df       	rcall	.-334    	; 0x1b4 <UART_SendStringNewLine>
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	8f df       	rcall	.-226    	; 0x226 <printField>
            UART_SendStringNewLine("");  // New line after printing the alphabet
 308:	89 e2       	ldi	r24, 0x29	; 41
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	53 df       	rcall	.-346    	; 0x1b4 <UART_SendStringNewLine>
 30e:	ee cf       	rjmp	.-36     	; 0x2ec <main+0x66>
        } else if (received == '2') {
 310:	12 33       	cpi	r17, 0x32	; 50
 312:	11 f4       	brne	.+4      	; 0x318 <main+0x92>
            // Clear the console
            clearConsole();
 314:	b4 df       	rcall	.-152    	; 0x27e <clearConsole>
 316:	ea cf       	rjmp	.-44     	; 0x2ec <main+0x66>
 318:	10 33       	cpi	r17, 0x30	; 48
        } else if (received == '0') {
 31a:	21 f0       	breq	.+8      	; 0x324 <main+0x9e>
 31c:	8c ec       	ldi	r24, 0xCC	; 204
            // Exit the loop
            break;
        } else {
            UART_SendStringNewLine("Invalid option. Try again.");
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	49 df       	rcall	.-366    	; 0x1b4 <UART_SendStringNewLine>
 322:	e4 cf       	rjmp	.-56     	; 0x2ec <main+0x66>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
        }
    }

    return 0;
}
 328:	2d 96       	adiw	r28, 0x0d	; 13
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	08 95       	ret

0000033c <__divmodsi4>:
 33c:	05 2e       	mov	r0, r21
 33e:	97 fb       	bst	r25, 7
 340:	16 f4       	brtc	.+4      	; 0x346 <__divmodsi4+0xa>
 342:	00 94       	com	r0
 344:	0f d0       	rcall	.+30     	; 0x364 <__negsi2>
 346:	57 fd       	sbrc	r21, 7
 348:	05 d0       	rcall	.+10     	; 0x354 <__divmodsi4_neg2>
 34a:	14 d0       	rcall	.+40     	; 0x374 <__udivmodsi4>
 34c:	07 fc       	sbrc	r0, 7
 34e:	02 d0       	rcall	.+4      	; 0x354 <__divmodsi4_neg2>
 350:	46 f4       	brtc	.+16     	; 0x362 <__divmodsi4_exit>
 352:	08 c0       	rjmp	.+16     	; 0x364 <__negsi2>

00000354 <__divmodsi4_neg2>:
 354:	50 95       	com	r21
 356:	40 95       	com	r20
 358:	30 95       	com	r19
 35a:	21 95       	neg	r18
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	4f 4f       	sbci	r20, 0xFF	; 255
 360:	5f 4f       	sbci	r21, 0xFF	; 255

00000362 <__divmodsi4_exit>:
 362:	08 95       	ret

00000364 <__negsi2>:
 364:	90 95       	com	r25
 366:	80 95       	com	r24
 368:	70 95       	com	r23
 36a:	61 95       	neg	r22
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	8f 4f       	sbci	r24, 0xFF	; 255
 370:	9f 4f       	sbci	r25, 0xFF	; 255
 372:	08 95       	ret

00000374 <__udivmodsi4>:
 374:	a1 e2       	ldi	r26, 0x21	; 33
 376:	1a 2e       	mov	r1, r26
 378:	aa 1b       	sub	r26, r26
 37a:	bb 1b       	sub	r27, r27
 37c:	fd 01       	movw	r30, r26
 37e:	0d c0       	rjmp	.+26     	; 0x39a <__udivmodsi4_ep>

00000380 <__udivmodsi4_loop>:
 380:	aa 1f       	adc	r26, r26
 382:	bb 1f       	adc	r27, r27
 384:	ee 1f       	adc	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	a2 17       	cp	r26, r18
 38a:	b3 07       	cpc	r27, r19
 38c:	e4 07       	cpc	r30, r20
 38e:	f5 07       	cpc	r31, r21
 390:	20 f0       	brcs	.+8      	; 0x39a <__udivmodsi4_ep>
 392:	a2 1b       	sub	r26, r18
 394:	b3 0b       	sbc	r27, r19
 396:	e4 0b       	sbc	r30, r20
 398:	f5 0b       	sbc	r31, r21

0000039a <__udivmodsi4_ep>:
 39a:	66 1f       	adc	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	88 1f       	adc	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	1a 94       	dec	r1
 3a4:	69 f7       	brne	.-38     	; 0x380 <__udivmodsi4_loop>
 3a6:	60 95       	com	r22
 3a8:	70 95       	com	r23
 3aa:	80 95       	com	r24
 3ac:	90 95       	com	r25
 3ae:	9b 01       	movw	r18, r22
 3b0:	ac 01       	movw	r20, r24
 3b2:	bd 01       	movw	r22, r26
 3b4:	cf 01       	movw	r24, r30
 3b6:	08 95       	ret

000003b8 <puts>:
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <__iob+0x2>
 3c4:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <__iob+0x3>
 3c8:	23 81       	ldd	r18, Z+3	; 0x03
 3ca:	21 ff       	sbrs	r18, 1
 3cc:	1b c0       	rjmp	.+54     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ce:	8c 01       	movw	r16, r24
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	f8 01       	movw	r30, r16
 3d6:	81 91       	ld	r24, Z+
 3d8:	8f 01       	movw	r16, r30
 3da:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <__iob+0x2>
 3de:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <__iob+0x3>
 3e2:	db 01       	movw	r26, r22
 3e4:	18 96       	adiw	r26, 0x08	; 8
 3e6:	ed 91       	ld	r30, X+
 3e8:	fc 91       	ld	r31, X
 3ea:	19 97       	sbiw	r26, 0x09	; 9
 3ec:	88 23       	and	r24, r24
 3ee:	31 f0       	breq	.+12     	; 0x3fc <puts+0x44>
 3f0:	19 95       	eicall
 3f2:	89 2b       	or	r24, r25
 3f4:	79 f3       	breq	.-34     	; 0x3d4 <puts+0x1c>
 3f6:	df ef       	ldi	r29, 0xFF	; 255
 3f8:	cf ef       	ldi	r28, 0xFF	; 255
 3fa:	ec cf       	rjmp	.-40     	; 0x3d4 <puts+0x1c>
 3fc:	8a e0       	ldi	r24, 0x0A	; 10
 3fe:	19 95       	eicall
 400:	89 2b       	or	r24, r25
 402:	19 f0       	breq	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	9f ef       	ldi	r25, 0xFF	; 255
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	8d 2f       	mov	r24, r29
 40c:	9c 2f       	mov	r25, r28
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>


LWM_MSSY_deRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000236  00800200  0000312a  000031be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000312a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b07  00800436  00800436  000033f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000718  00000000  00000000  00003490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000095d5  00000000  00000000  00003ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036aa  00000000  00000000  0000d17d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000066c6  00000000  00000000  00010827  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013d8  00000000  00000000  00016ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000165b7  00000000  00000000  000182c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000493e  00000000  00000000  0002e87f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  000331bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007da1  00000000  00000000  00033925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
       6:	00 00       	nop
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
       e:	00 00       	nop
      10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_13>
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
      3e:	00 00       	nop
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
      42:	00 00       	nop
      44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
      46:	00 00       	nop
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
      4e:	00 00       	nop
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
      52:	00 00       	nop
      54:	70 c3       	rjmp	.+1760   	; 0x736 <__vector_21>
      56:	00 00       	nop
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
      5e:	00 00       	nop
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
      62:	00 00       	nop
      64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
      66:	00 00       	nop
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
      6e:	00 00       	nop
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
      72:	00 00       	nop
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
      76:	00 00       	nop
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
      7e:	00 00       	nop
      80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
      82:	00 00       	nop
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_36>
      94:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_37>
      98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_42>
      ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
      be:	00 00       	nop
      c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
      de:	00 00       	nop
      e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	46 c0       	rjmp	.+140    	; 0x172 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	44 c0       	rjmp	.+136    	; 0x172 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	42 c0       	rjmp	.+132    	; 0x172 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	40 c0       	rjmp	.+128    	; 0x172 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3e c0       	rjmp	.+124    	; 0x172 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3c c0       	rjmp	.+120    	; 0x172 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3a c0       	rjmp	.+116    	; 0x172 <__bad_interrupt>
      fe:	00 00       	nop
     100:	38 c0       	rjmp	.+112    	; 0x172 <__bad_interrupt>
     102:	00 00       	nop
     104:	36 c0       	rjmp	.+108    	; 0x172 <__bad_interrupt>
     106:	00 00       	nop
     108:	34 c0       	rjmp	.+104    	; 0x172 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	32 c0       	rjmp	.+100    	; 0x172 <__bad_interrupt>
     10e:	00 00       	nop
     110:	30 c0       	rjmp	.+96     	; 0x172 <__bad_interrupt>
     112:	00 00       	nop
     114:	2e c0       	rjmp	.+92     	; 0x172 <__bad_interrupt>
     116:	00 00       	nop
     118:	2c c0       	rjmp	.+88     	; 0x172 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2a c0       	rjmp	.+84     	; 0x172 <__bad_interrupt>
     11e:	00 00       	nop
     120:	32 07       	cpc	r19, r18
     122:	4b 08       	sbc	r4, r11
     124:	23 07       	cpc	r18, r19
     126:	e1 07       	cpc	r30, r17
     128:	23 07       	cpc	r18, r19
     12a:	82 08       	sbc	r8, r2
     12c:	23 07       	cpc	r18, r19
     12e:	23 07       	cpc	r18, r19
     130:	8a 08       	sbc	r8, r10
     132:	92 08       	sbc	r9, r2
     134:	a1 08       	sbc	r10, r1

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d1 e4       	ldi	r29, 0x41	; 65
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	14 e0       	ldi	r17, 0x04	; 4
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	ea e2       	ldi	r30, 0x2A	; 42
     14a:	f1 e3       	ldi	r31, 0x31	; 49
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a6 33       	cpi	r26, 0x36	; 54
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	2f e0       	ldi	r18, 0x0F	; 15
     15e:	a6 e3       	ldi	r26, 0x36	; 54
     160:	b4 e0       	ldi	r27, 0x04	; 4
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	ad 33       	cpi	r26, 0x3D	; 61
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
     16c:	01 d6       	rcall	.+3074   	; 0xd70 <main>
     16e:	0c 94 93 18 	jmp	0x3126	; 0x3126 <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <ADC_Init>:
	while((tbi(ADCSRA,ADSC))){} //pockat nez skonci
	//pomocna = ADCL | (ADCH << 8);
	tmp=ADC;
	ADCSRA |= (1<<ADIF);
	return tmp;
}
     174:	ac e7       	ldi	r26, 0x7C	; 124
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	1c 92       	st	X, r1
     17a:	ea e7       	ldi	r30, 0x7A	; 122
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	10 82       	st	Z, r1
     180:	90 81       	ld	r25, Z
     182:	89 2b       	or	r24, r25
     184:	80 83       	st	Z, r24
     186:	8c 91       	ld	r24, X
     188:	00 24       	eor	r0, r0
     18a:	76 95       	lsr	r23
     18c:	67 95       	ror	r22
     18e:	07 94       	ror	r0
     190:	76 95       	lsr	r23
     192:	67 95       	ror	r22
     194:	07 94       	ror	r0
     196:	76 2f       	mov	r23, r22
     198:	60 2d       	mov	r22, r0
     19a:	68 2b       	or	r22, r24
     19c:	6c 93       	st	X, r22
     19e:	80 81       	ld	r24, Z
     1a0:	80 68       	ori	r24, 0x80	; 128
     1a2:	80 83       	st	Z, r24
     1a4:	eb e7       	ldi	r30, 0x7B	; 123
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 23       	and	r24, r24
     1ac:	ec f7       	brge	.-6      	; 0x1a8 <ADC_Init+0x34>
     1ae:	eb e7       	ldi	r30, 0x7B	; 123
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	85 ff       	sbrs	r24, 5
     1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <ADC_Init+0x3e>
     1b8:	08 95       	ret

000001ba <ADC_readTemp>:
uint16_t ADC_readTemp(){
	uint16_t tmp=0;
	ADMUX &= ~(15 << MUX0);
     1ba:	ec e7       	ldi	r30, 0x7C	; 124
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	80 7f       	andi	r24, 0xF0	; 240
     1c2:	80 83       	st	Z, r24
	ADCSRB&= ~(1 << MUX5);
     1c4:	ab e7       	ldi	r26, 0x7B	; 123
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	8c 91       	ld	r24, X
     1ca:	87 7f       	andi	r24, 0xF7	; 247
     1cc:	8c 93       	st	X, r24
	ADCSRB|= (1<<MUX5);
     1ce:	8c 91       	ld	r24, X
     1d0:	88 60       	ori	r24, 0x08	; 8
     1d2:	8c 93       	st	X, r24
	ADMUX |= (0b01001<<MUX0);
     1d4:	80 81       	ld	r24, Z
     1d6:	89 60       	ori	r24, 0x09	; 9
     1d8:	80 83       	st	Z, r24
	ADCSRA |= 0x40; // spustit konverzi
     1da:	ea e7       	ldi	r30, 0x7A	; 122
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 64       	ori	r24, 0x40	; 64
     1e2:	80 83       	st	Z, r24
	while((tbi(ADCSRA,ADSC))){} //pockat nez skonci
     1e4:	80 81       	ld	r24, Z
     1e6:	86 fd       	sbrc	r24, 6
     1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <ADC_readTemp+0x2a>
	//pomocna = ADCL | (ADCH << 8);
	tmp=ADC;
     1ea:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1ee:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA |= (1<<ADIF);
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	90 81       	ld	r25, Z
     1f8:	90 61       	ori	r25, 0x10	; 16
     1fa:	90 83       	st	Z, r25
	return tmp;
	
     1fc:	c9 01       	movw	r24, r18
     1fe:	08 95       	ret

00000200 <appCmdIdentifyPeriodTimerHandler>:
#if defined(PLATFORM_RCB128RFA1)
  HAL_GPIO_PIN(LED0, E, 2);
  HAL_GPIO_PIN(LED1, E, 3);
  HAL_GPIO_PIN(LED2, E, 4);
#elif defined(PLATFORM_deRFMEGA)
  HAL_GPIO_PIN(LED0, G, 5);
     200:	94 b3       	in	r25, 0x14	; 20
     202:	80 e2       	ldi	r24, 0x20	; 32
     204:	89 27       	eor	r24, r25
     206:	84 bb       	out	0x14, r24	; 20
     208:	08 95       	ret

0000020a <appCmdHandle>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
  AppCmdHeader_t *header = (AppCmdHeader_t *)data;

  if (size < sizeof(AppCmdHeader_t))
     20e:	66 23       	and	r22, r22
     210:	c9 f1       	breq	.+114    	; 0x284 <appCmdHandle+0x7a>
    return false;

  if (APP_COMMAND_ID_IDENTIFY == header->id)
     212:	fc 01       	movw	r30, r24
     214:	20 81       	ld	r18, Z
     216:	20 31       	cpi	r18, 0x10	; 16
     218:	b9 f5       	brne	.+110    	; 0x288 <appCmdHandle+0x7e>
  {
    AppCmdIdentify_t *req = (AppCmdIdentify_t *)data;

    if (sizeof(AppCmdIdentify_t) != size)
     21a:	65 30       	cpi	r22, 0x05	; 5
     21c:	b9 f5       	brne	.+110    	; 0x28c <appCmdHandle+0x82>
     21e:	ec 01       	movw	r28, r24
      return false;

    SYS_TimerStop(&appCmdIdentifyDurationTimer);
     220:	83 e8       	ldi	r24, 0x83	; 131
     222:	94 e0       	ldi	r25, 0x04	; 4
     224:	0e 94 0d 14 	call	0x281a	; 0x281a <SYS_TimerStop>
    SYS_TimerStop(&appCmdIdentifyPeriodTimer);
     228:	86 e7       	ldi	r24, 0x76	; 118
     22a:	94 e0       	ldi	r25, 0x04	; 4
     22c:	0e 94 0d 14 	call	0x281a	; 0x281a <SYS_TimerStop>

    appCmdIdentifyDurationTimer.interval = req->duration;
     230:	e3 e8       	ldi	r30, 0x83	; 131
     232:	f4 e0       	ldi	r31, 0x04	; 4
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	9a 81       	ldd	r25, Y+2	; 0x02
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	86 83       	std	Z+6, r24	; 0x06
     23e:	97 83       	std	Z+7, r25	; 0x07
     240:	a0 87       	std	Z+8, r26	; 0x08
     242:	b1 87       	std	Z+9, r27	; 0x09
    appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
     244:	12 86       	std	Z+10, r1	; 0x0a
    appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
     246:	85 e9       	ldi	r24, 0x95	; 149
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	94 87       	std	Z+12, r25	; 0x0c
     24c:	83 87       	std	Z+11, r24	; 0x0b
    SYS_TimerStart(&appCmdIdentifyDurationTimer);
     24e:	cf 01       	movw	r24, r30
     250:	0e 94 64 14 	call	0x28c8	; 0x28c8 <SYS_TimerStart>

    appCmdIdentifyPeriodTimer.interval = req->period;
     254:	e6 e7       	ldi	r30, 0x76	; 118
     256:	f4 e0       	ldi	r31, 0x04	; 4
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	a0 e0       	ldi	r26, 0x00	; 0
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	86 83       	std	Z+6, r24	; 0x06
     262:	97 83       	std	Z+7, r25	; 0x07
     264:	a0 87       	std	Z+8, r26	; 0x08
     266:	b1 87       	std	Z+9, r27	; 0x09
    appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	82 87       	std	Z+10, r24	; 0x0a
    appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	94 87       	std	Z+12, r25	; 0x0c
     272:	83 87       	std	Z+11, r24	; 0x0b
    SYS_TimerStart(&appCmdIdentifyPeriodTimer);
     274:	cf 01       	movw	r24, r30
     276:	0e 94 64 14 	call	0x28c8	; 0x28c8 <SYS_TimerStart>
     27a:	a5 98       	cbi	0x14, 5	; 20

    HAL_LedOn(LED_IDENTIFY);
    NWK_Lock();
     27c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <NWK_Lock>

    return true;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	05 c0       	rjmp	.+10     	; 0x28e <appCmdHandle+0x84>
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
  AppCmdHeader_t *header = (AppCmdHeader_t *)data;

  if (size < sizeof(AppCmdHeader_t))
    return false;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	03 c0       	rjmp	.+6      	; 0x28e <appCmdHandle+0x84>
    NWK_Lock();

    return true;
  }

  return false;
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	01 c0       	rjmp	.+2      	; 0x28e <appCmdHandle+0x84>
  if (APP_COMMAND_ID_IDENTIFY == header->id)
  {
    AppCmdIdentify_t *req = (AppCmdIdentify_t *)data;

    if (sizeof(AppCmdIdentify_t) != size)
      return false;
     28c:	80 e0       	ldi	r24, 0x00	; 0

    return true;
  }

  return false;
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <appCmdDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool appCmdDataInd(NWK_DataInd_t *ind)
{
  return appCmdHandle(ind->data, ind->size);
     294:	fc 01       	movw	r30, r24
     296:	61 85       	ldd	r22, Z+9	; 0x09
     298:	87 81       	ldd	r24, Z+7	; 0x07
     29a:	90 85       	ldd	r25, Z+8	; 0x08
     29c:	b6 cf       	rjmp	.-148    	; 0x20a <appCmdHandle>
}
     29e:	08 95       	ret

000002a0 <appCmdCheckPendingTable>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
  if (appCmdInProgress)
     2ac:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <appCmdInProgress>
     2b0:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <appCmdInProgress+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	19 f5       	brne	.+70     	; 0x2fe <appCmdCheckPendingTable+0x5e>
     2b8:	c9 e4       	ldi	r28, 0x49	; 73
     2ba:	d4 e0       	ldi	r29, 0x04	; 4
     2bc:	0f 2e       	mov	r0, r31
     2be:	f6 e7       	ldi	r31, 0x76	; 118
     2c0:	ef 2e       	mov	r14, r31
     2c2:	f4 e0       	ldi	r31, 0x04	; 4
     2c4:	ff 2e       	mov	r15, r31
     2c6:	f0 2d       	mov	r31, r0
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
  appCmdInProgress = entry;

  appCmdDataReq.dstAddr = entry->addr;
     2c8:	06 e3       	ldi	r16, 0x36	; 54
     2ca:	14 e0       	ldi	r17, 0x04	; 4
  if (appCmdInProgress)
    return;

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
  {
    if (appCmdPendingTable[i].ready)
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	88 23       	and	r24, r24
     2d0:	91 f0       	breq	.+36     	; 0x2f6 <appCmdCheckPendingTable+0x56>

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
  appCmdInProgress = entry;
     2d2:	d0 93 48 04 	sts	0x0448, r29	; 0x800448 <appCmdInProgress+0x1>
     2d6:	c0 93 47 04 	sts	0x0447, r28	; 0x800447 <appCmdInProgress>

  appCmdDataReq.dstAddr = entry->addr;
     2da:	88 81       	ld	r24, Y
     2dc:	99 81       	ldd	r25, Y+1	; 0x01
     2de:	f8 01       	movw	r30, r16
     2e0:	96 83       	std	Z+6, r25	; 0x06
     2e2:	85 83       	std	Z+5, r24	; 0x05
  appCmdDataReq.data = &entry->payload;
     2e4:	ce 01       	movw	r24, r28
     2e6:	04 96       	adiw	r24, 0x04	; 4
     2e8:	93 87       	std	Z+11, r25	; 0x0b
     2ea:	82 87       	std	Z+10, r24	; 0x0a
  appCmdDataReq.size = entry->size;
     2ec:	8a 81       	ldd	r24, Y+2	; 0x02
     2ee:	84 87       	std	Z+12, r24	; 0x0c
  NWK_DataReq(&appCmdDataReq);
     2f0:	c8 01       	movw	r24, r16
     2f2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <NWK_DataReq>
     2f6:	29 96       	adiw	r28, 0x09	; 9
static void appCmdCheckPendingTable(void)
{
  if (appCmdInProgress)
    return;

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
     2f8:	ce 15       	cp	r28, r14
     2fa:	df 05       	cpc	r29, r15
     2fc:	39 f7       	brne	.-50     	; 0x2cc <appCmdCheckPendingTable+0x2c>
  {
    if (appCmdPendingTable[i].ready)
      appCmdDataRequest(&appCmdPendingTable[i]);
  }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	08 95       	ret

0000030c <appCmdDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataConf(NWK_DataReq_t *req)
{
  appCmdInProgress->addr = APP_CMD_INVALID_ADDR;
     30c:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <appCmdInProgress>
     310:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <appCmdInProgress+0x1>
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	9f ef       	ldi	r25, 0xFF	; 255
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
  appCmdInProgress->ready = false;
     31c:	13 82       	std	Z+3, r1	; 0x03
  appCmdInProgress = NULL;
     31e:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <appCmdInProgress+0x1>
     322:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <appCmdInProgress>

  appCmdCheckPendingTable();
     326:	bc cf       	rjmp	.-136    	; 0x2a0 <appCmdCheckPendingTable>
     328:	08 95       	ret

0000032a <appCmdIdentifyDurationTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyDurationTimerHandler(SYS_Timer_t *timer)
{
  NWK_Unlock();
     32a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <NWK_Unlock>
     32e:	a5 98       	cbi	0x14, 5	; 20
  HAL_LedOn(LED_IDENTIFY);
  SYS_TimerStop(&appCmdIdentifyPeriodTimer);
     330:	86 e7       	ldi	r24, 0x76	; 118
     332:	94 e0       	ldi	r25, 0x04	; 4
     334:	0c 94 0d 14 	jmp	0x281a	; 0x281a <SYS_TimerStop>
     338:	08 95       	ret

0000033a <APP_CommandsInit>:

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsInit(void)
{
  appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
     33a:	e3 e8       	ldi	r30, 0x83	; 131
     33c:	f4 e0       	ldi	r31, 0x04	; 4
     33e:	12 86       	std	Z+10, r1	; 0x0a
  appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
     340:	85 e9       	ldi	r24, 0x95	; 149
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	94 87       	std	Z+12, r25	; 0x0c
     346:	83 87       	std	Z+11, r24	; 0x0b

  appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
     348:	e6 e7       	ldi	r30, 0x76	; 118
     34a:	f4 e0       	ldi	r31, 0x04	; 4
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	82 87       	std	Z+10, r24	; 0x0a
  appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	94 87       	std	Z+12, r25	; 0x0c
     356:	83 87       	std	Z+11, r24	; 0x0b

  appCmdInProgress = NULL;
     358:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <appCmdInProgress+0x1>
     35c:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <appCmdInProgress>
  appCmdDataReq.dstAddr = 0;
     360:	e6 e3       	ldi	r30, 0x36	; 54
     362:	f4 e0       	ldi	r31, 0x04	; 4
     364:	16 82       	std	Z+6, r1	; 0x06
     366:	15 82       	std	Z+5, r1	; 0x05
  appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
     368:	8f e0       	ldi	r24, 0x0F	; 15
     36a:	87 83       	std	Z+7, r24	; 0x07
  appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
     36c:	80 87       	std	Z+8, r24	; 0x08
  appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	81 87       	std	Z+9, r24	; 0x09
  appCmdDataReq.confirm = appCmdDataConf;
     372:	86 e8       	ldi	r24, 0x86	; 134
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	96 87       	std	Z+14, r25	; 0x0e
     378:	85 87       	std	Z+13, r24	; 0x0d
     37a:	e9 e4       	ldi	r30, 0x49	; 73
     37c:	f4 e0       	ldi	r31, 0x04	; 4
     37e:	26 e7       	ldi	r18, 0x76	; 118
     380:	34 e0       	ldi	r19, 0x04	; 4

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
  {
    appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
     382:	8f ef       	ldi	r24, 0xFF	; 255
     384:	9f ef       	ldi	r25, 0xFF	; 255
     386:	91 83       	std	Z+1, r25	; 0x01
     388:	80 83       	st	Z, r24
    appCmdPendingTable[i].ready = false;
     38a:	13 82       	std	Z+3, r1	; 0x03
     38c:	39 96       	adiw	r30, 0x09	; 9
  appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
  appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
  appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
  appCmdDataReq.confirm = appCmdDataConf;

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
     38e:	e2 17       	cp	r30, r18
     390:	f3 07       	cpc	r31, r19
     392:	c9 f7       	brne	.-14     	; 0x386 <APP_CommandsInit+0x4c>
  {
    appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    appCmdPendingTable[i].ready = false;
  }

  NWK_OpenEndpoint(APP_CMD_ENDPOINT, appCmdDataInd);
     394:	6a e4       	ldi	r22, 0x4A	; 74
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	8f e0       	ldi	r24, 0x0F	; 15
     39a:	0c 94 96 0a 	jmp	0x152c	; 0x152c <NWK_OpenEndpoint>
     39e:	08 95       	ret

000003a0 <APP_CommandsPending>:
*****************************************************************************/
bool APP_CommandsPending(uint16_t addr)
{
  for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++)
  {
    if (addr == appCmdPendingTable[i].addr)
     3a0:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <appCmdPendingTable+0x9>
     3a4:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <appCmdPendingTable+0xa>
     3a8:	82 17       	cp	r24, r18
     3aa:	93 07       	cpc	r25, r19
     3ac:	f1 f0       	breq	.+60     	; 0x3ea <APP_CommandsPending+0x4a>
     3ae:	20 91 5b 04 	lds	r18, 0x045B	; 0x80045b <appCmdPendingTable+0x12>
     3b2:	30 91 5c 04 	lds	r19, 0x045C	; 0x80045c <appCmdPendingTable+0x13>
     3b6:	82 17       	cp	r24, r18
     3b8:	93 07       	cpc	r25, r19
     3ba:	89 f0       	breq	.+34     	; 0x3de <APP_CommandsPending+0x3e>
     3bc:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <appCmdPendingTable+0x1b>
     3c0:	30 91 65 04 	lds	r19, 0x0465	; 0x800465 <appCmdPendingTable+0x1c>
     3c4:	82 17       	cp	r24, r18
     3c6:	93 07       	cpc	r25, r19
     3c8:	69 f0       	breq	.+26     	; 0x3e4 <APP_CommandsPending+0x44>
     3ca:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <appCmdPendingTable+0x24>
     3ce:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <appCmdPendingTable+0x25>
     3d2:	28 17       	cp	r18, r24
     3d4:	39 07       	cpc	r19, r25
     3d6:	e1 f4       	brne	.+56     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3d8:	84 e0       	ldi	r24, 0x04	; 4
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	08 c0       	rjmp	.+16     	; 0x3ee <APP_CommandsPending+0x4e>
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <APP_CommandsPending+0x4e>
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <APP_CommandsPending+0x4e>
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
    {
      appCmdPendingTable[i].ready = true;
     3ee:	fc 01       	movw	r30, r24
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	ee 0f       	add	r30, r30
     3fa:	ff 1f       	adc	r31, r31
     3fc:	8e 0f       	add	r24, r30
     3fe:	9f 1f       	adc	r25, r31
     400:	fc 01       	movw	r30, r24
     402:	e7 5b       	subi	r30, 0xB7	; 183
     404:	fb 4f       	sbci	r31, 0xFB	; 251
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	83 83       	std	Z+3, r24	; 0x03
      appCmdCheckPendingTable();
     40a:	4a df       	rcall	.-364    	; 0x2a0 <appCmdCheckPendingTable>
      return true;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	08 95       	ret
    }
  }

  return false;
     410:	80 e0       	ldi	r24, 0x00	; 0
}
     412:	08 95       	ret

00000414 <APP_CommandsByteReceived>:

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsByteReceived(uint8_t byte)
{
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	00 d0       	rcall	.+0      	; 0x41e <APP_CommandsByteReceived+0xa>
     41e:	00 d0       	rcall	.+0      	; 0x420 <APP_CommandsByteReceived+0xc>
     420:	1f 92       	push	r1
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
  switch (appCmdUartState)
     426:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <appCmdUartState>
     42a:	92 30       	cpi	r25, 0x02	; 2
     42c:	21 f1       	breq	.+72     	; 0x476 <APP_CommandsByteReceived+0x62>
     42e:	28 f4       	brcc	.+10     	; 0x43a <APP_CommandsByteReceived+0x26>
     430:	99 23       	and	r25, r25
     432:	49 f0       	breq	.+18     	; 0x446 <APP_CommandsByteReceived+0x32>
     434:	91 30       	cpi	r25, 0x01	; 1
     436:	91 f0       	breq	.+36     	; 0x45c <APP_CommandsByteReceived+0x48>
     438:	e1 c0       	rjmp	.+450    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
     43a:	93 30       	cpi	r25, 0x03	; 3
     43c:	c9 f1       	breq	.+114    	; 0x4b0 <APP_CommandsByteReceived+0x9c>
     43e:	94 30       	cpi	r25, 0x04	; 4
     440:	09 f4       	brne	.+2      	; 0x444 <APP_CommandsByteReceived+0x30>
     442:	5a c0       	rjmp	.+180    	; 0x4f8 <APP_CommandsByteReceived+0xe4>
     444:	db c0       	rjmp	.+438    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
  {
    case APP_CMD_UART_STATE_IDLE:
    {
      if (0x10 == byte)
     446:	80 31       	cpi	r24, 0x10	; 16
     448:	09 f0       	breq	.+2      	; 0x44c <APP_CommandsByteReceived+0x38>
     44a:	d8 c0       	rjmp	.+432    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
      {
        appCmdUartPtr = 0;
     44c:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <appCmdUartPtr>
        appCmdUartCsum = byte;
     450:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <appCmdUartCsum>
        appCmdUartState = APP_CMD_UART_STATE_SYNC;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <appCmdUartState>
     45a:	d0 c0       	rjmp	.+416    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
      }
    } break;

    case APP_CMD_UART_STATE_SYNC:
    {
      appCmdUartCsum += byte;
     45c:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <appCmdUartCsum>
     460:	98 0f       	add	r25, r24
     462:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <appCmdUartCsum>

      if (0x02 == byte)
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	19 f4       	brne	.+6      	; 0x470 <APP_CommandsByteReceived+0x5c>
        appCmdUartState = APP_CMD_UART_STATE_DATA;
     46a:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <appCmdUartState>
     46e:	c6 c0       	rjmp	.+396    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
      else
        appCmdUartState = APP_CMD_UART_STATE_IDLE;
     470:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <appCmdUartState>
     474:	c3 c0       	rjmp	.+390    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
    } break;

    case APP_CMD_UART_STATE_DATA:
    {
      appCmdUartCsum += byte;
     476:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <appCmdUartCsum>
     47a:	98 0f       	add	r25, r24
     47c:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <appCmdUartCsum>

      if (0x10 == byte)
     480:	80 31       	cpi	r24, 0x10	; 16
     482:	21 f4       	brne	.+8      	; 0x48c <APP_CommandsByteReceived+0x78>
        appCmdUartState = APP_CMD_UART_STATE_MARK;
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <appCmdUartState>
     48a:	0a c0       	rjmp	.+20     	; 0x4a0 <APP_CommandsByteReceived+0x8c>
      else
        appCmdUartBuf[appCmdUartPtr++] = byte;
     48c:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <appCmdUartPtr>
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	9e 0f       	add	r25, r30
     494:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <appCmdUartPtr>
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	ef 56       	subi	r30, 0x6F	; 111
     49c:	fb 4f       	sbci	r31, 0xFB	; 251
     49e:	80 83       	st	Z, r24

      if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE)
     4a0:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <appCmdUartPtr>
     4a4:	80 31       	cpi	r24, 0x10	; 16
     4a6:	09 f0       	breq	.+2      	; 0x4aa <APP_CommandsByteReceived+0x96>
     4a8:	a9 c0       	rjmp	.+338    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
        appCmdUartState = APP_CMD_UART_STATE_IDLE;
     4aa:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <appCmdUartState>
     4ae:	a6 c0       	rjmp	.+332    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
    } break;

    case APP_CMD_UART_STATE_MARK:
    {
      appCmdUartCsum += byte;
     4b0:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <appCmdUartCsum>
     4b4:	98 0f       	add	r25, r24
     4b6:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <appCmdUartCsum>

      if (0x10 == byte)
     4ba:	80 31       	cpi	r24, 0x10	; 16
     4bc:	a1 f4       	brne	.+40     	; 0x4e6 <APP_CommandsByteReceived+0xd2>
      {
        appCmdUartBuf[appCmdUartPtr++] = byte;
     4be:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <appCmdUartPtr>
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	8e 0f       	add	r24, r30
     4c6:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <appCmdUartPtr>
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	ef 56       	subi	r30, 0x6F	; 111
     4ce:	fb 4f       	sbci	r31, 0xFB	; 251
     4d0:	90 e1       	ldi	r25, 0x10	; 16
     4d2:	90 83       	st	Z, r25

        if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE)
     4d4:	80 31       	cpi	r24, 0x10	; 16
     4d6:	19 f4       	brne	.+6      	; 0x4de <APP_CommandsByteReceived+0xca>
          appCmdUartState = APP_CMD_UART_STATE_IDLE;
     4d8:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <appCmdUartState>
     4dc:	8f c0       	rjmp	.+286    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
        else
          appCmdUartState = APP_CMD_UART_STATE_DATA;
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <appCmdUartState>
     4e4:	8b c0       	rjmp	.+278    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
      }

      else if (0x03 == byte)
     4e6:	83 30       	cpi	r24, 0x03	; 3
     4e8:	21 f4       	brne	.+8      	; 0x4f2 <APP_CommandsByteReceived+0xde>
        appCmdUartState = APP_CMD_UART_STATE_CSUM;
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <appCmdUartState>
     4f0:	85 c0       	rjmp	.+266    	; 0x5fc <APP_CommandsByteReceived+0x1e8>

      else
        appCmdUartState = APP_CMD_UART_STATE_IDLE;
     4f2:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <appCmdUartState>
     4f6:	82 c0       	rjmp	.+260    	; 0x5fc <APP_CommandsByteReceived+0x1e8>
    } break;

    case APP_CMD_UART_STATE_CSUM:
    {
      if (byte == appCmdUartCsum)
     4f8:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <appCmdUartCsum>
     4fc:	89 13       	cpse	r24, r25
     4fe:	7c c0       	rjmp	.+248    	; 0x5f8 <APP_CommandsByteReceived+0x1e4>
*****************************************************************************/
static void appCmdUartProcess(uint8_t *data, uint8_t size)
{
  AppCmdUartHeader_t *header = (AppCmdUartHeader_t *)data;

  if (size < sizeof(AppCmdUartHeader_t))
     500:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <appCmdUartPtr>
     504:	89 30       	cpi	r24, 0x09	; 9
     506:	08 f4       	brcc	.+2      	; 0x50a <APP_CommandsByteReceived+0xf6>
     508:	77 c0       	rjmp	.+238    	; 0x5f8 <APP_CommandsByteReceived+0x1e4>
    return;

  if (APP_COMMAND_ID_IDENTIFY == header->commandId)
     50a:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <appCmdUartBuf>
     50e:	80 31       	cpi	r24, 0x10	; 16
     510:	09 f0       	breq	.+2      	; 0x514 <APP_CommandsByteReceived+0x100>
     512:	72 c0       	rjmp	.+228    	; 0x5f8 <APP_CommandsByteReceived+0x1e4>
  {
    AppCmdUartIdentify_t *uartCmd = (AppCmdUartIdentify_t *)data;
    AppCmdIdentify_t cmd;

    cmd.id = APP_COMMAND_ID_IDENTIFY;
     514:	89 83       	std	Y+1, r24	; 0x01
    cmd.duration = uartCmd->duration;
     516:	e1 e9       	ldi	r30, 0x91	; 145
     518:	f4 e0       	ldi	r31, 0x04	; 4
     51a:	81 85       	ldd	r24, Z+9	; 0x09
     51c:	92 85       	ldd	r25, Z+10	; 0x0a
     51e:	9b 83       	std	Y+3, r25	; 0x03
     520:	8a 83       	std	Y+2, r24	; 0x02
    cmd.period = uartCmd->period;
     522:	83 85       	ldd	r24, Z+11	; 0x0b
     524:	94 85       	ldd	r25, Z+12	; 0x0c
     526:	9d 83       	std	Y+5, r25	; 0x05
     528:	8c 83       	std	Y+4, r24	; 0x04

    appCmdBuffer(header->dstAddr, (uint8_t *)&cmd, sizeof(AppCmdIdentify_t));
     52a:	01 81       	ldd	r16, Z+1	; 0x01
     52c:	12 81       	ldd	r17, Z+2	; 0x02
     52e:	c8 01       	movw	r24, r16

/*************************************************************************//**
*****************************************************************************/
static void appCmdBuffer(uint16_t addr, uint8_t *data, uint8_t size)
{
  if (APP_ADDR == addr)
     530:	85 30       	cpi	r24, 0x05	; 5
     532:	e0 e7       	ldi	r30, 0x70	; 112
     534:	9e 07       	cpc	r25, r30
     536:	29 f4       	brne	.+10     	; 0x542 <APP_CommandsByteReceived+0x12e>
  {
    appCmdHandle(data, size);
     538:	65 e0       	ldi	r22, 0x05	; 5
     53a:	ce 01       	movw	r24, r28
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	65 de       	rcall	.-822    	; 0x20a <appCmdHandle>
     540:	5b c0       	rjmp	.+182    	; 0x5f8 <APP_CommandsByteReceived+0x1e4>
  }

  else if (addr & NWK_ROUTE_NON_ROUTING)
     542:	11 23       	and	r17, r17
     544:	0c f0       	brlt	.+2      	; 0x548 <APP_CommandsByteReceived+0x134>
     546:	3f c0       	rjmp	.+126    	; 0x5c6 <APP_CommandsByteReceived+0x1b2>
  {
    for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++)
    {
      if (APP_CMD_INVALID_ADDR == appCmdPendingTable[i].addr)
     548:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <appCmdPendingTable+0x9>
     54c:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <appCmdPendingTable+0xa>
     550:	2f 3f       	cpi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	f1 f0       	breq	.+60     	; 0x592 <APP_CommandsByteReceived+0x17e>
     556:	20 91 5b 04 	lds	r18, 0x045B	; 0x80045b <appCmdPendingTable+0x12>
     55a:	30 91 5c 04 	lds	r19, 0x045C	; 0x80045c <appCmdPendingTable+0x13>
     55e:	2f 3f       	cpi	r18, 0xFF	; 255
     560:	3f 4f       	sbci	r19, 0xFF	; 255
     562:	89 f0       	breq	.+34     	; 0x586 <APP_CommandsByteReceived+0x172>
     564:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <appCmdPendingTable+0x1b>
     568:	30 91 65 04 	lds	r19, 0x0465	; 0x800465 <appCmdPendingTable+0x1c>
     56c:	2f 3f       	cpi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	69 f0       	breq	.+26     	; 0x58c <APP_CommandsByteReceived+0x178>
     572:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <appCmdPendingTable+0x24>
     576:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <appCmdPendingTable+0x25>
     57a:	2f 3f       	cpi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	e1 f5       	brne	.+120    	; 0x5f8 <APP_CommandsByteReceived+0x1e4>
     580:	44 e0       	ldi	r20, 0x04	; 4
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	08 c0       	rjmp	.+16     	; 0x596 <APP_CommandsByteReceived+0x182>
     586:	42 e0       	ldi	r20, 0x02	; 2
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	05 c0       	rjmp	.+10     	; 0x596 <APP_CommandsByteReceived+0x182>
     58c:	43 e0       	ldi	r20, 0x03	; 3
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	02 c0       	rjmp	.+4      	; 0x596 <APP_CommandsByteReceived+0x182>
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	50 e0       	ldi	r21, 0x00	; 0
      {
        appCmdPendingTable[i].addr = addr;
     596:	69 e0       	ldi	r22, 0x09	; 9
     598:	64 9f       	mul	r22, r20
     59a:	90 01       	movw	r18, r0
     59c:	65 9f       	mul	r22, r21
     59e:	30 0d       	add	r19, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	f9 01       	movw	r30, r18
     5a4:	e7 5b       	subi	r30, 0xB7	; 183
     5a6:	fb 4f       	sbci	r31, 0xFB	; 251
     5a8:	91 83       	std	Z+1, r25	; 0x01
     5aa:	80 83       	st	Z, r24
        appCmdPendingTable[i].size = size;
     5ac:	85 e0       	ldi	r24, 0x05	; 5
     5ae:	82 83       	std	Z+2, r24	; 0x02
        appCmdPendingTable[i].ready = false;
     5b0:	13 82       	std	Z+3, r1	; 0x03
        memcpy(&appCmdPendingTable[i].payload, data, size);
     5b2:	d9 01       	movw	r26, r18
     5b4:	a3 5b       	subi	r26, 0xB3	; 179
     5b6:	bb 4f       	sbci	r27, 0xFB	; 251
     5b8:	fe 01       	movw	r30, r28
     5ba:	31 96       	adiw	r30, 0x01	; 1
     5bc:	01 90       	ld	r0, Z+
     5be:	0d 92       	st	X+, r0
     5c0:	8a 95       	dec	r24
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <APP_CommandsByteReceived+0x1a8>
     5c4:	19 c0       	rjmp	.+50     	; 0x5f8 <APP_CommandsByteReceived+0x1e4>
  }

  else
  {
    // Entry 0 in the table is reserved for non-sleeping devices
    if (APP_CMD_INVALID_ADDR == appCmdPendingTable[0].addr)
     5c6:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <appCmdPendingTable>
     5ca:	30 91 4a 04 	lds	r19, 0x044A	; 0x80044a <appCmdPendingTable+0x1>
     5ce:	2f 3f       	cpi	r18, 0xFF	; 255
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	91 f4       	brne	.+36     	; 0x5f8 <APP_CommandsByteReceived+0x1e4>
    {
      appCmdPendingTable[0].addr = addr;
     5d4:	e9 e4       	ldi	r30, 0x49	; 73
     5d6:	f4 e0       	ldi	r31, 0x04	; 4
     5d8:	91 83       	std	Z+1, r25	; 0x01
     5da:	80 83       	st	Z, r24
      appCmdPendingTable[0].size = size;
     5dc:	85 e0       	ldi	r24, 0x05	; 5
     5de:	82 83       	std	Z+2, r24	; 0x02
      appCmdPendingTable[0].ready = true;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	83 83       	std	Z+3, r24	; 0x03
      memcpy(&appCmdPendingTable[0].payload, data, size);
     5e4:	85 e0       	ldi	r24, 0x05	; 5
     5e6:	fe 01       	movw	r30, r28
     5e8:	31 96       	adiw	r30, 0x01	; 1
     5ea:	ad e4       	ldi	r26, 0x4D	; 77
     5ec:	b4 e0       	ldi	r27, 0x04	; 4
     5ee:	01 90       	ld	r0, Z+
     5f0:	0d 92       	st	X+, r0
     5f2:	8a 95       	dec	r24
      appCmdCheckPendingTable();
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <APP_CommandsByteReceived+0x1da>
     5f6:	54 de       	rcall	.-856    	; 0x2a0 <appCmdCheckPendingTable>
    case APP_CMD_UART_STATE_CSUM:
    {
      if (byte == appCmdUartCsum)
        appCmdUartProcess(appCmdUartBuf, appCmdUartPtr);

      appCmdUartState = APP_CMD_UART_STATE_IDLE;
     5f8:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <appCmdUartState>
    } break;

    default:
      break;
  }
}
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <led_set>:
 * @param   led_mode mode which should be set (LED_ON, LED_OFF, LED_TOGGLE)
 *
 */
void led_set(led_number_t led_nr, led_mode_t led_mode)
{  
   switch (led_mode)
     610:	61 30       	cpi	r22, 0x01	; 1
     612:	99 f0       	breq	.+38     	; 0x63a <led_set+0x2a>
     614:	18 f0       	brcs	.+6      	; 0x61c <led_set+0xc>
     616:	62 30       	cpi	r22, 0x02	; 2
     618:	f1 f0       	breq	.+60     	; 0x656 <led_set+0x46>
     61a:	41 c0       	rjmp	.+130    	; 0x69e <led_set+0x8e>
   {
   case LED_ON:
      status_led &= ~_BV(led_nr);
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	08 2e       	mov	r0, r24
     622:	02 c0       	rjmp	.+4      	; 0x628 <led_set+0x18>
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	0a 94       	dec	r0
     62a:	e2 f7       	brpl	.-8      	; 0x624 <led_set+0x14>
     62c:	20 95       	com	r18
     62e:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <status_led>
     632:	29 23       	and	r18, r25
     634:	20 93 a3 04 	sts	0x04A3, r18	; 0x8004a3 <status_led>
      break;
     638:	32 c0       	rjmp	.+100    	; 0x69e <led_set+0x8e>
   case LED_OFF:
      status_led |= _BV(led_nr);
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	08 2e       	mov	r0, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <led_set+0x36>
     642:	22 0f       	add	r18, r18
     644:	33 1f       	adc	r19, r19
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <led_set+0x32>
     64a:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <status_led>
     64e:	29 2b       	or	r18, r25
     650:	20 93 a3 04 	sts	0x04A3, r18	; 0x8004a3 <status_led>
      break;
     654:	24 c0       	rjmp	.+72     	; 0x69e <led_set+0x8e>
   case LED_TOGGLE:
      if(status_led & _BV(led_nr))
     656:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <status_led>
     65a:	29 2f       	mov	r18, r25
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	08 2e       	mov	r0, r24
     660:	02 c0       	rjmp	.+4      	; 0x666 <led_set+0x56>
     662:	35 95       	asr	r19
     664:	27 95       	ror	r18
     666:	0a 94       	dec	r0
     668:	e2 f7       	brpl	.-8      	; 0x662 <led_set+0x52>
     66a:	20 ff       	sbrs	r18, 0
     66c:	0d c0       	rjmp	.+26     	; 0x688 <led_set+0x78>
          status_led &= ~_BV(led_nr);
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	08 2e       	mov	r0, r24
     674:	02 c0       	rjmp	.+4      	; 0x67a <led_set+0x6a>
     676:	22 0f       	add	r18, r18
     678:	33 1f       	adc	r19, r19
     67a:	0a 94       	dec	r0
     67c:	e2 f7       	brpl	.-8      	; 0x676 <led_set+0x66>
     67e:	20 95       	com	r18
     680:	92 23       	and	r25, r18
     682:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <status_led>
     686:	0b c0       	rjmp	.+22     	; 0x69e <led_set+0x8e>
      else
          status_led |= _BV(led_nr);
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	08 2e       	mov	r0, r24
     68e:	02 c0       	rjmp	.+4      	; 0x694 <led_set+0x84>
     690:	22 0f       	add	r18, r18
     692:	33 1f       	adc	r19, r19
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <led_set+0x80>
     698:	92 2b       	or	r25, r18
     69a:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <status_led>
   write_io_byte(status_led);

#endif //(PLATFORM == SENS_TERM_BOARD)

#if (PLATFORM == DE_RF_NODE)
   switch (led_nr)
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	69 f0       	breq	.+26     	; 0x6bc <led_set+0xac>
     6a2:	18 f0       	brcs	.+6      	; 0x6aa <led_set+0x9a>
     6a4:	82 30       	cpi	r24, 0x02	; 2
     6a6:	99 f0       	breq	.+38     	; 0x6ce <led_set+0xbe>
     6a8:	08 95       	ret
   {
   case LED_0:
      if(status_led & _BV(LED_0)) {LED_0_PORT |= _BV(LED_0_PIN);} else{LED_0_PORT &= ~_BV(LED_0_PIN);}
     6aa:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <status_led>
     6ae:	80 ff       	sbrs	r24, 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <led_set+0xa6>
     6b2:	a5 9a       	sbi	0x14, 5	; 20
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <led_set+0xa8>
     6b6:	a5 98       	cbi	0x14, 5	; 20
      LED_0_DDR  |=  _BV(LED_0_PIN);
     6b8:	9d 9a       	sbi	0x13, 5	; 19
      break;
     6ba:	08 95       	ret
   case LED_1:
      if(status_led & _BV(LED_1)) {LED_1_PORT |= _BV(LED_1_PIN);} else{LED_1_PORT &= ~_BV(LED_1_PIN);}
     6bc:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <status_led>
     6c0:	81 ff       	sbrs	r24, 1
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <led_set+0xb8>
     6c4:	73 9a       	sbi	0x0e, 3	; 14
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <led_set+0xba>
     6c8:	73 98       	cbi	0x0e, 3	; 14
      LED_1_DDR  |=  _BV(LED_1_PIN);
     6ca:	6b 9a       	sbi	0x0d, 3	; 13
      break;
     6cc:	08 95       	ret
   case LED_2:
      if(status_led & _BV(LED_2)) {LED_2_PORT |= _BV(LED_2_PIN);} else{LED_2_PORT &= ~_BV(LED_2_PIN);}
     6ce:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <status_led>
     6d2:	82 ff       	sbrs	r24, 2
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <led_set+0xca>
     6d6:	74 9a       	sbi	0x0e, 4	; 14
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <led_set+0xcc>
     6da:	74 98       	cbi	0x0e, 4	; 14
      LED_2_DDR  |=  _BV(LED_2_PIN);
     6dc:	6c 9a       	sbi	0x0d, 4	; 13
     6de:	08 95       	ret

000006e0 <TMP102_WriteConfigRegister>:

    return TWI_SUCC;

fail:
    return TWI_FAIL;
}
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	c8 2f       	mov	r28, r24
     6e6:	d6 2f       	mov	r29, r22
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	88 e4       	ldi	r24, 0x48	; 72
     6ec:	75 d0       	rcall	.+234    	; 0x7d8 <twi_start>
     6ee:	81 11       	cpse	r24, r1
     6f0:	0f c0       	rjmp	.+30     	; 0x710 <TMP102_WriteConfigRegister+0x30>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	a3 d0       	rcall	.+326    	; 0x83c <twi_write>
     6f6:	81 11       	cpse	r24, r1
     6f8:	0b c0       	rjmp	.+22     	; 0x710 <TMP102_WriteConfigRegister+0x30>
     6fa:	8c 2f       	mov	r24, r28
     6fc:	9f d0       	rcall	.+318    	; 0x83c <twi_write>
     6fe:	81 11       	cpse	r24, r1
     700:	07 c0       	rjmp	.+14     	; 0x710 <TMP102_WriteConfigRegister+0x30>
     702:	8d 2f       	mov	r24, r29
     704:	9b d0       	rcall	.+310    	; 0x83c <twi_write>
     706:	81 11       	cpse	r24, r1
     708:	03 c0       	rjmp	.+6      	; 0x710 <TMP102_WriteConfigRegister+0x30>
     70a:	8f d0       	rcall	.+286    	; 0x82a <twi_stop>
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	02 c0       	rjmp	.+4      	; 0x714 <TMP102_WriteConfigRegister+0x34>
     710:	8c d0       	rcall	.+280    	; 0x82a <twi_stop>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <TWI_MasterInit>:
     71a:	56 9a       	sbi	0x0a, 6	; 10
     71c:	5e 98       	cbi	0x0b, 6	; 11
     71e:	60 ea       	ldi	r22, 0xA0	; 160
     720:	76 e8       	ldi	r23, 0x86	; 134
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	34 c0       	rjmp	.+104    	; 0x790 <twi_init>
     728:	08 95       	ret

0000072a <TMP102_Init>:
     72a:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <tmp102_conv_mode>
     72e:	60 e8       	ldi	r22, 0x80	; 128
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	d6 cf       	rjmp	.-84     	; 0x6e0 <TMP102_WriteConfigRegister>
     734:	08 95       	ret

00000736 <__vector_21>:
 * @brief ISR for BMA150-triggered interrupts. Invokes user defined callbacks
 * if there are any. Remember that depending on the set sensivity (motion
 * duration/-threshold) these interrupts may occur with high frequency!
 */
ISR(TIMER0_COMPA_vect)
{
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	0b b6       	in	r0, 0x3b	; 59
     742:	0f 92       	push	r0
     744:	2f 93       	push	r18
     746:	3f 93       	push	r19
     748:	4f 93       	push	r20
     74a:	5f 93       	push	r21
     74c:	6f 93       	push	r22
     74e:	7f 93       	push	r23
     750:	8f 93       	push	r24
     752:	9f 93       	push	r25
     754:	af 93       	push	r26
     756:	bf 93       	push	r27
     758:	ef 93       	push	r30
     75a:	ff 93       	push	r31
    // if there is an user callback, invoke it
    if(bma150_isr_cb!=NULL)
     75c:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <bma150_isr_cb>
     760:	f0 91 a5 04 	lds	r31, 0x04A5	; 0x8004a5 <bma150_isr_cb+0x1>
     764:	30 97       	sbiw	r30, 0x00	; 0
     766:	09 f0       	breq	.+2      	; 0x76a <__vector_21+0x34>
        bma150_isr_cb();
     768:	09 95       	icall
}
     76a:	ff 91       	pop	r31
     76c:	ef 91       	pop	r30
     76e:	bf 91       	pop	r27
     770:	af 91       	pop	r26
     772:	9f 91       	pop	r25
     774:	8f 91       	pop	r24
     776:	7f 91       	pop	r23
     778:	6f 91       	pop	r22
     77a:	5f 91       	pop	r21
     77c:	4f 91       	pop	r20
     77e:	3f 91       	pop	r19
     780:	2f 91       	pop	r18
     782:	0f 90       	pop	r0
     784:	0b be       	out	0x3b, r0	; 59
     786:	0f 90       	pop	r0
     788:	0f be       	out	0x3f, r0	; 63
     78a:	0f 90       	pop	r0
     78c:	1f 90       	pop	r1
     78e:	18 95       	reti

00000790 <twi_init>:
 *
 * @param   twi_bitrate bit rate from TWI Master interface in Hz
 * @return  1 if bitrate is too high, else 0
 */
uint8_t twi_init(uint32_t twi_bitrate)
{
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
   // reset TWI register set, this is necessary for proper initialization
   // after wakeup from sleep mode
   TWCR = TWSR = TWDR = TWAR = TWAMR = 0;
     794:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>
     798:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     79c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7a4:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

   TWBR = (((F_CPU / twi_bitrate) - 16) / 2);
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	72 e1       	ldi	r23, 0x12	; 18
     7ac:	8a e7       	ldi	r24, 0x7A	; 122
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__udivmodsi4>
     7b4:	da 01       	movw	r26, r20
     7b6:	c9 01       	movw	r24, r18
     7b8:	40 97       	sbiw	r24, 0x10	; 16
     7ba:	a1 09       	sbc	r26, r1
     7bc:	b1 09       	sbc	r27, r1
     7be:	b6 95       	lsr	r27
     7c0:	a7 95       	ror	r26
     7c2:	97 95       	ror	r25
     7c4:	87 95       	ror	r24
     7c6:	e8 eb       	ldi	r30, 0xB8	; 184
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 83       	st	Z, r24
   if (TWBR < 11) return 1;
     7cc:	90 81       	ld	r25, Z
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	9b 30       	cpi	r25, 0x0B	; 11
     7d2:	08 f0       	brcs	.+2      	; 0x7d6 <twi_init+0x46>
     7d4:	80 e0       	ldi	r24, 0x00	; 0

   return 0;
}
     7d6:	08 95       	ret

000007d8 <twi_start>:
uint8_t twi_start(uint8_t address, uint8_t mode)
{
   uint8_t     status;

   /* Send START condition */
   TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     7d8:	94 ea       	ldi	r25, 0xA4	; 164
     7da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

   /* Wait for TWINT Flag set. This indicates that the START condition has been transmitted. */
   while (!(TWCR & (1 << TWINT)));
     7de:	ec eb       	ldi	r30, 0xBC	; 188
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	90 81       	ld	r25, Z
     7e4:	99 23       	and	r25, r25
     7e6:	ec f7       	brge	.-6      	; 0x7e2 <twi_start+0xa>

   /* Check value of TWI Status Register. Mask prescaler bits. */
   status = TWSR & 0xF8;
     7e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7ec:	98 7f       	andi	r25, 0xF8	; 248
   if ((status != TWI_START) && (status != TWI_REP_START)) return 1;
     7ee:	98 30       	cpi	r25, 0x08	; 8
     7f0:	11 f0       	breq	.+4      	; 0x7f6 <twi_start+0x1e>
     7f2:	90 31       	cpi	r25, 0x10	; 16
     7f4:	b1 f4       	brne	.+44     	; 0x822 <twi_start+0x4a>

   /* Send device address */
   TWDR = (address << 1) + mode;
     7f6:	88 0f       	add	r24, r24
     7f8:	68 0f       	add	r22, r24
     7fa:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
   TWCR = (1 << TWINT) | (1 << TWEN);
     7fe:	84 e8       	ldi	r24, 0x84	; 132
     800:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

   /* Wait until transmission completed and ACK/NACK has been received */
   while (!(TWCR & (1 << TWINT)));
     804:	ec eb       	ldi	r30, 0xBC	; 188
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	88 23       	and	r24, r24
     80c:	ec f7       	brge	.-6      	; 0x808 <twi_start+0x30>

   /* Check value of TWI Status Register. Mask prescaler bits. */
   status = TWSR & 0xF8;
     80e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     812:	98 7f       	andi	r25, 0xF8	; 248
   if ((status != TWI_MT_SLA_ACK) && (status != TWI_MR_SLA_ACK)) return 1;
     814:	98 31       	cpi	r25, 0x18	; 24
     816:	39 f0       	breq	.+14     	; 0x826 <twi_start+0x4e>
   /* Wait for TWINT Flag set. This indicates that the START condition has been transmitted. */
   while (!(TWCR & (1 << TWINT)));

   /* Check value of TWI Status Register. Mask prescaler bits. */
   status = TWSR & 0xF8;
   if ((status != TWI_START) && (status != TWI_REP_START)) return 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 34       	cpi	r25, 0x40	; 64
     81c:	29 f4       	brne	.+10     	; 0x828 <twi_start+0x50>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	08 95       	ret
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	08 95       	ret

   /* Check value of TWI Status Register. Mask prescaler bits. */
   status = TWSR & 0xF8;
   if ((status != TWI_MT_SLA_ACK) && (status != TWI_MR_SLA_ACK)) return 1;

   return 0;
     826:	80 e0       	ldi	r24, 0x00	; 0
}
     828:	08 95       	ret

0000082a <twi_stop>:
 * @brief Stop TWI interface connection.
 */
void twi_stop(void)
{
   /* Send stop condition */
   TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     82a:	84 e9       	ldi	r24, 0x94	; 148
     82c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

   /* Wait until stop condition is executed and bus released */
   while (TWCR & (1 << TWINT));
     830:	ec eb       	ldi	r30, 0xBC	; 188
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	88 23       	and	r24, r24
     838:	ec f3       	brlt	.-6      	; 0x834 <twi_stop+0xa>
}
     83a:	08 95       	ret

0000083c <twi_write>:
uint8_t twi_write(uint8_t byte)
{
   uint8_t   twst;

   /* send data to the previously addressed device */
   TWDR = byte;
     83c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
   TWCR = (1 << TWINT) | (1 << TWEN);
     840:	84 e8       	ldi	r24, 0x84	; 132
     842:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

   /* Wait until transmission completed */
   while (!(TWCR & (1 << TWINT)));
     846:	ec eb       	ldi	r30, 0xBC	; 188
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	88 23       	and	r24, r24
     84e:	ec f7       	brge	.-6      	; 0x84a <twi_write+0xe>

   /* Check value of TWI Status Register. Mask prescaler bits */
   twst = TWSR & 0xF8;
     850:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     854:	98 7f       	andi	r25, 0xF8	; 248
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	98 32       	cpi	r25, 0x28	; 40
     85a:	09 f4       	brne	.+2      	; 0x85e <twi_write+0x22>
     85c:	80 e0       	ldi	r24, 0x00	; 0
   if (twst != TWI_MT_DATA_ACK) return 1;

   return 0;
}
     85e:	08 95       	ret

00000860 <usb_init>:

   return (!(USB_RXF_PINS & _BV(USB_RXF_PIN))) ? 1 : 0;

#endif // (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)
   return 0;
}
     860:	25 98       	cbi	0x04, 5	; 4
     862:	2d 9a       	sbi	0x05, 5	; 5
     864:	6a 98       	cbi	0x0d, 2	; 13
     866:	72 9a       	sbi	0x0e, 2	; 14
     868:	08 95       	ret

0000086a <read_usb_byte>:
#elif (PLATFORM == DE_RF_NODE)

   uint8_t data = 0;

   /* set Data Directions to input */
   USB_D0_DDR &= ~_BV(USB_D0_PIN);
     86a:	20 98       	cbi	0x04, 0	; 4
   USB_D1_DDR &= ~_BV(USB_D1_PIN);
     86c:	82 98       	cbi	0x10, 2	; 16
   USB_D2_DDR &= ~_BV(USB_D2_PIN);
     86e:	55 98       	cbi	0x0a, 5	; 10
   USB_D3_DDR &= ~_BV(USB_D3_PIN);
     870:	9a 98       	cbi	0x13, 2	; 19
   USB_D4_DDR &= ~_BV(USB_D4_PIN);
     872:	6e 98       	cbi	0x0d, 6	; 13
   USB_D5_DDR &= ~_BV(USB_D5_PIN);
     874:	24 98       	cbi	0x04, 4	; 4
   USB_D6_DDR &= ~_BV(USB_D6_PIN);
     876:	6f 98       	cbi	0x0d, 7	; 13
   USB_D7_DDR &= ~_BV(USB_D7_PIN);
     878:	26 98       	cbi	0x04, 6	; 4

   /*
    * RD and WR are low active
    */
   /* make sure WR pin is high, to enable correct latch direction */
   USB_WR_PORT |= _BV(USB_WR_PIN);
     87a:	5b 9a       	sbi	0x0b, 3	; 11
   USB_WR_DDR  |= _BV(USB_WR_PIN);
     87c:	53 9a       	sbi	0x0a, 3	; 10

   /* set RD pin active -> low */
   USB_RD_PORT &= ~_BV(USB_RD_PIN);
     87e:	5a 98       	cbi	0x0b, 2	; 11
   USB_RD_DDR  |=  _BV(USB_RD_PIN);
     880:	52 9a       	sbi	0x0a, 2	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     882:	8d e0       	ldi	r24, 0x0D	; 13
     884:	8a 95       	dec	r24
     886:	f1 f7       	brne	.-4      	; 0x884 <read_usb_byte+0x1a>
     888:	00 00       	nop

   /* give chip a chance to put out the data */
   _delay_us(5);

   /* read data */
   if(USB_D0_PINS & _BV(USB_D0_PIN)){ data |= _BV(USB_D0_BIT);} else{ data &= ~_BV(USB_D0_BIT);}
     88a:	83 b1       	in	r24, 0x03	; 3
     88c:	81 70       	andi	r24, 0x01	; 1
   if(USB_D1_PINS & _BV(USB_D1_PIN)){ data |= _BV(USB_D1_BIT);} else{ data &= ~_BV(USB_D1_BIT);}
     88e:	7a 9b       	sbis	0x0f, 2	; 15
     890:	02 c0       	rjmp	.+4      	; 0x896 <read_usb_byte+0x2c>
     892:	82 60       	ori	r24, 0x02	; 2
     894:	01 c0       	rjmp	.+2      	; 0x898 <read_usb_byte+0x2e>
     896:	8d 7f       	andi	r24, 0xFD	; 253
   if(USB_D2_PINS & _BV(USB_D2_PIN)){ data |= _BV(USB_D2_BIT);} else{ data &= ~_BV(USB_D2_BIT);}
     898:	4d 9b       	sbis	0x09, 5	; 9
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <read_usb_byte+0x36>
     89c:	84 60       	ori	r24, 0x04	; 4
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <read_usb_byte+0x38>
     8a0:	8b 7f       	andi	r24, 0xFB	; 251
   if(USB_D3_PINS & _BV(USB_D3_PIN)){ data |= _BV(USB_D3_BIT);} else{ data &= ~_BV(USB_D3_BIT);}
     8a2:	92 9b       	sbis	0x12, 2	; 18
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <read_usb_byte+0x40>
     8a6:	88 60       	ori	r24, 0x08	; 8
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <read_usb_byte+0x42>
     8aa:	87 7f       	andi	r24, 0xF7	; 247
   if(USB_D4_PINS & _BV(USB_D4_PIN)){ data |= _BV(USB_D4_BIT);} else{ data &= ~_BV(USB_D4_BIT);}
     8ac:	66 9b       	sbis	0x0c, 6	; 12
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <read_usb_byte+0x4a>
     8b0:	80 61       	ori	r24, 0x10	; 16
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <read_usb_byte+0x4c>
     8b4:	8f 7e       	andi	r24, 0xEF	; 239
   if(USB_D5_PINS & _BV(USB_D5_PIN)){ data |= _BV(USB_D5_BIT);} else{ data &= ~_BV(USB_D5_BIT);}
     8b6:	1c 9b       	sbis	0x03, 4	; 3
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <read_usb_byte+0x54>
     8ba:	80 62       	ori	r24, 0x20	; 32
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <read_usb_byte+0x56>
     8be:	8f 7d       	andi	r24, 0xDF	; 223
   if(USB_D6_PINS & _BV(USB_D6_PIN)){ data |= _BV(USB_D6_BIT);} else{ data &= ~_BV(USB_D6_BIT);}
     8c0:	67 9b       	sbis	0x0c, 7	; 12
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <read_usb_byte+0x5e>
     8c4:	80 64       	ori	r24, 0x40	; 64
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <read_usb_byte+0x60>
     8c8:	8f 7b       	andi	r24, 0xBF	; 191
   if(USB_D7_PINS & _BV(USB_D7_PIN)){ data |= _BV(USB_D7_BIT);} else{ data &= ~_BV(USB_D7_BIT);}
     8ca:	1e 9b       	sbis	0x03, 6	; 3
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <read_usb_byte+0x68>
     8ce:	80 68       	ori	r24, 0x80	; 128
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <read_usb_byte+0x6a>
     8d2:	8f 77       	andi	r24, 0x7F	; 127

   /* set RD pin inactive -> high */
   USB_RD_PORT |= _BV(USB_RD_PIN);
     8d4:	5a 9a       	sbi	0x0b, 2	; 11
   return data;

#endif // defined (PLATFORM == SENS_TERM_BOARD)

   return 0;
}
     8d6:	08 95       	ret

000008d8 <usb_getc_std>:
int usb_getc_std(FILE* dummy_file)
{
#if (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)

   /* wait until new char received */
   while (USB_RXF_PINS & _BV(USB_RXF_PIN)){;}
     8d8:	62 99       	sbic	0x0c, 2	; 12
     8da:	fe cf       	rjmp	.-4      	; 0x8d8 <usb_getc_std>
   /* return the data */
   return(read_usb_byte());
     8dc:	c6 df       	rcall	.-116    	; 0x86a <read_usb_byte>

#endif // (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)
   return 0;
}
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	08 95       	ret

000008e2 <write_usb_byte>:
#endif

#elif (PLATFORM == DE_RF_NODE)

   /* set data pins, depending on character */
   if(data & _BV(USB_D0_BIT)){ USB_D0_PORT |= _BV(USB_D0_PIN);} else{ USB_D0_PORT &= ~_BV(USB_D0_PIN);}
     8e2:	80 ff       	sbrs	r24, 0
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <write_usb_byte+0x8>
     8e6:	28 9a       	sbi	0x05, 0	; 5
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <write_usb_byte+0xa>
     8ea:	28 98       	cbi	0x05, 0	; 5
   if(data & _BV(USB_D1_BIT)){ USB_D1_PORT |= _BV(USB_D1_PIN);} else{ USB_D1_PORT &= ~_BV(USB_D1_PIN);}
     8ec:	81 ff       	sbrs	r24, 1
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <write_usb_byte+0x12>
     8f0:	8a 9a       	sbi	0x11, 2	; 17
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <write_usb_byte+0x14>
     8f4:	8a 98       	cbi	0x11, 2	; 17
   if(data & _BV(USB_D2_BIT)){ USB_D2_PORT |= _BV(USB_D2_PIN);} else{ USB_D2_PORT &= ~_BV(USB_D2_PIN);}
     8f6:	82 ff       	sbrs	r24, 2
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <write_usb_byte+0x1c>
     8fa:	5d 9a       	sbi	0x0b, 5	; 11
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <write_usb_byte+0x1e>
     8fe:	5d 98       	cbi	0x0b, 5	; 11
   if(data & _BV(USB_D3_BIT)){ USB_D3_PORT |= _BV(USB_D3_PIN);} else{ USB_D3_PORT &= ~_BV(USB_D3_PIN);}
     900:	83 ff       	sbrs	r24, 3
     902:	02 c0       	rjmp	.+4      	; 0x908 <write_usb_byte+0x26>
     904:	a2 9a       	sbi	0x14, 2	; 20
     906:	01 c0       	rjmp	.+2      	; 0x90a <write_usb_byte+0x28>
     908:	a2 98       	cbi	0x14, 2	; 20
   if(data & _BV(USB_D4_BIT)){ USB_D4_PORT |= _BV(USB_D4_PIN);} else{ USB_D4_PORT &= ~_BV(USB_D4_PIN);}
     90a:	84 ff       	sbrs	r24, 4
     90c:	02 c0       	rjmp	.+4      	; 0x912 <write_usb_byte+0x30>
     90e:	76 9a       	sbi	0x0e, 6	; 14
     910:	01 c0       	rjmp	.+2      	; 0x914 <write_usb_byte+0x32>
     912:	76 98       	cbi	0x0e, 6	; 14
   if(data & _BV(USB_D5_BIT)){ USB_D5_PORT |= _BV(USB_D5_PIN);} else{ USB_D5_PORT &= ~_BV(USB_D5_PIN);}
     914:	85 ff       	sbrs	r24, 5
     916:	02 c0       	rjmp	.+4      	; 0x91c <write_usb_byte+0x3a>
     918:	2c 9a       	sbi	0x05, 4	; 5
     91a:	01 c0       	rjmp	.+2      	; 0x91e <write_usb_byte+0x3c>
     91c:	2c 98       	cbi	0x05, 4	; 5
   if(data & _BV(USB_D6_BIT)){ USB_D6_PORT |= _BV(USB_D6_PIN);} else{ USB_D6_PORT &= ~_BV(USB_D6_PIN);}
     91e:	86 ff       	sbrs	r24, 6
     920:	02 c0       	rjmp	.+4      	; 0x926 <write_usb_byte+0x44>
     922:	77 9a       	sbi	0x0e, 7	; 14
     924:	01 c0       	rjmp	.+2      	; 0x928 <write_usb_byte+0x46>
     926:	77 98       	cbi	0x0e, 7	; 14
   if(data & _BV(USB_D7_BIT)){ USB_D7_PORT |= _BV(USB_D7_PIN);} else{ USB_D7_PORT &= ~_BV(USB_D7_PIN);}
     928:	88 23       	and	r24, r24
     92a:	14 f4       	brge	.+4      	; 0x930 <write_usb_byte+0x4e>
     92c:	2e 9a       	sbi	0x05, 6	; 5
     92e:	01 c0       	rjmp	.+2      	; 0x932 <write_usb_byte+0x50>
     930:	2e 98       	cbi	0x05, 6	; 5

   /* set Data Directions to output */
   USB_D0_DDR |= _BV(USB_D0_PIN);
     932:	20 9a       	sbi	0x04, 0	; 4
   USB_D1_DDR |= _BV(USB_D1_PIN);
     934:	82 9a       	sbi	0x10, 2	; 16
   USB_D2_DDR |= _BV(USB_D2_PIN);
     936:	55 9a       	sbi	0x0a, 5	; 10
   USB_D3_DDR |= _BV(USB_D3_PIN);
     938:	9a 9a       	sbi	0x13, 2	; 19
   USB_D4_DDR |= _BV(USB_D4_PIN);
     93a:	6e 9a       	sbi	0x0d, 6	; 13
   USB_D5_DDR |= _BV(USB_D5_PIN);
     93c:	24 9a       	sbi	0x04, 4	; 4
   USB_D6_DDR |= _BV(USB_D6_PIN);
     93e:	6f 9a       	sbi	0x0d, 7	; 13
   USB_D7_DDR |= _BV(USB_D7_PIN);
     940:	26 9a       	sbi	0x04, 6	; 4

   /*
    * RD and WR are low active
    */
   /* make sure RD pin is inactive -> high */
   USB_RD_PORT |= _BV(USB_RD_PIN);
     942:	5a 9a       	sbi	0x0b, 2	; 11
   USB_RD_DDR  |= _BV(USB_RD_PIN);
     944:	52 9a       	sbi	0x0a, 2	; 10

   /* set WR pin active -> low */
   USB_WR_PORT &= ~_BV(USB_WR_PIN);
     946:	5b 98       	cbi	0x0b, 3	; 11
   USB_WR_DDR  |=  _BV(USB_WR_PIN);
     948:	53 9a       	sbi	0x0a, 3	; 10

   /* set WR pin inactive -> high */
   USB_WR_PORT |= _BV(USB_WR_PIN);
     94a:	5b 9a       	sbi	0x0b, 3	; 11
     94c:	08 95       	ret

0000094e <usb_putc_std>:
 *
 * @return    char: character written to USB
 *
 */
int usb_putc_std(char c, FILE* dummy_file)
{
     94e:	cf 93       	push	r28
     950:	c8 2f       	mov	r28, r24
#if (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)

   /* Wait for empty transmit buffer */
   while (USB_TXE_PINS & _BV(USB_TXE_PIN)){;}
     952:	1d 99       	sbic	0x03, 5	; 3
     954:	fe cf       	rjmp	.-4      	; 0x952 <usb_putc_std+0x4>
   /* write the byte into the USB FIFO */
   write_usb_byte(c);
     956:	8c 2f       	mov	r24, r28
     958:	c4 df       	rcall	.-120    	; 0x8e2 <write_usb_byte>
   /* return the char */
   return(c);

#endif // (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)
   return 0;
}
     95a:	8c 2f       	mov	r24, r28
     95c:	cc 0f       	add	r28, r28
     95e:	99 0b       	sbc	r25, r25
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <appNetworkStatusTimerHandler>:
void TMP102Sensor_PrintTemperature(TMP102Sensor* sensor) {
    printf("Temperature: %c%d.%02d C\r\n",
        (sensor->temperature.sign ? '-' : '+'),
        sensor->temperature.integralDigit,
        sensor->temperature.fractionalDigit);
}
     964:	94 b3       	in	r25, 0x14	; 20
     966:	80 e2       	ldi	r24, 0x20	; 32
     968:	89 27       	eor	r24, r25
     96a:	84 bb       	out	0x14, r24	; 20
     96c:	08 95       	ret

0000096e <appCommandWaitTimerHandler>:
     96e:	85 e0       	ldi	r24, 0x05	; 5
     970:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
     974:	08 95       	ret

00000976 <appADDR_REQ_Conf>:
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
     97c:	08 95       	ret

0000097e <appADDR_CONF_Conf>:
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
     984:	08 95       	ret

00000986 <appDataSendingTimerHandler>:
     986:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <appState>
     98a:	86 30       	cpi	r24, 0x06	; 6
     98c:	21 f4       	brne	.+8      	; 0x996 <appDataSendingTimerHandler+0x10>
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
     994:	08 95       	ret
     996:	87 eb       	ldi	r24, 0xB7	; 183
     998:	94 e0       	ldi	r25, 0x04	; 4
     99a:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <SYS_TimerStart>
     99e:	08 95       	ret

000009a0 <appAddrInd>:
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24
     9aa:	82 e1       	ldi	r24, 0x12	; 18
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	9f 93       	push	r25
     9b0:	8f 93       	push	r24
     9b2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     9b6:	0f 80       	ldd	r0, Y+7	; 0x07
     9b8:	d8 85       	ldd	r29, Y+8	; 0x08
     9ba:	c0 2d       	mov	r28, r0
     9bc:	88 81       	ld	r24, Y
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	80 32       	cpi	r24, 0x20	; 32
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <appAddrInd+0x28>
     9c6:	4b c0       	rjmp	.+150    	; 0xa5e <appAddrInd+0xbe>
     9c8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ca:	8f 93       	push	r24
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	8f 93       	push	r24
     9d0:	85 e2       	ldi	r24, 0x25	; 37
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     9dc:	e4 ec       	ldi	r30, 0xC4	; 196
     9de:	f4 e0       	ldi	r31, 0x04	; 4
     9e0:	09 81       	ldd	r16, Y+1	; 0x01
     9e2:	1a 81       	ldd	r17, Y+2	; 0x02
     9e4:	02 83       	std	Z+2, r16	; 0x02
     9e6:	13 83       	std	Z+3, r17	; 0x03
     9e8:	14 82       	std	Z+4, r1	; 0x04
     9ea:	15 82       	std	Z+5, r1	; 0x05
     9ec:	16 82       	std	Z+6, r1	; 0x06
     9ee:	17 82       	std	Z+7, r1	; 0x07
     9f0:	10 86       	std	Z+8, r1	; 0x08
     9f2:	11 86       	std	Z+9, r1	; 0x09
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	93 87       	std	Z+11, r25	; 0x0b
     9fa:	82 87       	std	Z+10, r24	; 0x0a
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	87 d5       	rcall	.+2830   	; 0x1510 <NWK_SetAddr>
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	ac ea       	ldi	r26, 0xAC	; 172
     a08:	b4 e0       	ldi	r27, 0x04	; 4
     a0a:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <myNodeID>
     a0e:	30 91 b6 04 	lds	r19, 0x04B6	; 0x8004b6 <myNodeID+0x1>
     a12:	14 96       	adiw	r26, 0x04	; 4
     a14:	3c 93       	st	X, r19
     a16:	2e 93       	st	-X, r18
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	20 e3       	ldi	r18, 0x30	; 48
     a1c:	2c 93       	st	X, r18
     a1e:	12 96       	adiw	r26, 0x02	; 2
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	11 97       	sbiw	r26, 0x01	; 1
     a26:	e5 e2       	ldi	r30, 0x25	; 37
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	16 82       	std	Z+6, r1	; 0x06
     a2c:	15 82       	std	Z+5, r1	; 0x05
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	87 83       	std	Z+7, r24	; 0x07
     a32:	80 87       	std	Z+8, r24	; 0x08
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	81 87       	std	Z+9, r24	; 0x09
     a38:	b3 87       	std	Z+11, r27	; 0x0b
     a3a:	a2 87       	std	Z+10, r26	; 0x0a
     a3c:	85 e0       	ldi	r24, 0x05	; 5
     a3e:	84 87       	std	Z+12, r24	; 0x0c
     a40:	8f eb       	ldi	r24, 0xBF	; 191
     a42:	94 e0       	ldi	r25, 0x04	; 4
     a44:	96 87       	std	Z+14, r25	; 0x0e
     a46:	85 87       	std	Z+13, r24	; 0x0d
     a48:	73 98       	cbi	0x0e, 3	; 14
     a4a:	cf 01       	movw	r24, r30
     a4c:	c3 d5       	rcall	.+2950   	; 0x15d4 <NWK_DataReq>
     a4e:	84 e0       	ldi	r24, 0x04	; 4
     a50:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0c c0       	rjmp	.+24     	; 0xa76 <appAddrInd+0xd6>
     a5e:	1f 92       	push	r1
     a60:	8f 93       	push	r24
     a62:	81 e4       	ldi	r24, 0x41	; 65
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	08 95       	ret

00000a82 <appDataInd>:
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	6c 01       	movw	r12, r24
     a94:	dc 01       	movw	r26, r24
     a96:	17 96       	adiw	r26, 0x07	; 7
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	18 97       	sbiw	r26, 0x08	; 8
     a9e:	9e b1       	in	r25, 0x0e	; 14
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	89 27       	eor	r24, r25
     aa4:	8e b9       	out	0x0e, r24	; 14
     aa6:	1a 96       	adiw	r26, 0x0a	; 10
     aa8:	8c 91       	ld	r24, X
     aaa:	1a 97       	sbiw	r26, 0x0a	; 10
     aac:	81 8f       	std	Z+25, r24	; 0x19
     aae:	1b 96       	adiw	r26, 0x0b	; 11
     ab0:	8c 91       	ld	r24, X
     ab2:	1b 97       	sbiw	r26, 0x0b	; 11
     ab4:	82 8f       	std	Z+26, r24	; 0x1a
     ab6:	17 96       	adiw	r26, 0x07	; 7
     ab8:	cd 91       	ld	r28, X+
     aba:	dc 91       	ld	r29, X
     abc:	18 97       	sbiw	r26, 0x08	; 8
     abe:	8a 85       	ldd	r24, Y+10	; 0x0a
     ac0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ac2:	89 2b       	or	r24, r25
     ac4:	09 f4       	brne	.+2      	; 0xac8 <appDataInd+0x46>
     ac6:	e6 c0       	rjmp	.+460    	; 0xc94 <appDataInd+0x212>
     ac8:	83 e6       	ldi	r24, 0x63	; 99
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	1f 92       	push	r1
     ad8:	8f 93       	push	r24
     ada:	0c e7       	ldi	r16, 0x7C	; 124
     adc:	12 e0       	ldi	r17, 0x02	; 2
     ade:	1f 93       	push	r17
     ae0:	0f 93       	push	r16
     ae2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     ae6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae8:	8f 93       	push	r24
     aea:	8a 85       	ldd	r24, Y+10	; 0x0a
     aec:	8f 93       	push	r24
     aee:	8d e8       	ldi	r24, 0x8D	; 141
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	9f 93       	push	r25
     af4:	8f 93       	push	r24
     af6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     afa:	88 8d       	ldd	r24, Y+24	; 0x18
     afc:	8f 93       	push	r24
     afe:	8f 89       	ldd	r24, Y+23	; 0x17
     b00:	8f 93       	push	r24
     b02:	81 ea       	ldi	r24, 0xA1	; 161
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	9f 93       	push	r25
     b08:	8f 93       	push	r24
     b0a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     b0e:	89 8d       	ldd	r24, Y+25	; 0x19
     b10:	1f 92       	push	r1
     b12:	8f 93       	push	r24
     b14:	86 eb       	ldi	r24, 0xB6	; 182
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	9f 93       	push	r25
     b1a:	8f 93       	push	r24
     b1c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     b20:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b22:	28 2f       	mov	r18, r24
     b24:	08 2e       	mov	r0, r24
     b26:	00 0c       	add	r0, r0
     b28:	33 0b       	sbc	r19, r19
     b2a:	3f 93       	push	r19
     b2c:	8f 93       	push	r24
     b2e:	81 ec       	ldi	r24, 0xC1	; 193
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	1f 92       	push	r1
     b3e:	8f 93       	push	r24
     b40:	1f 93       	push	r17
     b42:	0f 93       	push	r16
     b44:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b4a:	1f 92       	push	r1
     b4c:	8f 93       	push	r24
     b4e:	8d ec       	ldi	r24, 0xCD	; 205
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	9f 93       	push	r25
     b54:	8f 93       	push	r24
     b56:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     b5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b5c:	1f 92       	push	r1
     b5e:	8f 93       	push	r24
     b60:	81 ee       	ldi	r24, 0xE1	; 225
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     b6c:	ed b7       	in	r30, 0x3d	; 61
     b6e:	fe b7       	in	r31, 0x3e	; 62
     b70:	b2 96       	adiw	r30, 0x22	; 34
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	fe bf       	out	0x3e, r31	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	ed bf       	out	0x3d, r30	; 61
     b7c:	88 a1       	ldd	r24, Y+32	; 0x20
     b7e:	8f 93       	push	r24
     b80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b82:	8f 93       	push	r24
     b84:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b86:	8f 93       	push	r24
     b88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b8a:	8f 93       	push	r24
     b8c:	85 ef       	ldi	r24, 0xF5	; 245
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     b98:	8c a1       	ldd	r24, Y+36	; 0x24
     b9a:	8f 93       	push	r24
     b9c:	8b a1       	ldd	r24, Y+35	; 0x23
     b9e:	8f 93       	push	r24
     ba0:	8a a1       	ldd	r24, Y+34	; 0x22
     ba2:	8f 93       	push	r24
     ba4:	89 a1       	ldd	r24, Y+33	; 0x21
     ba6:	8f 93       	push	r24
     ba8:	8c e0       	ldi	r24, 0x0C	; 12
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	9f 93       	push	r25
     bae:	8f 93       	push	r24
     bb0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     bb4:	88 a5       	ldd	r24, Y+40	; 0x28
     bb6:	8f 93       	push	r24
     bb8:	8f a1       	ldd	r24, Y+39	; 0x27
     bba:	8f 93       	push	r24
     bbc:	8e a1       	ldd	r24, Y+38	; 0x26
     bbe:	8f 93       	push	r24
     bc0:	8d a1       	ldd	r24, Y+37	; 0x25
     bc2:	8f 93       	push	r24
     bc4:	80 e2       	ldi	r24, 0x20	; 32
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	9f 93       	push	r25
     bca:	8f 93       	push	r24
     bcc:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     bd0:	8c a5       	ldd	r24, Y+44	; 0x2c
     bd2:	8f 93       	push	r24
     bd4:	8b a5       	ldd	r24, Y+43	; 0x2b
     bd6:	8f 93       	push	r24
     bd8:	8a a5       	ldd	r24, Y+42	; 0x2a
     bda:	8f 93       	push	r24
     bdc:	89 a5       	ldd	r24, Y+41	; 0x29
     bde:	8f 93       	push	r24
     be0:	85 e3       	ldi	r24, 0x35	; 53
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     bec:	88 a9       	ldd	r24, Y+48	; 0x30
     bee:	8f 93       	push	r24
     bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
     bf2:	8f 93       	push	r24
     bf4:	8e a5       	ldd	r24, Y+46	; 0x2e
     bf6:	8f 93       	push	r24
     bf8:	8d a5       	ldd	r24, Y+45	; 0x2d
     bfa:	8f 93       	push	r24
     bfc:	8d e4       	ldi	r24, 0x4D	; 77
     bfe:	93 e0       	ldi	r25, 0x03	; 3
     c00:	9f 93       	push	r25
     c02:	8f 93       	push	r24
     c04:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     c08:	89 a9       	ldd	r24, Y+49	; 0x31
     c0a:	1f 92       	push	r1
     c0c:	8f 93       	push	r24
     c0e:	83 e6       	ldi	r24, 0x63	; 99
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     c1a:	8d b7       	in	r24, 0x3d	; 61
     c1c:	9e b7       	in	r25, 0x3e	; 62
     c1e:	82 96       	adiw	r24, 0x22	; 34
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	9e bf       	out	0x3e, r25	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	8d bf       	out	0x3d, r24	; 61
     c2a:	8a a9       	ldd	r24, Y+50	; 0x32
     c2c:	1f 92       	push	r1
     c2e:	8f 93       	push	r24
     c30:	87 e7       	ldi	r24, 0x77	; 119
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     c3c:	8b e8       	ldi	r24, 0x8B	; 139
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     c48:	8a a9       	ldd	r24, Y+50	; 0x32
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	88 23       	and	r24, r24
     c58:	a9 f0       	breq	.+42     	; 0xc84 <appDataInd+0x202>
     c5a:	7e 01       	movw	r14, r28
     c5c:	93 e3       	ldi	r25, 0x33	; 51
     c5e:	e9 0e       	add	r14, r25
     c60:	f1 1c       	adc	r15, r1
     c62:	00 e0       	ldi	r16, 0x00	; 0
     c64:	10 e0       	ldi	r17, 0x00	; 0
     c66:	d7 01       	movw	r26, r14
     c68:	8d 91       	ld	r24, X+
     c6a:	7d 01       	movw	r14, r26
     c6c:	08 2e       	mov	r0, r24
     c6e:	00 0c       	add	r0, r0
     c70:	99 0b       	sbc	r25, r25
     c72:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <putchar>
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	8a a9       	ldd	r24, Y+50	; 0x32
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	08 17       	cp	r16, r24
     c80:	19 07       	cpc	r17, r25
     c82:	8c f3       	brlt	.-30     	; 0xc66 <appDataInd+0x1e4>
     c84:	83 eb       	ldi	r24, 0xB3	; 179
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	f6 01       	movw	r30, r12
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	82 db       	rcall	.-2300   	; 0x3a0 <APP_CommandsPending>
     c9c:	88 23       	and	r24, r24
     c9e:	11 f0       	breq	.+4      	; 0xca4 <appDataInd+0x222>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	f6 d7       	rcall	.+4076   	; 0x1c90 <NWK_SetAckControl>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	cf 90       	pop	r12
     cb6:	08 95       	ret

00000cb8 <appDataConf>:
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	ec 01       	movw	r28, r24
     cbe:	73 9a       	sbi	0x0e, 3	; 14
     cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc2:	81 11       	cpse	r24, r1
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <appDataConf+0x28>
     cc6:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <appNetworkStatus>
     cca:	81 11       	cpse	r24, r1
     ccc:	14 c0       	rjmp	.+40     	; 0xcf6 <appDataConf+0x3e>
     cce:	a5 98       	cbi	0x14, 5	; 20
     cd0:	88 e1       	ldi	r24, 0x18	; 24
     cd2:	95 e0       	ldi	r25, 0x05	; 5
     cd4:	0e 94 0d 14 	call	0x281a	; 0x281a <SYS_TimerStop>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <appNetworkStatus>
     cde:	0b c0       	rjmp	.+22     	; 0xcf6 <appDataConf+0x3e>
     ce0:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <appNetworkStatus>
     ce4:	88 23       	and	r24, r24
     ce6:	39 f0       	breq	.+14     	; 0xcf6 <appDataConf+0x3e>
     ce8:	a5 9a       	sbi	0x14, 5	; 20
     cea:	88 e1       	ldi	r24, 0x18	; 24
     cec:	95 e0       	ldi	r25, 0x05	; 5
     cee:	0e 94 64 14 	call	0x28c8	; 0x28c8 <SYS_TimerStart>
     cf2:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <appNetworkStatus>
     cf6:	88 89       	ldd	r24, Y+16	; 0x10
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	41 f4       	brne	.+16     	; 0xd0c <appDataConf+0x54>
     cfc:	8b e0       	ldi	r24, 0x0B	; 11
     cfe:	95 e0       	ldi	r25, 0x05	; 5
     d00:	0e 94 64 14 	call	0x28c8	; 0x28c8 <SYS_TimerStart>
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
     d0a:	07 c0       	rjmp	.+14     	; 0xd1a <appDataConf+0x62>
     d0c:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <appState>
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	19 f0       	breq	.+6      	; 0xd1a <appDataConf+0x62>
     d14:	85 e0       	ldi	r24, 0x05	; 5
     d16:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <HAL_UartBytesReceived>:
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	49 f0       	breq	.+18     	; 0xd3e <HAL_UartBytesReceived+0x1e>
     d2c:	8c 01       	movw	r16, r24
     d2e:	c0 e0       	ldi	r28, 0x00	; 0
     d30:	d0 e0       	ldi	r29, 0x00	; 0
     d32:	fb d2       	rcall	.+1526   	; 0x132a <HAL_UartReadByte>
     d34:	6f db       	rcall	.-2338   	; 0x414 <APP_CommandsByteReceived>
     d36:	21 96       	adiw	r28, 0x01	; 1
     d38:	0c 17       	cp	r16, r28
     d3a:	1d 07       	cpc	r17, r29
     d3c:	d1 f7       	brne	.-12     	; 0xd32 <HAL_UartBytesReceived+0x12>
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <TMP102Sensor_Init>:
     d48:	e8 dc       	rcall	.-1584   	; 0x71a <TWI_MasterInit>
     d4a:	88 23       	and	r24, r24
     d4c:	31 f0       	breq	.+12     	; 0xd5a <TMP102Sensor_Init+0x12>
     d4e:	89 e9       	ldi	r24, 0x99	; 153
     d50:	93 e0       	ldi	r25, 0x03	; 3
     d52:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <puts>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	08 95       	ret
     d5a:	e7 dc       	rcall	.-1586   	; 0x72a <TMP102_Init>
     d5c:	88 23       	and	r24, r24
     d5e:	31 f0       	breq	.+12     	; 0xd6c <TMP102Sensor_Init+0x24>
     d60:	84 eb       	ldi	r24, 0xB4	; 180
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <puts>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	08 95       	ret
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	08 95       	ret

00000d70 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{	
     d70:	2f 92       	push	r2
     d72:	3f 92       	push	r3
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	00 d0       	rcall	.+0      	; 0xd94 <main+0x24>
     d94:	00 d0       	rcall	.+0      	; 0xd96 <main+0x26>
     d96:	1f 92       	push	r1
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	char out_str[30];
	uint16_t adc_result;
  SYS_Init();
     d9c:	0e 94 98 13 	call	0x2730	; 0x2730 <SYS_Init>
  usb_init();
     da0:	5f dd       	rcall	.-1346   	; 0x860 <usb_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     da2:	2f ef       	ldi	r18, 0xFF	; 255
     da4:	84 e3       	ldi	r24, 0x34	; 52
     da6:	9c e0       	ldi	r25, 0x0C	; 12
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <main+0x38>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <main+0x42>
     db2:	00 00       	nop
  _delay_ms(500);
  stdout = &usb_stream;
     db4:	e7 e3       	ldi	r30, 0x37	; 55
     db6:	ff e0       	ldi	r31, 0x0F	; 15
     db8:	84 e0       	ldi	r24, 0x04	; 4
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	93 83       	std	Z+3, r25	; 0x03
     dbe:	82 83       	std	Z+2, r24	; 0x02
  stdin  = &usb_stream;
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
     dc4:	af ef       	ldi	r26, 0xFF	; 255
     dc6:	b4 e3       	ldi	r27, 0x34	; 52
     dc8:	ec e0       	ldi	r30, 0x0C	; 12
     dca:	a1 50       	subi	r26, 0x01	; 1
     dcc:	b0 40       	sbci	r27, 0x00	; 0
     dce:	e0 40       	sbci	r30, 0x00	; 0
     dd0:	e1 f7       	brne	.-8      	; 0xdca <main+0x5a>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <main+0x64>
     dd4:	00 00       	nop
  _delay_ms(500);
  led_set(0, LED_ON);
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	1a dc       	rcall	.-1996   	; 0x610 <led_set>
     ddc:	ff ef       	ldi	r31, 0xFF	; 255
     dde:	29 e6       	ldi	r18, 0x69	; 105
     de0:	88 e1       	ldi	r24, 0x18	; 24
     de2:	f1 50       	subi	r31, 0x01	; 1
     de4:	20 40       	sbci	r18, 0x00	; 0
     de6:	80 40       	sbci	r24, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <main+0x72>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <main+0x7c>
     dec:	00 00       	nop
  _delay_ms(1000);
  
  
  
  
  ADC_Init(6, 1);
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	86 e0       	ldi	r24, 0x06	; 6
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	be d9       	rcall	.-3204   	; 0x174 <ADC_Init>
  
    TMP102Sensor sensor;

    if (!TMP102Sensor_Init(&sensor)) {
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	a5 df       	rcall	.-182    	; 0xd48 <TMP102Sensor_Init>
     dfe:	88 23       	and	r24, r24
     e00:	09 f4       	brne	.+2      	; 0xe04 <main+0x94>
     e02:	ab c1       	rjmp	.+854    	; 0x115a <__EEPROM_REGION_LENGTH__+0x15a>
     e04:	0f 2e       	mov	r0, r31
	
}
static void appAddrRequest(uint16_t node_id)
{
	static AppAddress_t msg;
	msg.node_ID=node_id;
     e06:	f7 ea       	ldi	r31, 0xA7	; 167
     e08:	cf 2e       	mov	r12, r31
     e0a:	f4 e0       	ldi	r31, 0x04	; 4
     e0c:	df 2e       	mov	r13, r31
     e0e:	f0 2d       	mov	r31, r0
     e10:	0f 2e       	mov	r0, r31
	msg.msg_ID=ADDR_REQUEST_MSG;
	msg.node_address=APP_ADDR;
     e12:	f5 e0       	ldi	r31, 0x05	; 5
     e14:	af 2e       	mov	r10, r31
     e16:	f0 e7       	ldi	r31, 0x70	; 112
     e18:	bf 2e       	mov	r11, r31
     e1a:	f0 2d       	mov	r31, r0
     e1c:	0f 2e       	mov	r0, r31
	
	
	appNwkDataReq.dstAddr = 0x0000;
     e1e:	f5 e2       	ldi	r31, 0x25	; 37
     e20:	ef 2e       	mov	r14, r31
     e22:	f5 e0       	ldi	r31, 0x05	; 5
     e24:	ff 2e       	mov	r15, r31
     e26:	f0 2d       	mov	r31, r0
     e28:	0f 2e       	mov	r0, r31
	
	case APP_STATE_ADDR_REQUEST:
	{
	   myNodeID = rand() & 0xffff;
	   appAddrRequest(myNodeID);
	   printf("ADDR_req, nodeID=%x \n\r",myNodeID);
     e2a:	fe e1       	ldi	r31, 0x1E	; 30
     e2c:	2f 2e       	mov	r2, r31
     e2e:	f4 e0       	ldi	r31, 0x04	; 4
     e30:	3f 2e       	mov	r3, r31
     e32:	f0 2d       	mov	r31, r0
     e34:	04 ec       	ldi	r16, 0xC4	; 196
// PREPARING THE DATAFRAME TO SEND
//
static void appSendData(void)
{
#ifdef NWK_ENABLE_ROUTING
  appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
     e36:	14 e0       	ldi	r17, 0x04	; 4
     e38:	0f 2e       	mov	r0, r31
#endif

  appMsg.sensors.battery     = rand() & 0xffff;
  ADC_Init(4,2);
  appMsg.sensors.temperature = ADC_readTemp();
  appMsg.sensors.moist       = 69;//ADC_get(3);
     e3a:	f5 e4       	ldi	r31, 0x45	; 69
     e3c:	4f 2e       	mov	r4, r31
     e3e:	51 2c       	mov	r5, r1
     e40:	61 2c       	mov	r6, r1
     e42:	71 2c       	mov	r7, r1
     e44:	f0 2d       	mov	r31, r0
	    return -1;
    }

while (1)
{
	SYS_TaskHandler();
     e46:	0e 94 9f 13 	call	0x273e	; 0x273e <SYS_TaskHandler>
	HAL_UartTaskHandler();
     e4a:	08 d3       	rcall	.+1552   	; 0x145c <HAL_UartTaskHandler>
     e4c:	e0 91 36 05 	lds	r30, 0x0536	; 0x800536 <appState>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
  switch (appState)
     e50:	8e 2f       	mov	r24, r30
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	8b 30       	cpi	r24, 0x0B	; 11
     e56:	91 05       	cpc	r25, r1
     e58:	b0 f7       	brcc	.-20     	; 0xe46 <main+0xd6>
     e5a:	fc 01       	movw	r30, r24
     e5c:	e0 57       	subi	r30, 0x70	; 112
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__tablejump2__>
     e64:	99 24       	eor	r9, r9

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
     e66:	93 94       	inc	r9
     e68:	d8 01       	movw	r26, r16
     e6a:	9c 92       	st	X, r9
     e6c:	11 96       	adiw	r26, 0x01	; 1
  appMsg.nodeType             = APP_NODE_TYPE;
     e6e:	9c 92       	st	X, r9
     e70:	11 97       	sbiw	r26, 0x01	; 1
     e72:	85 e0       	ldi	r24, 0x05	; 5
  appMsg.extAddr              = APP_ADDR;
     e74:	12 96       	adiw	r26, 0x02	; 2
     e76:	8c 93       	st	X, r24
     e78:	12 97       	sbiw	r26, 0x02	; 2
     e7a:	80 e7       	ldi	r24, 0x70	; 112
     e7c:	13 96       	adiw	r26, 0x03	; 3
     e7e:	8c 93       	st	X, r24
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	14 96       	adiw	r26, 0x04	; 4
     e84:	1c 92       	st	X, r1
     e86:	14 97       	sbiw	r26, 0x04	; 4
     e88:	15 96       	adiw	r26, 0x05	; 5
     e8a:	1c 92       	st	X, r1
     e8c:	15 97       	sbiw	r26, 0x05	; 5
     e8e:	16 96       	adiw	r26, 0x06	; 6
     e90:	1c 92       	st	X, r1
     e92:	16 97       	sbiw	r26, 0x06	; 6
     e94:	17 96       	adiw	r26, 0x07	; 7
     e96:	1c 92       	st	X, r1
     e98:	17 97       	sbiw	r26, 0x07	; 7
     e9a:	18 96       	adiw	r26, 0x08	; 8
     e9c:	1c 92       	st	X, r1
     e9e:	18 97       	sbiw	r26, 0x08	; 8
     ea0:	19 96       	adiw	r26, 0x09	; 9
     ea2:	1c 92       	st	X, r1
     ea4:	19 97       	sbiw	r26, 0x09	; 9
     ea6:	1b 96       	adiw	r26, 0x0b	; 11
  appMsg.shortAddr            = APP_ADDR;
     ea8:	bc 92       	st	X, r11
     eaa:	ae 92       	st	-X, r10
     eac:	1a 97       	sbiw	r26, 0x0a	; 10
     eae:	80 e0       	ldi	r24, 0x00	; 0
  appMsg.softVersion          = 0x01010100;
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	a1 e0       	ldi	r26, 0x01	; 1
     eb4:	b1 e0       	ldi	r27, 0x01	; 1
     eb6:	f8 01       	movw	r30, r16
     eb8:	84 87       	std	Z+12, r24	; 0x0c
     eba:	95 87       	std	Z+13, r25	; 0x0d
     ebc:	a6 87       	std	Z+14, r26	; 0x0e
     ebe:	b7 87       	std	Z+15, r27	; 0x0f
     ec0:	80 e0       	ldi	r24, 0x00	; 0
  appMsg.channelMask          = (1L << APP_CHANNEL);
     ec2:	90 e8       	ldi	r25, 0x80	; 128
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	80 8b       	std	Z+16, r24	; 0x10
     eca:	91 8b       	std	Z+17, r25	; 0x11
     ecc:	a2 8b       	std	Z+18, r26	; 0x12
     ece:	b3 8b       	std	Z+19, r27	; 0x13
     ed0:	80 e8       	ldi	r24, 0x80	; 128
  appMsg.panId                = APP_PANID;
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	96 8b       	std	Z+22, r25	; 0x16
     ed6:	85 8b       	std	Z+21, r24	; 0x15
     ed8:	8f e0       	ldi	r24, 0x0F	; 15
  appMsg.workingChannel       = APP_CHANNEL;
     eda:	84 8b       	std	Z+20, r24	; 0x14
     edc:	10 8e       	std	Z+24, r1	; 0x18
  appMsg.parentShortAddr      = 0;
     ede:	17 8a       	std	Z+23, r1	; 0x17
     ee0:	11 8e       	std	Z+25, r1	; 0x19
  appMsg.lqi                  = 0;
     ee2:	12 8e       	std	Z+26, r1	; 0x1a
  appMsg.rssi                 = 0;
     ee4:	93 8e       	std	Z+27, r9	; 0x1b

  appMsg.sensors.type        = 1;
     ee6:	8c e0       	ldi	r24, 0x0C	; 12
  appMsg.sensors.size        = sizeof(int32_t) * 3;
     ee8:	84 8f       	std	Z+28, r24	; 0x1c
     eea:	15 8e       	std	Z+29, r1	; 0x1d
  appMsg.sensors.battery     = 0;
     eec:	16 8e       	std	Z+30, r1	; 0x1e
     eee:	17 8e       	std	Z+31, r1	; 0x1f
     ef0:	10 a2       	std	Z+32, r1	; 0x20
     ef2:	11 a2       	std	Z+33, r1	; 0x21
  appMsg.sensors.temperature = 0;
     ef4:	12 a2       	std	Z+34, r1	; 0x22
     ef6:	13 a2       	std	Z+35, r1	; 0x23
     ef8:	14 a2       	std	Z+36, r1	; 0x24
     efa:	15 a2       	std	Z+37, r1	; 0x25
  appMsg.sensors.light       = 0;
     efc:	16 a2       	std	Z+38, r1	; 0x26
     efe:	17 a2       	std	Z+39, r1	; 0x27
     f00:	10 a6       	std	Z+40, r1	; 0x28
     f02:	80 e2       	ldi	r24, 0x20	; 32

  appMsg.caption.type         = 32;
     f04:	81 ab       	std	Z+49, r24	; 0x31
     f06:	83 e1       	ldi	r24, 0x13	; 19
  appMsg.caption.size         = APP_CAPTION_SIZE;
     f08:	82 ab       	std	Z+50, r24	; 0x32
     f0a:	ea e0       	ldi	r30, 0x0A	; 10
  memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
     f0c:	f4 e0       	ldi	r31, 0x04	; 4
     f0e:	a7 ef       	ldi	r26, 0xF7	; 247
     f10:	b4 e0       	ldi	r27, 0x04	; 4
     f12:	01 90       	ld	r0, Z+
     f14:	0d 92       	st	X+, r0
     f16:	8a 95       	dec	r24
     f18:	e1 f7       	brne	.-8      	; 0xf12 <main+0x1a2>
     f1a:	9d 9a       	sbi	0x13, 5	; 19
     f1c:	a5 9a       	sbi	0x14, 5	; 20
     f1e:	6b 9a       	sbi	0x0d, 3	; 13
  HAL_GPIO_PIN(LED1, E, 3);
     f20:	73 9a       	sbi	0x0e, 3	; 14
  HAL_GPIO_PIN(LED2, E, 4);
     f22:	6c 9a       	sbi	0x0d, 4	; 13

  HAL_BoardInit();
  HAL_LedInit();

  NWK_SetAddr(APP_ADDR);
     f24:	74 9a       	sbi	0x0e, 4	; 14
     f26:	c5 01       	movw	r24, r10
     f28:	f3 d2       	rcall	.+1510   	; 0x1510 <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
     f2a:	80 e8       	ldi	r24, 0x80	; 128
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	f7 d2       	rcall	.+1518   	; 0x151e <NWK_SetPanId>
     f30:	8f e0       	ldi	r24, 0x0F	; 15
  PHY_SetChannel(APP_CHANNEL);
     f32:	0e 94 b0 12 	call	0x2560	; 0x2560 <PHY_SetChannel>
#ifdef PHY_AT86RF212
  PHY_SetBand(APP_BAND);
  PHY_SetModulation(APP_MODULATION);
#endif
  PHY_SetRxState(true);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 ac 12 	call	0x2558	; 0x2558 <PHY_SetRxState>

#ifdef NWK_ENABLE_SECURITY
  NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
#endif

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     f3c:	61 e4       	ldi	r22, 0x41	; 65
     f3e:	75 e0       	ldi	r23, 0x05	; 5
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	f4 d2       	rcall	.+1512   	; 0x152c <NWK_OpenEndpoint>
  NWK_OpenEndpoint(2, appAddrInd);
     f44:	60 ed       	ldi	r22, 0xD0	; 208
     f46:	74 e0       	ldi	r23, 0x04	; 4
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	f0 d2       	rcall	.+1504   	; 0x152c <NWK_OpenEndpoint>
     f4c:	e7 eb       	ldi	r30, 0xB7	; 183

  appDataSendingTimer.interval = APP_SENDING_INTERVAL;
     f4e:	f4 e0       	ldi	r31, 0x04	; 4
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	97 e2       	ldi	r25, 0x27	; 39
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	86 83       	std	Z+6, r24	; 0x06
     f5a:	97 83       	std	Z+7, r25	; 0x07
     f5c:	a0 87       	std	Z+8, r26	; 0x08
     f5e:	b1 87       	std	Z+9, r27	; 0x09
     f60:	12 86       	std	Z+10, r1	; 0x0a
  appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
     f62:	83 ec       	ldi	r24, 0xC3	; 195
  appDataSendingTimer.handler = appDataSendingTimerHandler;
     f64:	94 e0       	ldi	r25, 0x04	; 4
     f66:	94 87       	std	Z+12, r25	; 0x0c
     f68:	83 87       	std	Z+11, r24	; 0x0b
     f6a:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <appNetworkStatus>

#if defined(APP_ROUTER) || defined(APP_ENDDEVICE)
  appNetworkStatus = false;
     f6e:	e8 e1       	ldi	r30, 0x18	; 24
  appNetworkStatusTimer.interval = 500;
     f70:	f5 e0       	ldi	r31, 0x05	; 5
     f72:	84 ef       	ldi	r24, 0xF4	; 244
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	86 83       	std	Z+6, r24	; 0x06
     f7c:	97 83       	std	Z+7, r25	; 0x07
     f7e:	a0 87       	std	Z+8, r26	; 0x08
     f80:	b1 87       	std	Z+9, r27	; 0x09
     f82:	92 86       	std	Z+10, r9	; 0x0a
  appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
     f84:	82 eb       	ldi	r24, 0xB2	; 178
  appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	94 87       	std	Z+12, r25	; 0x0c
     f8a:	83 87       	std	Z+11, r24	; 0x0b
     f8c:	cf 01       	movw	r24, r30
  SYS_TimerStart(&appNetworkStatusTimer);
     f8e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <SYS_TimerStart>
     f92:	eb e0       	ldi	r30, 0x0B	; 11

  appCommandWaitTimer.interval = NWK_ACK_WAIT_TIME;
     f94:	f5 e0       	ldi	r31, 0x05	; 5
     f96:	88 ee       	ldi	r24, 0xE8	; 232
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	86 83       	std	Z+6, r24	; 0x06
     fa0:	97 83       	std	Z+7, r25	; 0x07
     fa2:	a0 87       	std	Z+8, r26	; 0x08
     fa4:	b1 87       	std	Z+9, r27	; 0x09
  appCommandWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
     fa6:	12 86       	std	Z+10, r1	; 0x0a
  appCommandWaitTimer.handler = appCommandWaitTimerHandler;
     fa8:	87 eb       	ldi	r24, 0xB7	; 183
     faa:	94 e0       	ldi	r25, 0x04	; 4
     fac:	94 87       	std	Z+12, r25	; 0x0c

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  srand(PHY_RandomReq());
#endif

  APP_CommandsInit();
     fae:	83 87       	std	Z+11, r24	; 0x0b
     fb0:	c4 d9       	rcall	.-3192   	; 0x33a <APP_CommandsInit>

#if defined(APP_ROUTER) || defined(APP_ENDDEVICE)
	appState = APP_STATE_ADDR_REQUEST;
     fb2:	90 92 36 05 	sts	0x0536, r9	; 0x800536 <appState>
#else
	appState = APP_STATE_SEND;
#endif
  

  ADC_Init(4,2);
     fb6:	62 e0       	ldi	r22, 0x02	; 2
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	da d8       	rcall	.-3660   	; 0x174 <ADC_Init>
     fc0:	42 cf       	rjmp	.-380    	; 0xe46 <main+0xd6>
// PREPARING THE DATAFRAME TO SEND
//
static void appSendData(void)
{
#ifdef NWK_ENABLE_ROUTING
  appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	cf d4       	rcall	.+2462   	; 0x1968 <NWK_RouteNextHop>
     fca:	d8 01       	movw	r26, r16
     fcc:	58 96       	adiw	r26, 0x18	; 24
     fce:	9c 93       	st	X, r25
     fd0:	8e 93       	st	-X, r24
     fd2:	57 97       	sbiw	r26, 0x17	; 23
     fd4:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <rand>
#else
  appMsg.parentShortAddr = 0;
#endif

  appMsg.sensors.battery     = rand() & 0xffff;
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	f8 01       	movw	r30, r16
     fde:	85 8f       	std	Z+29, r24	; 0x1d
     fe0:	96 8f       	std	Z+30, r25	; 0x1e
     fe2:	a7 8f       	std	Z+31, r26	; 0x1f
  ADC_Init(4,2);
     fe4:	b0 a3       	std	Z+32, r27	; 0x20
     fe6:	62 e0       	ldi	r22, 0x02	; 2
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	c2 d8       	rcall	.-3708   	; 0x174 <ADC_Init>
  appMsg.sensors.temperature = ADC_readTemp();
     ff0:	e4 d8       	rcall	.-3640   	; 0x1ba <ADC_readTemp>
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	f8 01       	movw	r30, r16
     ff8:	81 a3       	std	Z+33, r24	; 0x21
     ffa:	92 a3       	std	Z+34, r25	; 0x22
     ffc:	a3 a3       	std	Z+35, r26	; 0x23
     ffe:	b4 a3       	std	Z+36, r27	; 0x24
    1000:	41 a6       	std	Z+41, r4	; 0x29
  appMsg.sensors.moist       = 69;//ADC_get(3);
    1002:	52 a6       	std	Z+42, r5	; 0x2a
    1004:	63 a6       	std	Z+43, r6	; 0x2b
    1006:	74 a6       	std	Z+44, r7	; 0x2c
    1008:	84 ea       	ldi	r24, 0xA4	; 164
  appMsg.sensors.weight       = 420;//ADC_get(3);
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	85 a7       	std	Z+45, r24	; 0x2d
    1012:	96 a7       	std	Z+46, r25	; 0x2e
    1014:	a7 a7       	std	Z+47, r26	; 0x2f
    1016:	b0 ab       	std	Z+48, r27	; 0x30
    1018:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <messno>
  appMsg.sensors.light       = messno++;//ADC_get(3);
    101c:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <messno+0x1>
    1020:	a0 91 b3 04 	lds	r26, 0x04B3	; 0x8004b3 <messno+0x2>
    1024:	b0 91 b4 04 	lds	r27, 0x04B4	; 0x8004b4 <messno+0x3>
    1028:	ac 01       	movw	r20, r24
    102a:	bd 01       	movw	r22, r26
    102c:	4f 5f       	subi	r20, 0xFF	; 255
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	6f 4f       	sbci	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	40 93 b1 04 	sts	0x04B1, r20	; 0x8004b1 <messno>
    1038:	50 93 b2 04 	sts	0x04B2, r21	; 0x8004b2 <messno+0x1>
    103c:	60 93 b3 04 	sts	0x04B3, r22	; 0x8004b3 <messno+0x2>
    1040:	70 93 b4 04 	sts	0x04B4, r23	; 0x8004b4 <messno+0x3>
    1044:	85 a3       	std	Z+37, r24	; 0x25
    1046:	96 a3       	std	Z+38, r25	; 0x26
    1048:	a7 a3       	std	Z+39, r26	; 0x27
    104a:	b0 a7       	std	Z+40, r27	; 0x28
    104c:	d7 01       	movw	r26, r14
#if defined(APP_COORDINATOR)
  appUartSendMessageHR((uint8_t *)&appMsg, sizeof(appMsg));
  SYS_TimerStart(&appDataSendingTimer);
  appState = APP_STATE_WAIT_SEND_TIMER;
#else
  appNwkDataReq.dstAddr = 0;
    104e:	16 96       	adiw	r26, 0x06	; 6
    1050:	1c 92       	st	X, r1
    1052:	1e 92       	st	-X, r1
    1054:	15 97       	sbiw	r26, 0x05	; 5
    1056:	81 e0       	ldi	r24, 0x01	; 1
  appNwkDataReq.dstEndpoint = APP_ENDPOINT;
    1058:	17 96       	adiw	r26, 0x07	; 7
    105a:	8c 93       	st	X, r24
    105c:	17 97       	sbiw	r26, 0x07	; 7
    105e:	18 96       	adiw	r26, 0x08	; 8
  appNwkDataReq.srcEndpoint = APP_ENDPOINT;
    1060:	8c 93       	st	X, r24
    1062:	18 97       	sbiw	r26, 0x08	; 8
    1064:	83 e0       	ldi	r24, 0x03	; 3
  appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    1066:	19 96       	adiw	r26, 0x09	; 9
    1068:	8c 93       	st	X, r24
    106a:	19 97       	sbiw	r26, 0x09	; 9
    106c:	1b 96       	adiw	r26, 0x0b	; 11
  appNwkDataReq.data = (uint8_t *)&appMsg;
    106e:	1c 93       	st	X, r17
    1070:	0e 93       	st	-X, r16
    1072:	1a 97       	sbiw	r26, 0x0a	; 10
  appNwkDataReq.size = sizeof(appMsg);
    1074:	86 e4       	ldi	r24, 0x46	; 70
    1076:	1c 96       	adiw	r26, 0x0c	; 12
    1078:	8c 93       	st	X, r24
    107a:	1c 97       	sbiw	r26, 0x0c	; 12
  appNwkDataReq.confirm = appDataConf;
    107c:	ec e5       	ldi	r30, 0x5C	; 92
    107e:	f6 e0       	ldi	r31, 0x06	; 6
    1080:	1e 96       	adiw	r26, 0x0e	; 14
    1082:	fc 93       	st	X, r31
    1084:	ee 93       	st	-X, r30
    1086:	1d 97       	sbiw	r26, 0x0d	; 13
  HAL_GPIO_PIN(LED0, E, 2);
  HAL_GPIO_PIN(LED1, E, 3);
  HAL_GPIO_PIN(LED2, E, 4);
#elif defined(PLATFORM_deRFMEGA)
  HAL_GPIO_PIN(LED0, G, 5);
  HAL_GPIO_PIN(LED1, E, 3);
    1088:	73 98       	cbi	0x0e, 3	; 14

  HAL_LedOn(APP_LED_DATA);
  NWK_DataReq(&appNwkDataReq);
    108a:	c7 01       	movw	r24, r14
    108c:	a3 d2       	rcall	.+1350   	; 0x15d4 <NWK_DataReq>
    108e:	84 e0       	ldi	r24, 0x04	; 4

  appState = APP_STATE_WAIT_CONF;
    1090:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
    1094:	d8 ce       	rjmp	.-592    	; 0xe46 <main+0xd6>
    1096:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <rand>
      appSendData();
    } break;
	
	case APP_STATE_ADDR_REQUEST:
	{
	   myNodeID = rand() & 0xffff;
    109a:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <myNodeID+0x1>
    109e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <myNodeID>
    10a2:	d6 01       	movw	r26, r12
	
}
static void appAddrRequest(uint16_t node_id)
{
	static AppAddress_t msg;
	msg.node_ID=node_id;
    10a4:	14 96       	adiw	r26, 0x04	; 4
    10a6:	9c 93       	st	X, r25
    10a8:	8e 93       	st	-X, r24
    10aa:	13 97       	sbiw	r26, 0x03	; 3
    10ac:	80 e1       	ldi	r24, 0x10	; 16
	msg.msg_ID=ADDR_REQUEST_MSG;
    10ae:	8c 93       	st	X, r24
    10b0:	12 96       	adiw	r26, 0x02	; 2
	msg.node_address=APP_ADDR;
    10b2:	bc 92       	st	X, r11
    10b4:	ae 92       	st	-X, r10
    10b6:	11 97       	sbiw	r26, 0x01	; 1
    10b8:	f7 01       	movw	r30, r14
	
	
	appNwkDataReq.dstAddr = 0x0000;
    10ba:	16 82       	std	Z+6, r1	; 0x06
    10bc:	15 82       	std	Z+5, r1	; 0x05
    10be:	68 94       	set
	appNwkDataReq.dstEndpoint = 2;
    10c0:	99 24       	eor	r9, r9
    10c2:	91 f8       	bld	r9, 1
    10c4:	97 82       	std	Z+7, r9	; 0x07
	appNwkDataReq.srcEndpoint = 2;
    10c6:	90 86       	std	Z+8, r9	; 0x08
	appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	81 87       	std	Z+9, r24	; 0x09
	appNwkDataReq.data = (uint8_t *)&msg;
    10cc:	d3 86       	std	Z+11, r13	; 0x0b
    10ce:	c2 86       	std	Z+10, r12	; 0x0a
	appNwkDataReq.size = sizeof(msg);
    10d0:	85 e0       	ldi	r24, 0x05	; 5
    10d2:	84 87       	std	Z+12, r24	; 0x0c
	appNwkDataReq.confirm = appADDR_REQ_Conf;
    10d4:	8b eb       	ldi	r24, 0xBB	; 187
    10d6:	94 e0       	ldi	r25, 0x04	; 4
    10d8:	96 87       	std	Z+14, r25	; 0x0e
    10da:	85 87       	std	Z+13, r24	; 0x0d
    10dc:	73 98       	cbi	0x0e, 3	; 14

	HAL_LedOn(APP_LED_DATA);
	NWK_DataReq(&appNwkDataReq);
    10de:	c7 01       	movw	r24, r14
    10e0:	79 d2       	rcall	.+1266   	; 0x15d4 <NWK_DataReq>
    10e2:	90 92 36 05 	sts	0x0536, r9	; 0x800536 <appState>

	appState = APP_STATE_ADDR_WAIT;
    10e6:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <myNodeID+0x1>
	
	case APP_STATE_ADDR_REQUEST:
	{
	   myNodeID = rand() & 0xffff;
	   appAddrRequest(myNodeID);
	   printf("ADDR_req, nodeID=%x \n\r",myNodeID);
    10ea:	8f 93       	push	r24
    10ec:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <myNodeID>
    10f0:	8f 93       	push	r24
    10f2:	3f 92       	push	r3
    10f4:	2f 92       	push	r2
    10f6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <printf>
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    case APP_STATE_SENDING_DONE:
    {
#if defined(APP_ENDDEVICE)
      appState = APP_STATE_PREPARE_TO_SLEEP;
#else
      SYS_TimerStart(&appDataSendingTimer);
    1102:	a1 ce       	rjmp	.-702    	; 0xe46 <main+0xd6>
    1104:	87 eb       	ldi	r24, 0xB7	; 183
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	0e 94 64 14 	call	0x28c8	; 0x28c8 <SYS_TimerStart>
      appState = APP_STATE_WAIT_SEND_TIMER;
    110c:	86 e0       	ldi	r24, 0x06	; 6
    110e:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
#endif
    } break;

    case APP_STATE_PREPARE_TO_SLEEP:
    {
      if (!NWK_Busy())
    1112:	99 ce       	rjmp	.-718    	; 0xe46 <main+0xd6>
    1114:	14 d2       	rcall	.+1064   	; 0x153e <NWK_Busy>
    1116:	81 11       	cpse	r24, r1
      {
        NWK_SleepReq();
    1118:	96 ce       	rjmp	.-724    	; 0xe46 <main+0xd6>
    111a:	2a d2       	rcall	.+1108   	; 0x1570 <NWK_SleepReq>
        appState = APP_STATE_SLEEP;
    111c:	89 e0       	ldi	r24, 0x09	; 9
    111e:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
#if defined(PLATFORM_RCB128RFA1)
  HAL_GPIO_PIN(LED0, E, 2);
  HAL_GPIO_PIN(LED1, E, 3);
  HAL_GPIO_PIN(LED2, E, 4);
#elif defined(PLATFORM_deRFMEGA)
  HAL_GPIO_PIN(LED0, G, 5);
    1122:	91 ce       	rjmp	.-734    	; 0xe46 <main+0xd6>
    1124:	9d 98       	cbi	0x13, 5	; 19
  HAL_GPIO_PIN(LED1, E, 3);
    1126:	a5 98       	cbi	0x14, 5	; 20
    1128:	6b 98       	cbi	0x0d, 3	; 13
  HAL_GPIO_PIN(LED2, E, 4);
    112a:	73 98       	cbi	0x0e, 3	; 14
    112c:	6c 98       	cbi	0x0d, 4	; 13
    } break;

    case APP_STATE_SLEEP:
    {
      HAL_LedClose();
      HAL_Sleep(APP_SENDING_INTERVAL);
    112e:	74 98       	cbi	0x0e, 4	; 14
    1130:	60 e1       	ldi	r22, 0x10	; 16
    1132:	77 e2       	ldi	r23, 0x27	; 39
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	63 d0       	rcall	.+198    	; 0x1200 <HAL_Sleep>
      appState = APP_STATE_WAKEUP;
    113a:	8a e0       	ldi	r24, 0x0A	; 10
    113c:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
    1140:	82 ce       	rjmp	.-764    	; 0xe46 <main+0xd6>
    } break;

    case APP_STATE_WAKEUP:
    {
      NWK_WakeupReq();
    1142:	19 d2       	rcall	.+1074   	; 0x1576 <NWK_WakeupReq>
    1144:	9d 9a       	sbi	0x13, 5	; 19
#if defined(PLATFORM_RCB128RFA1)
  HAL_GPIO_PIN(LED0, E, 2);
  HAL_GPIO_PIN(LED1, E, 3);
  HAL_GPIO_PIN(LED2, E, 4);
#elif defined(PLATFORM_deRFMEGA)
  HAL_GPIO_PIN(LED0, G, 5);
    1146:	a5 9a       	sbi	0x14, 5	; 20
    1148:	6b 9a       	sbi	0x0d, 3	; 13
  HAL_GPIO_PIN(LED1, E, 3);
    114a:	73 9a       	sbi	0x0e, 3	; 14
    114c:	6c 9a       	sbi	0x0d, 4	; 13
  HAL_GPIO_PIN(LED2, E, 4);
    114e:	74 9a       	sbi	0x0e, 4	; 14
    1150:	a5 98       	cbi	0x14, 5	; 20
#if defined(PLATFORM_RCB128RFA1)
  HAL_GPIO_PIN(LED0, E, 2);
  HAL_GPIO_PIN(LED1, E, 3);
  HAL_GPIO_PIN(LED2, E, 4);
#elif defined(PLATFORM_deRFMEGA)
  HAL_GPIO_PIN(LED0, G, 5);
    1152:	83 e0       	ldi	r24, 0x03	; 3

      HAL_LedInit();
      HAL_LedOn(APP_LED_NETWORK);

      appState = APP_STATE_SEND;
    1154:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <appState>
    1158:	76 ce       	rjmp	.-788    	; 0xe46 <main+0xd6>
    115a:	8f ef       	ldi	r24, 0xFF	; 255
		    TMP102Sensor_PrintTemperature(&sensor);
		    } else {
		    printf("Failed to read TMP102 temperature.\n");
	    }
    }
 }
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	9f 90       	pop	r9
    117e:	7f 90       	pop	r7
    1180:	6f 90       	pop	r6
    1182:	5f 90       	pop	r5
    1184:	4f 90       	pop	r4
    1186:	3f 90       	pop	r3
    1188:	2f 90       	pop	r2
    118a:	08 95       	ret

0000118c <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    118c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	a8 95       	wdr
    1194:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1198:	88 61       	ori	r24, 0x18	; 24
    119a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    119e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11a2:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    11a4:	e1 e6       	ldi	r30, 0x61	; 97
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 e8       	ldi	r24, 0x80	; 128
    11aa:	80 83       	st	Z, r24
  CLKPR = 0;
    11ac:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    11ae:	78 94       	sei

  HAL_TimerInit();
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <HAL_TimerInit>
    11b2:	08 95       	ret

000011b4 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    11b4:	10 92 0e 0f 	sts	0x0F0E, r1	; 0x800f0e <halTimerIrqCount>
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	97 e2       	ldi	r25, 0x27	; 39
    11bc:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    11c0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    11c4:	e1 ea       	ldi	r30, 0xA1	; 161
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	88 e0       	ldi	r24, 0x08	; 8
    11ca:	80 83       	st	Z, r24
    11cc:	80 81       	ld	r24, Z
    11ce:	82 60       	ori	r24, 0x02	; 2
    11d0:	80 83       	st	Z, r24
    11d2:	e2 e7       	ldi	r30, 0x72	; 114
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	80 83       	st	Z, r24
    11dc:	08 95       	ret

000011de <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	8f 93       	push	r24
  halTimerIrqCount++;
    11ea:	80 91 0e 0f 	lds	r24, 0x0F0E	; 0x800f0e <halTimerIrqCount>
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	80 93 0e 0f 	sts	0x0F0E, r24	; 0x800f0e <halTimerIrqCount>
}
    11f4:	8f 91       	pop	r24
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <HAL_Sleep>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_Sleep(uint32_t interval)
{
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
  uint32_t ticks;
  uint16_t integer;
  uint8_t fractional;

  ticks = (interval * PRESCALED_CLOCK) / 1000ul;
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	aa 1f       	adc	r26, r26
    120e:	bb 1f       	adc	r27, r27
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	aa 1f       	adc	r26, r26
    1216:	bb 1f       	adc	r27, r27
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	aa 1f       	adc	r26, r26
    121e:	bb 1f       	adc	r27, r27
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	aa 1f       	adc	r26, r26
    1226:	bb 1f       	adc	r27, r27
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	28 ee       	ldi	r18, 0xE8	; 232
    1236:	33 e0       	ldi	r19, 0x03	; 3
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__udivmodsi4>
    1240:	da 01       	movw	r26, r20
    1242:	c9 01       	movw	r24, r18
  if (0 == ticks)
    1244:	21 15       	cp	r18, r1
    1246:	31 05       	cpc	r19, r1
    1248:	41 05       	cpc	r20, r1
    124a:	51 05       	cpc	r21, r1
    124c:	09 f4       	brne	.+2      	; 0x1250 <HAL_Sleep+0x50>
    124e:	5b c0       	rjmp	.+182    	; 0x1306 <HAL_Sleep+0x106>
    return;

  integer = ticks >> 8;
    1250:	77 27       	eor	r23, r23
    1252:	65 2f       	mov	r22, r21
    1254:	54 2f       	mov	r21, r20
    1256:	43 2f       	mov	r20, r19
  fractional = ticks & 0xff;
    1258:	28 2f       	mov	r18, r24

  TIMSK2 = 0;
    125a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  ASSR |= (1 << AS2);
    125e:	e6 eb       	ldi	r30, 0xB6	; 182
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 62       	ori	r24, 0x20	; 32
    1266:	80 83       	st	Z, r24
  TCCR2A = 0;
    1268:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  TCCR2B = 0;
    126c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  TCNT2 = 0;
    1270:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    1274:	80 81       	ld	r24, Z
    1276:	8f 71       	andi	r24, 0x1F	; 31
    1278:	e9 f7       	brne	.-6      	; 0x1274 <HAL_Sleep+0x74>
  TCCR2A = 0;
  TCCR2B = 0;
  TCNT2 = 0;
  halSleepSynchronize();

  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
    127a:	87 e0       	ldi	r24, 0x07	; 7
    127c:	87 bb       	out	0x17, r24	; 23
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024
    127e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    halSleepTimerEvent = false;
    
    if (integer > 0)
      OCR2A = 0xff;
    else if (fractional > 0)
      OCR2A = fractional;
    1282:	c3 eb       	ldi	r28, 0xB3	; 179
    1284:	d0 e0       	ldi	r29, 0x00	; 0
  while (1)
  {
    halSleepTimerEvent = false;
    
    if (integer > 0)
      OCR2A = 0xff;
    1286:	6f ef       	ldi	r22, 0xFF	; 255
      halSleepSynchronize();
      ASSR &= ~(1 << AS2);
      return;
    }

    TIMSK2 |= (1 << OCIE2A);
    1288:	a0 e7       	ldi	r26, 0x70	; 112
    128a:	b0 e0       	ldi	r27, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    128c:	e6 eb       	ldi	r30, 0xB6	; 182
    128e:	f0 e0       	ldi	r31, 0x00	; 0

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
    1290:	37 e0       	ldi	r19, 0x07	; 7
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <HAL_Sleep+0x96>
    if (event)
    {
      if (integer > 0)
        integer--;
      else
        fractional = 0;
    1294:	20 e0       	ldi	r18, 0x00	; 0
  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024

  while (1)
  {
    halSleepTimerEvent = false;
    1296:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <halSleepTimerEvent>
    
    if (integer > 0)
    129a:	41 15       	cp	r20, r1
    129c:	51 05       	cpc	r21, r1
    129e:	11 f0       	breq	.+4      	; 0x12a4 <HAL_Sleep+0xa4>
      OCR2A = 0xff;
    12a0:	68 83       	st	Y, r22
    12a2:	1b c0       	rjmp	.+54     	; 0x12da <HAL_Sleep+0xda>
    else if (fractional > 0)
    12a4:	22 23       	and	r18, r18
    12a6:	11 f0       	breq	.+4      	; 0x12ac <HAL_Sleep+0xac>
      OCR2A = fractional;
    12a8:	28 83       	st	Y, r18
    12aa:	17 c0       	rjmp	.+46     	; 0x12da <HAL_Sleep+0xda>

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    12ac:	e6 eb       	ldi	r30, 0xB6	; 182
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 71       	andi	r24, 0x1F	; 31
    12b4:	e9 f7       	brne	.-6      	; 0x12b0 <HAL_Sleep+0xb0>
    else if (fractional > 0)
      OCR2A = fractional;
    else
    {
      halSleepSynchronize();
      TIMSK2 = 0;
    12b6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
      TCCR2B = 0;
    12ba:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
      GTCCR |= (1 << PSRASY);
    12be:	83 b5       	in	r24, 0x23	; 35
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	83 bd       	out	0x23, r24	; 35

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    12c4:	e6 eb       	ldi	r30, 0xB6	; 182
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 71       	andi	r24, 0x1F	; 31
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <HAL_Sleep+0xc8>
      halSleepSynchronize();
      TIMSK2 = 0;
      TCCR2B = 0;
      GTCCR |= (1 << PSRASY);
      halSleepSynchronize();
      ASSR &= ~(1 << AS2);
    12ce:	e6 eb       	ldi	r30, 0xB6	; 182
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8f 7d       	andi	r24, 0xDF	; 223
    12d6:	80 83       	st	Z, r24
      return;
    12d8:	16 c0       	rjmp	.+44     	; 0x1306 <HAL_Sleep+0x106>
    }

    TIMSK2 |= (1 << OCIE2A);
    12da:	8c 91       	ld	r24, X
    12dc:	82 60       	ori	r24, 0x02	; 2
    12de:	8c 93       	st	X, r24

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 71       	andi	r24, 0x1F	; 31
    12e4:	e9 f7       	brne	.-6      	; 0x12e0 <HAL_Sleep+0xe0>

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
    12e6:	33 bf       	out	0x33, r19	; 51
    asm("sleep");
    12e8:	88 95       	sleep
    SMCR = 0;
    12ea:	13 be       	out	0x33, r1	; 51

    bool event;

    ATOMIC_SECTION_ENTER
    12ec:	9f b7       	in	r25, 0x3f	; 63
    12ee:	f8 94       	cli
      event = halSleepTimerEvent;
    12f0:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <halSleepTimerEvent>
    ATOMIC_SECTION_LEAVE
    12f4:	9f bf       	out	0x3f, r25	; 63

    if (event)
    12f6:	88 23       	and	r24, r24
    12f8:	71 f2       	breq	.-100    	; 0x1296 <HAL_Sleep+0x96>
    {
      if (integer > 0)
    12fa:	41 15       	cp	r20, r1
    12fc:	51 05       	cpc	r21, r1
    12fe:	51 f2       	breq	.-108    	; 0x1294 <HAL_Sleep+0x94>
        integer--;
    1300:	41 50       	subi	r20, 0x01	; 1
    1302:	51 09       	sbc	r21, r1
    1304:	c8 cf       	rjmp	.-112    	; 0x1296 <HAL_Sleep+0x96>
    else
    {
      // TODO: wakeup from some other source
    }
  }
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <__vector_13>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	8f 93       	push	r24
  halSleepTimerEvent = true;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <halSleepTimerEvent>
}
    131e:	8f 91       	pop	r24
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    132a:	4f b7       	in	r20, 0x3f	; 63
    132c:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    132e:	ea e3       	ldi	r30, 0x3A	; 58
    1330:	f5 e0       	ldi	r31, 0x05	; 5
    1332:	20 85       	ldd	r18, Z+8	; 0x08
    1334:	31 85       	ldd	r19, Z+9	; 0x09
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	bc 01       	movw	r22, r24
    133c:	6f 5f       	subi	r22, 0xFF	; 255
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	71 83       	std	Z+1, r23	; 0x01
    1342:	60 83       	st	Z, r22
    1344:	d9 01       	movw	r26, r18
    1346:	a8 0f       	add	r26, r24
    1348:	b9 1f       	adc	r27, r25
    134a:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	24 81       	ldd	r18, Z+4	; 0x04
    1352:	35 81       	ldd	r19, Z+5	; 0x05
    1354:	62 17       	cp	r22, r18
    1356:	73 07       	cpc	r23, r19
    1358:	21 f4       	brne	.+8      	; 0x1362 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    135a:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <rxFifo+0x1>
    135e:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <rxFifo>
    rxFifo.bytes--;
    1362:	ea e3       	ldi	r30, 0x3A	; 58
    1364:	f5 e0       	ldi	r31, 0x05	; 5
    1366:	26 81       	ldd	r18, Z+6	; 0x06
    1368:	37 81       	ldd	r19, Z+7	; 0x07
    136a:	21 50       	subi	r18, 0x01	; 1
    136c:	31 09       	sbc	r19, r1
    136e:	37 83       	std	Z+7, r19	; 0x07
    1370:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    1372:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    1374:	08 95       	ret

00001376 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	0b b6       	in	r0, 0x3b	; 59
    1382:	0f 92       	push	r0
    1384:	8f 93       	push	r24
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
  udrEmpty = true;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    1390:	e9 ec       	ldi	r30, 0xC9	; 201
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8f 7d       	andi	r24, 0xDF	; 223
    1398:	80 83       	st	Z, r24
}
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	8f 91       	pop	r24
    13a0:	0f 90       	pop	r0
    13a2:	0b be       	out	0x3b, r0	; 59
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	0b b6       	in	r0, 0x3b	; 59
    13ba:	0f 92       	push	r0
    13bc:	2f 93       	push	r18
    13be:	3f 93       	push	r19
    13c0:	4f 93       	push	r20
    13c2:	5f 93       	push	r21
    13c4:	6f 93       	push	r22
    13c6:	7f 93       	push	r23
    13c8:	8f 93       	push	r24
    13ca:	9f 93       	push	r25
    13cc:	af 93       	push	r26
    13ce:	bf 93       	push	r27
    13d0:	ef 93       	push	r30
    13d2:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    13d4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  uint8_t byte = UDRx;
    13d8:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    13dc:	8c 71       	andi	r24, 0x1C	; 28
    13de:	59 f5       	brne	.+86     	; 0x1436 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    13e0:	ea e3       	ldi	r30, 0x3A	; 58
    13e2:	f5 e0       	ldi	r31, 0x05	; 5
    13e4:	46 81       	ldd	r20, Z+6	; 0x06
    13e6:	57 81       	ldd	r21, Z+7	; 0x07
    13e8:	84 81       	ldd	r24, Z+4	; 0x04
    13ea:	95 81       	ldd	r25, Z+5	; 0x05
    13ec:	48 17       	cp	r20, r24
    13ee:	59 07       	cpc	r21, r25
    13f0:	11 f1       	breq	.+68     	; 0x1436 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    13f2:	40 85       	ldd	r20, Z+8	; 0x08
    13f4:	51 85       	ldd	r21, Z+9	; 0x09
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	bc 01       	movw	r22, r24
    13fc:	6f 5f       	subi	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	73 83       	std	Z+3, r23	; 0x03
    1402:	62 83       	std	Z+2, r22	; 0x02
    1404:	da 01       	movw	r26, r20
    1406:	a8 0f       	add	r26, r24
    1408:	b9 1f       	adc	r27, r25
    140a:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    140c:	22 81       	ldd	r18, Z+2	; 0x02
    140e:	33 81       	ldd	r19, Z+3	; 0x03
    1410:	84 81       	ldd	r24, Z+4	; 0x04
    1412:	95 81       	ldd	r25, Z+5	; 0x05
    1414:	28 17       	cp	r18, r24
    1416:	39 07       	cpc	r19, r25
    1418:	21 f4       	brne	.+8      	; 0x1422 <__vector_36+0x74>
      rxFifo.tail = 0;
    141a:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <rxFifo+0x3>
    141e:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <rxFifo+0x2>
    rxFifo.bytes++;
    1422:	ea e3       	ldi	r30, 0x3A	; 58
    1424:	f5 e0       	ldi	r31, 0x05	; 5
    1426:	86 81       	ldd	r24, Z+6	; 0x06
    1428:	97 81       	ldd	r25, Z+7	; 0x07
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	97 83       	std	Z+7, r25	; 0x07
    142e:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    1436:	ff 91       	pop	r31
    1438:	ef 91       	pop	r30
    143a:	bf 91       	pop	r27
    143c:	af 91       	pop	r26
    143e:	9f 91       	pop	r25
    1440:	8f 91       	pop	r24
    1442:	7f 91       	pop	r23
    1444:	6f 91       	pop	r22
    1446:	5f 91       	pop	r21
    1448:	4f 91       	pop	r20
    144a:	3f 91       	pop	r19
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	0b be       	out	0x3b, r0	; 59
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    145c:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <txFifo+0x6>
    1460:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <txFifo+0x7>
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	69 f1       	breq	.+90     	; 0x14c2 <HAL_UartTaskHandler+0x66>
    1468:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <udrEmpty>
    146c:	22 23       	and	r18, r18
    146e:	49 f1       	breq	.+82     	; 0x14c2 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    1470:	e4 e4       	ldi	r30, 0x44	; 68
    1472:	f5 e0       	ldi	r31, 0x05	; 5
    1474:	60 85       	ldd	r22, Z+8	; 0x08
    1476:	71 85       	ldd	r23, Z+9	; 0x09
    1478:	20 81       	ld	r18, Z
    147a:	31 81       	ldd	r19, Z+1	; 0x01
    147c:	a9 01       	movw	r20, r18
    147e:	4f 5f       	subi	r20, 0xFF	; 255
    1480:	5f 4f       	sbci	r21, 0xFF	; 255
    1482:	51 83       	std	Z+1, r21	; 0x01
    1484:	40 83       	st	Z, r20
    1486:	db 01       	movw	r26, r22
    1488:	a2 0f       	add	r26, r18
    148a:	b3 1f       	adc	r27, r19
    148c:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    148e:	64 81       	ldd	r22, Z+4	; 0x04
    1490:	75 81       	ldd	r23, Z+5	; 0x05
    1492:	46 17       	cp	r20, r22
    1494:	57 07       	cpc	r21, r23
    1496:	21 f4       	brne	.+8      	; 0x14a0 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    1498:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <txFifo+0x1>
    149c:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <txFifo>
    txFifo.bytes--;
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <txFifo+0x7>
    14a6:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    14aa:	9f b7       	in	r25, 0x3f	; 63
    14ac:	f8 94       	cli
      UDRx = byte;
    14ae:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
      UCSRxB |= (1 << UDRIE1);
    14b2:	e9 ec       	ldi	r30, 0xC9	; 201
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 62       	ori	r24, 0x20	; 32
    14ba:	80 83       	st	Z, r24
      udrEmpty = false;
    14bc:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <udrEmpty>
    ATOMIC_SECTION_LEAVE
    14c0:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    14c2:	2f b7       	in	r18, 0x3f	; 63
    14c4:	f8 94       	cli
      new = newData;
    14c6:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <newData>
      newData = false;
    14ca:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <newData>
      bytes = rxFifo.bytes;
    14ce:	40 91 40 05 	lds	r20, 0x0540	; 0x800540 <rxFifo+0x6>
    14d2:	50 91 41 05 	lds	r21, 0x0541	; 0x800541 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    14d6:	2f bf       	out	0x3f, r18	; 63

    if (new)
    14d8:	99 23       	and	r25, r25
    14da:	11 f0       	breq	.+4      	; 0x14e0 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    14dc:	ca 01       	movw	r24, r20
    14de:	20 cc       	rjmp	.-1984   	; 0xd20 <HAL_UartBytesReceived>
    14e0:	08 95       	ret

000014e2 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    14e2:	ef e0       	ldi	r30, 0x0F	; 15
    14e4:	ff e0       	ldi	r31, 0x0F	; 15
    14e6:	14 82       	std	Z+4, r1	; 0x04
    14e8:	15 82       	std	Z+5, r1	; 0x05
    14ea:	11 82       	std	Z+1, r1	; 0x01
    14ec:	10 82       	st	Z, r1
    14ee:	17 a2       	std	Z+39, r1	; 0x27
    14f0:	16 a2       	std	Z+38, r1	; 0x26
    14f2:	e5 e1       	ldi	r30, 0x15	; 21
    14f4:	ff e0       	ldi	r31, 0x0F	; 15
    14f6:	85 e3       	ldi	r24, 0x35	; 53
    14f8:	9f e0       	ldi	r25, 0x0F	; 15
    14fa:	11 92       	st	Z+, r1
    14fc:	11 92       	st	Z+, r1
    14fe:	e8 17       	cp	r30, r24
    1500:	f9 07       	cpc	r31, r25
    1502:	d9 f7       	brne	.-10     	; 0x14fa <NWK_Init+0x18>
    1504:	62 d6       	rcall	.+3268   	; 0x21ca <nwkTxInit>
    1506:	7d d3       	rcall	.+1786   	; 0x1c02 <nwkRxInit>
    1508:	2c d1       	rcall	.+600    	; 0x1762 <nwkFrameInit>
    150a:	5f d0       	rcall	.+190    	; 0x15ca <nwkDataReqInit>
    150c:	af c1       	rjmp	.+862    	; 0x186c <nwkRouteInit>
    150e:	08 95       	ret

00001510 <NWK_SetAddr>:
    1510:	90 93 10 0f 	sts	0x0F10, r25	; 0x800f10 <nwkIb+0x1>
    1514:	80 93 0f 0f 	sts	0x0F0F, r24	; 0x800f0f <nwkIb>
    1518:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <PHY_SetShortAddr>
    151c:	08 95       	ret

0000151e <NWK_SetPanId>:
    151e:	90 93 12 0f 	sts	0x0F12, r25	; 0x800f12 <nwkIb+0x3>
    1522:	80 93 11 0f 	sts	0x0F11, r24	; 0x800f11 <nwkIb+0x2>
    1526:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <PHY_SetPanId>
    152a:	08 95       	ret

0000152c <NWK_OpenEndpoint>:
    152c:	e8 2f       	mov	r30, r24
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	eb 5e       	subi	r30, 0xEB	; 235
    1536:	f0 4f       	sbci	r31, 0xF0	; 240
    1538:	71 83       	std	Z+1, r23	; 0x01
    153a:	60 83       	st	Z, r22
    153c:	08 95       	ret

0000153e <NWK_Busy>:
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	20 91 35 0f 	lds	r18, 0x0F35	; 0x800f35 <nwkIb+0x26>
    1544:	30 91 36 0f 	lds	r19, 0x0F36	; 0x800f36 <nwkIb+0x27>
    1548:	23 2b       	or	r18, r19
    154a:	09 f4       	brne	.+2      	; 0x154e <NWK_Busy+0x10>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	08 95       	ret

00001550 <NWK_Lock>:
    1550:	ef e0       	ldi	r30, 0x0F	; 15
    1552:	ff e0       	ldi	r31, 0x0F	; 15
    1554:	86 a1       	ldd	r24, Z+38	; 0x26
    1556:	97 a1       	ldd	r25, Z+39	; 0x27
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	97 a3       	std	Z+39, r25	; 0x27
    155c:	86 a3       	std	Z+38, r24	; 0x26
    155e:	08 95       	ret

00001560 <NWK_Unlock>:
    1560:	ef e0       	ldi	r30, 0x0F	; 15
    1562:	ff e0       	ldi	r31, 0x0F	; 15
    1564:	86 a1       	ldd	r24, Z+38	; 0x26
    1566:	97 a1       	ldd	r25, Z+39	; 0x27
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	97 a3       	std	Z+39, r25	; 0x27
    156c:	86 a3       	std	Z+38, r24	; 0x26
    156e:	08 95       	ret

00001570 <NWK_SleepReq>:
    1570:	0c 94 df 12 	jmp	0x25be	; 0x25be <PHY_Sleep>
    1574:	08 95       	ret

00001576 <NWK_WakeupReq>:
    1576:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <PHY_Wakeup>
    157a:	08 95       	ret

0000157c <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    157c:	8c d3       	rcall	.+1816   	; 0x1c96 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    157e:	21 d7       	rcall	.+3650   	; 0x23c2 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    1580:	4d c0       	rjmp	.+154    	; 0x161c <nwkDataReqTaskHandler>
    1582:	08 95       	ret

00001584 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1584:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <nwkDataReqQueue>
    1588:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <nwkDataReqQueue+0x1>
    158c:	30 97       	sbiw	r30, 0x00	; 0
    158e:	d9 f0       	breq	.+54     	; 0x15c6 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    1590:	22 81       	ldd	r18, Z+2	; 0x02
    1592:	33 81       	ldd	r19, Z+3	; 0x03
    1594:	82 17       	cp	r24, r18
    1596:	93 07       	cpc	r25, r19
    1598:	89 f4       	brne	.+34     	; 0x15bc <nwkDataReqTxConf+0x38>
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <nwkDataReqTxConf+0x22>
    159c:	22 81       	ldd	r18, Z+2	; 0x02
    159e:	33 81       	ldd	r19, Z+3	; 0x03
    15a0:	28 17       	cp	r18, r24
    15a2:	39 07       	cpc	r19, r25
    15a4:	59 f4       	brne	.+22     	; 0x15bc <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    15a6:	dc 01       	movw	r26, r24
    15a8:	ad 57       	subi	r26, 0x7D	; 125
    15aa:	bf 4f       	sbci	r27, 0xFF	; 255
    15ac:	2c 91       	ld	r18, X
    15ae:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    15b0:	13 96       	adiw	r26, 0x03	; 3
    15b2:	2c 91       	ld	r18, X
    15b4:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    15b6:	22 e0       	ldi	r18, 0x02	; 2
    15b8:	24 83       	std	Z+4, r18	; 0x04
      break;
    15ba:	05 c0       	rjmp	.+10     	; 0x15c6 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    15bc:	01 90       	ld	r0, Z+
    15be:	f0 81       	ld	r31, Z
    15c0:	e0 2d       	mov	r30, r0
    15c2:	30 97       	sbiw	r30, 0x00	; 0
    15c4:	59 f7       	brne	.-42     	; 0x159c <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    15c6:	0f c1       	rjmp	.+542    	; 0x17e6 <nwkFrameFree>
    15c8:	08 95       	ret

000015ca <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    15ca:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <nwkDataReqQueue+0x1>
    15ce:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <nwkDataReqQueue>
    15d2:	08 95       	ret

000015d4 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    15d4:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    15d6:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    15d8:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    15da:	13 82       	std	Z+3, r1	; 0x03
    15dc:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    15de:	af e0       	ldi	r26, 0x0F	; 15
    15e0:	bf e0       	ldi	r27, 0x0F	; 15
    15e2:	96 96       	adiw	r26, 0x26	; 38
    15e4:	8d 91       	ld	r24, X+
    15e6:	9c 91       	ld	r25, X
    15e8:	97 97       	sbiw	r26, 0x27	; 39
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	97 96       	adiw	r26, 0x27	; 39
    15ee:	9c 93       	st	X, r25
    15f0:	8e 93       	st	-X, r24
    15f2:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    15f4:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <nwkDataReqQueue>
    15f8:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <nwkDataReqQueue+0x1>
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	39 f4       	brne	.+14     	; 0x160e <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    1600:	11 82       	std	Z+1, r1	; 0x01
    1602:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    1604:	f0 93 4f 05 	sts	0x054F, r31	; 0x80054f <nwkDataReqQueue+0x1>
    1608:	e0 93 4e 05 	sts	0x054E, r30	; 0x80054e <nwkDataReqQueue>
    160c:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    160e:	91 83       	std	Z+1, r25	; 0x01
    1610:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    1612:	f0 93 4f 05 	sts	0x054F, r31	; 0x80054f <nwkDataReqQueue+0x1>
    1616:	e0 93 4e 05 	sts	0x054E, r30	; 0x80054e <nwkDataReqQueue>
    161a:	08 95       	ret

0000161c <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1624:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <nwkDataReqQueue>
    1628:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <nwkDataReqQueue+0x1>
    162c:	30 97       	sbiw	r30, 0x00	; 0
    162e:	09 f4       	brne	.+2      	; 0x1632 <nwkDataReqTaskHandler+0x16>
    1630:	93 c0       	rjmp	.+294    	; 0x1758 <nwkDataReqTaskHandler+0x13c>
    1632:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	88 23       	and	r24, r24
    1638:	21 f0       	breq	.+8      	; 0x1642 <nwkDataReqTaskHandler+0x26>
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	09 f4       	brne	.+2      	; 0x1640 <nwkDataReqTaskHandler+0x24>
    163e:	66 c0       	rjmp	.+204    	; 0x170c <nwkDataReqTaskHandler+0xf0>
    1640:	85 c0       	rjmp	.+266    	; 0x174c <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    1642:	9a d0       	rcall	.+308    	; 0x1778 <nwkFrameAlloc>
    1644:	8c 01       	movw	r16, r24
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	21 f4       	brne	.+8      	; 0x1652 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    164e:	8f 87       	std	Y+15, r24	; 0x0f
    1650:	83 c0       	rjmp	.+262    	; 0x1758 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    1652:	9b 83       	std	Y+3, r25	; 0x03
    1654:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    165a:	f8 01       	movw	r30, r16
    165c:	e9 57       	subi	r30, 0x79	; 121
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	82 ec       	ldi	r24, 0xC2	; 194
    1662:	9a e0       	ldi	r25, 0x0A	; 10
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    1668:	31 97       	sbiw	r30, 0x01	; 1
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	82 fb       	bst	r24, 2
    166e:	88 27       	eor	r24, r24
    1670:	80 f9       	bld	r24, 0
    1672:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    1674:	99 85       	ldd	r25, Y+9	; 0x09
    1676:	d8 01       	movw	r26, r16
    1678:	1b 96       	adiw	r26, 0x0b	; 11
    167a:	8c 91       	ld	r24, X
    167c:	1b 97       	sbiw	r26, 0x0b	; 11
    167e:	90 fb       	bst	r25, 0
    1680:	80 f9       	bld	r24, 0
    1682:	1b 96       	adiw	r26, 0x0b	; 11
    1684:	8c 93       	st	X, r24
    1686:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    1688:	99 85       	ldd	r25, Y+9	; 0x09
    168a:	93 fb       	bst	r25, 3
    168c:	99 27       	eor	r25, r25
    168e:	90 f9       	bld	r25, 0
    1690:	90 fb       	bst	r25, 0
    1692:	82 f9       	bld	r24, 2
    1694:	1b 96       	adiw	r26, 0x0b	; 11
    1696:	8c 93       	st	X, r24
    1698:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    169a:	ef e0       	ldi	r30, 0x0F	; 15
    169c:	ff e0       	ldi	r31, 0x0F	; 15
    169e:	84 81       	ldd	r24, Z+4	; 0x04
    16a0:	8f 5f       	subi	r24, 0xFF	; 255
    16a2:	84 83       	std	Z+4, r24	; 0x04
    16a4:	1c 96       	adiw	r26, 0x0c	; 12
    16a6:	8c 93       	st	X, r24
    16a8:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	1e 96       	adiw	r26, 0x0e	; 14
    16b0:	9c 93       	st	X, r25
    16b2:	8e 93       	st	-X, r24
    16b4:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	50 96       	adiw	r26, 0x10	; 16
    16bc:	9c 93       	st	X, r25
    16be:	8e 93       	st	-X, r24
    16c0:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    16c2:	88 85       	ldd	r24, Y+8	; 0x08
    16c4:	98 2f       	mov	r25, r24
    16c6:	9f 70       	andi	r25, 0x0F	; 15
    16c8:	51 96       	adiw	r26, 0x11	; 17
    16ca:	8c 91       	ld	r24, X
    16cc:	51 97       	sbiw	r26, 0x11	; 17
    16ce:	80 7f       	andi	r24, 0xF0	; 240
    16d0:	89 2b       	or	r24, r25
    16d2:	51 96       	adiw	r26, 0x11	; 17
    16d4:	8c 93       	st	X, r24
    16d6:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    16d8:	9f 81       	ldd	r25, Y+7	; 0x07
    16da:	92 95       	swap	r25
    16dc:	90 7f       	andi	r25, 0xF0	; 240
    16de:	8f 70       	andi	r24, 0x0F	; 15
    16e0:	89 2b       	or	r24, r25
    16e2:	51 96       	adiw	r26, 0x11	; 17
    16e4:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    16e6:	f8 01       	movw	r30, r16
    16e8:	ef 57       	subi	r30, 0x7F	; 127
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	4c 85       	ldd	r20, Y+12	; 0x0c
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    16f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <memcpy>
  frame->size += req->size;
    16fc:	f8 01       	movw	r30, r16
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	8c 85       	ldd	r24, Y+12	; 0x0c
    1702:	89 0f       	add	r24, r25
    1704:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    1706:	c8 01       	movw	r24, r16
    1708:	83 d5       	rcall	.+2822   	; 0x2210 <nwkTxFrame>
    170a:	26 c0       	rjmp	.+76     	; 0x1758 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    170c:	ec 17       	cp	r30, r28
    170e:	fd 07       	cpc	r31, r29
    1710:	41 f4       	brne	.+16     	; 0x1722 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <nwkDataReqQueue+0x1>
    171a:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <nwkDataReqQueue>
    171e:	0a c0       	rjmp	.+20     	; 0x1734 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    1720:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	8c 17       	cp	r24, r28
    1728:	9d 07       	cpc	r25, r29
    172a:	d1 f7       	brne	.-12     	; 0x1720 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    172c:	88 81       	ld	r24, Y
    172e:	99 81       	ldd	r25, Y+1	; 0x01
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    1734:	ef e0       	ldi	r30, 0x0F	; 15
    1736:	ff e0       	ldi	r31, 0x0F	; 15
    1738:	86 a1       	ldd	r24, Z+38	; 0x26
    173a:	97 a1       	ldd	r25, Z+39	; 0x27
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	97 a3       	std	Z+39, r25	; 0x27
    1740:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    1742:	ed 85       	ldd	r30, Y+13	; 0x0d
    1744:	fe 85       	ldd	r31, Y+14	; 0x0e
    1746:	ce 01       	movw	r24, r28
    1748:	09 95       	icall
    174a:	06 c0       	rjmp	.+12     	; 0x1758 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    174c:	09 90       	ld	r0, Y+
    174e:	d8 81       	ld	r29, Y
    1750:	c0 2d       	mov	r28, r0
    1752:	20 97       	sbiw	r28, 0x00	; 0
    1754:	09 f0       	breq	.+2      	; 0x1758 <nwkDataReqTaskHandler+0x13c>
    1756:	6e cf       	rjmp	.-292    	; 0x1634 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	08 95       	ret

00001762 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1762:	e0 e5       	ldi	r30, 0x50	; 80
    1764:	f5 e0       	ldi	r31, 0x05	; 5
    1766:	8a ea       	ldi	r24, 0xAA	; 170
    1768:	9a e0       	ldi	r25, 0x0A	; 10
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    176a:	10 82       	st	Z, r1
    176c:	e7 57       	subi	r30, 0x77	; 119
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1770:	e8 17       	cp	r30, r24
    1772:	f9 07       	cpc	r31, r25
    1774:	d1 f7       	brne	.-12     	; 0x176a <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    1776:	08 95       	ret

00001778 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    1778:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <nwkFrameFrames>
    177c:	88 23       	and	r24, r24
    177e:	49 f0       	breq	.+18     	; 0x1792 <nwkFrameAlloc+0x1a>
    1780:	e9 ed       	ldi	r30, 0xD9	; 217
    1782:	f5 e0       	ldi	r31, 0x05	; 5
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	ac 01       	movw	r20, r24
    178a:	20 81       	ld	r18, Z
    178c:	21 11       	cpse	r18, r1
    178e:	22 c0       	rjmp	.+68     	; 0x17d4 <nwkFrameAlloc+0x5c>
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <nwkFrameAlloc+0x1e>
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1796:	69 e8       	ldi	r22, 0x89	; 137
    1798:	64 9f       	mul	r22, r20
    179a:	90 01       	movw	r18, r0
    179c:	65 9f       	mul	r22, r21
    179e:	30 0d       	add	r19, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	c9 01       	movw	r24, r18
    17a4:	80 5b       	subi	r24, 0xB0	; 176
    17a6:	9a 4f       	sbci	r25, 0xFA	; 250
    17a8:	fc 01       	movw	r30, r24
    17aa:	11 92       	st	Z+, r1
    17ac:	6a 95       	dec	r22
    17ae:	e9 f7       	brne	.-6      	; 0x17aa <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    17b0:	40 e1       	ldi	r20, 0x10	; 16
    17b2:	fc 01       	movw	r30, r24
    17b4:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    17b6:	ef 57       	subi	r30, 0x7F	; 127
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	2e 59       	subi	r18, 0x9E	; 158
    17bc:	3a 4f       	sbci	r19, 0xFA	; 250
    17be:	31 83       	std	Z+1, r19	; 0x01
    17c0:	20 83       	st	Z, r18
      nwkIb.lock++;
    17c2:	ef e0       	ldi	r30, 0x0F	; 15
    17c4:	ff e0       	ldi	r31, 0x0F	; 15
    17c6:	26 a1       	ldd	r18, Z+38	; 0x26
    17c8:	37 a1       	ldd	r19, Z+39	; 0x27
    17ca:	2f 5f       	subi	r18, 0xFF	; 255
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	37 a3       	std	Z+39, r19	; 0x27
    17d0:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    17d2:	08 95       	ret
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	e7 57       	subi	r30, 0x77	; 119
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    17da:	8a 30       	cpi	r24, 0x0A	; 10
    17dc:	91 05       	cpc	r25, r1
    17de:	a1 f6       	brne	.-88     	; 0x1788 <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
}
    17e4:	08 95       	ret

000017e6 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    17e6:	fc 01       	movw	r30, r24
    17e8:	10 82       	st	Z, r1
  nwkIb.lock--;
    17ea:	ef e0       	ldi	r30, 0x0F	; 15
    17ec:	ff e0       	ldi	r31, 0x0F	; 15
    17ee:	86 a1       	ldd	r24, Z+38	; 0x26
    17f0:	97 a1       	ldd	r25, Z+39	; 0x27
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	97 a3       	std	Z+39, r25	; 0x27
    17f6:	86 a3       	std	Z+38, r24	; 0x26
    17f8:	08 95       	ret

000017fa <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	41 f0       	breq	.+16     	; 0x180e <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    17fe:	fc 01       	movw	r30, r24
    1800:	e7 57       	subi	r30, 0x77	; 119
    1802:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1804:	8a e0       	ldi	r24, 0x0A	; 10
    1806:	ea 3a       	cpi	r30, 0xAA	; 170
    1808:	f8 07       	cpc	r31, r24
    180a:	18 f0       	brcs	.+6      	; 0x1812 <nwkFrameNext+0x18>
    180c:	12 c0       	rjmp	.+36     	; 0x1832 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    180e:	e0 e5       	ldi	r30, 0x50	; 80
    1810:	f5 e0       	ldi	r31, 0x05	; 5
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1812:	80 81       	ld	r24, Z
    1814:	88 23       	and	r24, r24
    1816:	21 f0       	breq	.+8      	; 0x1820 <nwkFrameNext+0x26>
    1818:	0f c0       	rjmp	.+30     	; 0x1838 <nwkFrameNext+0x3e>
    181a:	80 81       	ld	r24, Z
    181c:	81 11       	cpse	r24, r1
    181e:	0f c0       	rjmp	.+30     	; 0x183e <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1820:	e7 57       	subi	r30, 0x77	; 119
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	8a e0       	ldi	r24, 0x0A	; 10
    1826:	ea 3a       	cpi	r30, 0xAA	; 170
    1828:	f8 07       	cpc	r31, r24
    182a:	b8 f3       	brcs	.-18     	; 0x181a <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	08 95       	ret
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1838:	8e 2f       	mov	r24, r30
    183a:	9f 2f       	mov	r25, r31
    183c:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    183e:	8e 2f       	mov	r24, r30
    1840:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    1842:	08 95       	ret

00001844 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1844:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    1846:	dc 01       	movw	r26, r24
    1848:	ad 57       	subi	r26, 0x7D	; 125
    184a:	bf 4f       	sbci	r27, 0xFF	; 255
    184c:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    184e:	af e0       	ldi	r26, 0x0F	; 15
    1850:	bf e0       	ldi	r27, 0x0F	; 15
    1852:	14 96       	adiw	r26, 0x04	; 4
    1854:	9c 91       	ld	r25, X
    1856:	14 97       	sbiw	r26, 0x04	; 4
    1858:	9f 5f       	subi	r25, 0xFF	; 255
    185a:	14 96       	adiw	r26, 0x04	; 4
    185c:	9c 93       	st	X, r25
    185e:	14 97       	sbiw	r26, 0x04	; 4
    1860:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    1862:	8d 91       	ld	r24, X+
    1864:	9c 91       	ld	r25, X
    1866:	96 87       	std	Z+14, r25	; 0x0e
    1868:	85 87       	std	Z+13, r24	; 0x0d
    186a:	08 95       	ret

0000186c <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    186c:	ab ea       	ldi	r26, 0xAB	; 171
    186e:	ba e0       	ldi	r27, 0x0A	; 10
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	4f ef       	ldi	r20, 0xFF	; 255
    1876:	5f ef       	ldi	r21, 0xFF	; 255
    1878:	11 96       	adiw	r26, 0x01	; 1
    187a:	5c 93       	st	X, r21
    187c:	4e 93       	st	-X, r20
    187e:	fc 01       	movw	r30, r24
    1880:	ee 0f       	add	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	e8 1b       	sub	r30, r24
    188e:	f9 0b       	sbc	r31, r25
    1890:	e6 55       	subi	r30, 0x56	; 86
    1892:	f5 4f       	sbci	r31, 0xF5	; 245
    1894:	20 81       	ld	r18, Z
    1896:	2e 7f       	andi	r18, 0xFE	; 254
    1898:	20 83       	st	Z, r18
    189a:	14 96       	adiw	r26, 0x04	; 4
    189c:	1c 92       	st	X, r1
    189e:	14 97       	sbiw	r26, 0x04	; 4
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	17 96       	adiw	r26, 0x07	; 7
    18a4:	84 36       	cpi	r24, 0x64	; 100
    18a6:	91 05       	cpc	r25, r1
    18a8:	39 f7       	brne	.-50     	; 0x1878 <nwkRouteInit+0xc>
    18aa:	08 95       	ret

000018ac <NWK_RouteFindEntry>:
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	eb ea       	ldi	r30, 0xAB	; 171
    18b6:	fa e0       	ldi	r31, 0x0A	; 10
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	06 2f       	mov	r16, r22
    18be:	10 e0       	ldi	r17, 0x00	; 0
    18c0:	40 81       	ld	r20, Z
    18c2:	51 81       	ldd	r21, Z+1	; 0x01
    18c4:	48 17       	cp	r20, r24
    18c6:	59 07       	cpc	r21, r25
    18c8:	b1 f4       	brne	.+44     	; 0x18f6 <NWK_RouteFindEntry+0x4a>
    18ca:	d9 01       	movw	r26, r18
    18cc:	aa 0f       	add	r26, r26
    18ce:	bb 1f       	adc	r27, r27
    18d0:	aa 0f       	add	r26, r26
    18d2:	bb 1f       	adc	r27, r27
    18d4:	aa 0f       	add	r26, r26
    18d6:	bb 1f       	adc	r27, r27
    18d8:	a2 1b       	sub	r26, r18
    18da:	b3 0b       	sbc	r27, r19
    18dc:	a6 55       	subi	r26, 0x56	; 86
    18de:	b5 4f       	sbci	r27, 0xF5	; 245
    18e0:	4c 91       	ld	r20, X
    18e2:	46 95       	lsr	r20
    18e4:	41 70       	andi	r20, 0x01	; 1
    18e6:	c4 2f       	mov	r28, r20
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	d4 2f       	mov	r29, r20
    18ec:	c0 17       	cp	r28, r16
    18ee:	d1 07       	cpc	r29, r17
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <NWK_RouteFindEntry+0x4a>
    18f2:	cd 01       	movw	r24, r26
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <NWK_RouteFindEntry+0x5a>
    18f6:	2f 5f       	subi	r18, 0xFF	; 255
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	37 96       	adiw	r30, 0x07	; 7
    18fc:	24 36       	cpi	r18, 0x64	; 100
    18fe:	31 05       	cpc	r19, r1
    1900:	f9 f6       	brne	.-66     	; 0x18c0 <NWK_RouteFindEntry+0x14>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	08 95       	ret

00001910 <NWK_RouteNewEntry>:
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ea ea       	ldi	r30, 0xAA	; 170
    1916:	fa e0       	ldi	r31, 0x0A	; 10
    1918:	80 81       	ld	r24, Z
    191a:	80 fd       	sbrc	r24, 0
    191c:	0d c0       	rjmp	.+26     	; 0x1938 <NWK_RouteNewEntry+0x28>
    191e:	85 81       	ldd	r24, Z+5	; 0x05
    1920:	88 23       	and	r24, r24
    1922:	81 f0       	breq	.+32     	; 0x1944 <NWK_RouteNewEntry+0x34>
    1924:	10 97       	sbiw	r26, 0x00	; 0
    1926:	39 f0       	breq	.+14     	; 0x1936 <NWK_RouteNewEntry+0x26>
    1928:	15 96       	adiw	r26, 0x05	; 5
    192a:	9c 91       	ld	r25, X
    192c:	15 97       	sbiw	r26, 0x05	; 5
    192e:	89 17       	cp	r24, r25
    1930:	18 f4       	brcc	.+6      	; 0x1938 <NWK_RouteNewEntry+0x28>
    1932:	df 01       	movw	r26, r30
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <NWK_RouteNewEntry+0x28>
    1936:	df 01       	movw	r26, r30
    1938:	37 96       	adiw	r30, 0x07	; 7
    193a:	8d e0       	ldi	r24, 0x0D	; 13
    193c:	e6 36       	cpi	r30, 0x66	; 102
    193e:	f8 07       	cpc	r31, r24
    1940:	59 f7       	brne	.-42     	; 0x1918 <NWK_RouteNewEntry+0x8>
    1942:	fd 01       	movw	r30, r26
    1944:	80 81       	ld	r24, Z
    1946:	8d 70       	andi	r24, 0x0D	; 13
    1948:	80 63       	ori	r24, 0x30	; 48
    194a:	80 83       	st	Z, r24
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	85 83       	std	Z+5, r24	; 0x05
    1950:	cf 01       	movw	r24, r30
    1952:	08 95       	ret

00001954 <NWK_RouteFreeEntry>:
    1954:	fc 01       	movw	r30, r24
    1956:	80 81       	ld	r24, Z
    1958:	80 fd       	sbrc	r24, 0
    195a:	05 c0       	rjmp	.+10     	; 0x1966 <NWK_RouteFreeEntry+0x12>
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	9f ef       	ldi	r25, 0xFF	; 255
    1960:	92 83       	std	Z+2, r25	; 0x02
    1962:	81 83       	std	Z+1, r24	; 0x01
    1964:	15 82       	std	Z+5, r1	; 0x05
    1966:	08 95       	ret

00001968 <NWK_RouteNextHop>:
    1968:	a1 df       	rcall	.-190    	; 0x18ac <NWK_RouteFindEntry>
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	21 f0       	breq	.+8      	; 0x1976 <NWK_RouteNextHop+0xe>
    196e:	fc 01       	movw	r30, r24
    1970:	83 81       	ldd	r24, Z+3	; 0x03
    1972:	94 81       	ldd	r25, Z+4	; 0x04
    1974:	08 95       	ret
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	9f ef       	ldi	r25, 0xFF	; 255
    197a:	08 95       	ret

0000197c <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    197c:	97 df       	rcall	.-210    	; 0x18ac <NWK_RouteFindEntry>
  if (entry)
    197e:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    1980:	09 f0       	breq	.+2      	; 0x1984 <nwkRouteRemove+0x8>
    1982:	e8 cf       	rjmp	.-48     	; 0x1954 <NWK_RouteFreeEntry>
    1984:	08 95       	ret

00001986 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1990:	01 85       	ldd	r16, Z+9	; 0x09
    1992:	12 85       	ldd	r17, Z+10	; 0x0a
    1994:	11 23       	and	r17, r17
    1996:	2c f4       	brge	.+10     	; 0x19a2 <nwkRouteFrameReceived+0x1c>
    1998:	85 85       	ldd	r24, Z+13	; 0x0d
    199a:	96 85       	ldd	r25, Z+14	; 0x0e
    199c:	08 17       	cp	r16, r24
    199e:	19 07       	cpc	r17, r25
    19a0:	e1 f5       	brne	.+120    	; 0x1a1a <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    19a2:	85 81       	ldd	r24, Z+5	; 0x05
    19a4:	96 81       	ldd	r25, Z+6	; 0x06
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	c1 f1       	breq	.+112    	; 0x1a1a <nwkRouteFrameReceived+0x94>
    19aa:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	85 85       	ldd	r24, Z+13	; 0x0d
    19b0:	96 85       	ldd	r25, Z+14	; 0x0e
    19b2:	7c df       	rcall	.-264    	; 0x18ac <NWK_RouteFindEntry>
    19b4:	fc 01       	movw	r30, r24

  if (entry)
    19b6:	89 2b       	or	r24, r25
    19b8:	a1 f0       	breq	.+40     	; 0x19e2 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    19ba:	8f 81       	ldd	r24, Y+7	; 0x07
    19bc:	98 85       	ldd	r25, Y+8	; 0x08
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	f9 f4       	brne	.+62     	; 0x1a00 <nwkRouteFrameReceived+0x7a>
    19c2:	20 91 0f 0f 	lds	r18, 0x0F0F	; 0x800f0f <nwkIb>
    19c6:	30 91 10 0f 	lds	r19, 0x0F10	; 0x800f10 <nwkIb+0x1>
    19ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    19cc:	98 89       	ldd	r25, Y+16	; 0x10
    19ce:	28 17       	cp	r18, r24
    19d0:	39 07       	cpc	r19, r25
    19d2:	b1 f4       	brne	.+44     	; 0x1a00 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
    19d4:	14 83       	std	Z+4, r17	; 0x04
    19d6:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    19d8:	80 81       	ld	r24, Z
    19da:	8f 70       	andi	r24, 0x0F	; 15
    19dc:	80 63       	ori	r24, 0x30	; 48
    19de:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    19e0:	0a c0       	rjmp	.+20     	; 0x19f6 <nwkRouteFrameReceived+0x70>
    19e2:	96 df       	rcall	.-212    	; 0x1910 <NWK_RouteNewEntry>
    19e4:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	92 83       	std	Z+2, r25	; 0x02
    19ec:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	94 83       	std	Z+4, r25	; 0x04
    19f4:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    19f6:	cd 57       	subi	r28, 0x7D	; 125
    19f8:	df 4f       	sbci	r29, 0xFF	; 255
    19fa:	88 81       	ld	r24, Y
    19fc:	86 83       	std	Z+6, r24	; 0x06
    19fe:	0d c0       	rjmp	.+26     	; 0x1a1a <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    1a00:	83 81       	ldd	r24, Z+3	; 0x03
    1a02:	94 81       	ldd	r25, Z+4	; 0x04
    1a04:	08 17       	cp	r16, r24
    1a06:	19 07       	cpc	r17, r25
    1a08:	b1 f3       	breq	.-20     	; 0x19f6 <nwkRouteFrameReceived+0x70>
    1a0a:	96 81       	ldd	r25, Z+6	; 0x06
    1a0c:	de 01       	movw	r26, r28
    1a0e:	ad 57       	subi	r26, 0x7D	; 125
    1a10:	bf 4f       	sbci	r27, 0xFF	; 255
    1a12:	8c 91       	ld	r24, X
    1a14:	98 17       	cp	r25, r24
    1a16:	f0 f2       	brcs	.-68     	; 0x19d4 <nwkRouteFrameReceived+0x4e>
    1a18:	ee cf       	rjmp	.-36     	; 0x19f6 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    1a2a:	87 85       	ldd	r24, Z+15	; 0x0f
    1a2c:	90 89       	ldd	r25, Z+16	; 0x10
    1a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a30:	2f ef       	ldi	r18, 0xFF	; 255
    1a32:	92 07       	cpc	r25, r18
    1a34:	d9 f1       	breq	.+118    	; 0x1aac <nwkRouteFrameSent+0x88>
    1a36:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    1a38:	63 85       	ldd	r22, Z+11	; 0x0b
    1a3a:	63 fb       	bst	r22, 3
    1a3c:	66 27       	eor	r22, r22
    1a3e:	60 f9       	bld	r22, 0
    1a40:	35 df       	rcall	.-406    	; 0x18ac <NWK_RouteFindEntry>
    1a42:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    1a44:	89 2b       	or	r24, r25
    1a46:	91 f1       	breq	.+100    	; 0x1aac <nwkRouteFrameSent+0x88>
    1a48:	8c 91       	ld	r24, X
    1a4a:	80 fd       	sbrc	r24, 0
    1a4c:	2f c0       	rjmp	.+94     	; 0x1aac <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    1a4e:	fe 01       	movw	r30, r28
    1a50:	ed 57       	subi	r30, 0x7D	; 125
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	81 11       	cpse	r24, r1
    1a58:	19 c0       	rjmp	.+50     	; 0x1a8c <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1a5a:	8c 91       	ld	r24, X
    1a5c:	8f 70       	andi	r24, 0x0F	; 15
    1a5e:	80 63       	ori	r24, 0x30	; 48
    1a60:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    1a62:	15 96       	adiw	r26, 0x05	; 5
    1a64:	8c 91       	ld	r24, X
    1a66:	15 97       	sbiw	r26, 0x05	; 5
    1a68:	8f 5f       	subi	r24, 0xFF	; 255
    1a6a:	15 96       	adiw	r26, 0x05	; 5
    1a6c:	8c 93       	st	X, r24
    1a6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a70:	e9 f4       	brne	.+58     	; 0x1aac <nwkRouteFrameSent+0x88>
    1a72:	ef ea       	ldi	r30, 0xAF	; 175
    1a74:	fa e0       	ldi	r31, 0x0A	; 10
    1a76:	2b e6       	ldi	r18, 0x6B	; 107
    1a78:	3d e0       	ldi	r19, 0x0D	; 13
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1a7a:	80 81       	ld	r24, Z
    1a7c:	86 95       	lsr	r24
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	80 83       	st	Z, r24
    1a82:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1a84:	e2 17       	cp	r30, r18
    1a86:	f3 07       	cpc	r31, r19
    1a88:	c1 f7       	brne	.-16     	; 0x1a7a <nwkRouteFrameSent+0x56>
    1a8a:	10 c0       	rjmp	.+32     	; 0x1aac <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    1a8c:	9c 91       	ld	r25, X
    1a8e:	89 2f       	mov	r24, r25
    1a90:	82 95       	swap	r24
    1a92:	8f 70       	andi	r24, 0x0F	; 15
    1a94:	81 5f       	subi	r24, 0xF1	; 241
    1a96:	8f 70       	andi	r24, 0x0F	; 15
    1a98:	28 2f       	mov	r18, r24
    1a9a:	22 95       	swap	r18
    1a9c:	20 7f       	andi	r18, 0xF0	; 240
    1a9e:	9f 70       	andi	r25, 0x0F	; 15
    1aa0:	92 2b       	or	r25, r18
    1aa2:	9c 93       	st	X, r25
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	54 df       	rcall	.-344    	; 0x1954 <NWK_RouteFreeEntry>
  }
}
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1ab8:	87 85       	ldd	r24, Z+15	; 0x0f
    1aba:	90 89       	ldd	r25, Z+16	; 0x10
    1abc:	8f 3f       	cpi	r24, 0xFF	; 255
    1abe:	2f ef       	ldi	r18, 0xFF	; 255
    1ac0:	92 07       	cpc	r25, r18
    1ac2:	29 f4       	brne	.+10     	; 0x1ace <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	90 87       	std	Z+8, r25	; 0x08
    1aca:	87 83       	std	Z+7, r24	; 0x07
    1acc:	0e c0       	rjmp	.+28     	; 0x1aea <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    1ace:	23 85       	ldd	r18, Z+11	; 0x0b
    1ad0:	22 ff       	sbrs	r18, 2
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    1ad4:	90 87       	std	Z+8, r25	; 0x08
    1ad6:	87 83       	std	Z+7, r24	; 0x07
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <nwkRoutePrepareTx+0x38>
    1ada:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    1adc:	63 85       	ldd	r22, Z+11	; 0x0b
    1ade:	63 fb       	bst	r22, 3
    1ae0:	66 27       	eor	r22, r22
    1ae2:	60 f9       	bld	r22, 0
    1ae4:	41 df       	rcall	.-382    	; 0x1968 <NWK_RouteNextHop>
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	08 95       	ret

00001af0 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1af0:	af 92       	push	r10
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    1b04:	1b 85       	ldd	r17, Y+11	; 0x0b
    1b06:	13 fb       	bst	r17, 3
    1b08:	11 27       	eor	r17, r17
    1b0a:	10 f9       	bld	r17, 0
    1b0c:	cf 84       	ldd	r12, Y+15	; 0x0f
    1b0e:	d8 88       	ldd	r13, Y+16	; 0x10
    1b10:	61 2f       	mov	r22, r17
    1b12:	c6 01       	movw	r24, r12
    1b14:	29 df       	rcall	.-430    	; 0x1968 <NWK_RouteNextHop>
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	59 f0       	breq	.+22     	; 0x1b30 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e9 57       	subi	r30, 0x79	; 121
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	11 82       	std	Z+1, r1	; 0x01
    1b22:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1b24:	31 97       	sbiw	r30, 0x01	; 1
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	71 d3       	rcall	.+1762   	; 0x2210 <nwkTxFrame>
    1b2e:	22 c0       	rjmp	.+68     	; 0x1b74 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    1b30:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    1b32:	be 84       	ldd	r11, Y+14	; 0x0e
    1b34:	21 de       	rcall	.-958    	; 0x1778 <nwkFrameAlloc>
    1b36:	7c 01       	movw	r14, r24
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
    1b3a:	d1 f0       	breq	.+52     	; 0x1b70 <nwkRouteFrame+0x80>
    1b3c:	83 de       	rcall	.-762    	; 0x1844 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    1b3e:	f7 01       	movw	r30, r14
    1b40:	81 81       	ldd	r24, Z+1	; 0x01
    1b42:	8a 5f       	subi	r24, 0xFA	; 250
    1b44:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    1b46:	e9 57       	subi	r30, 0x79	; 121
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	11 82       	std	Z+1, r1	; 0x01
    1b4c:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    1b4e:	f7 01       	movw	r30, r14
    1b50:	b0 8a       	std	Z+16, r11	; 0x10
    1b52:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    1b54:	ef 57       	subi	r30, 0x7F	; 127
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	01 90       	ld	r0, Z+
    1b5a:	f0 81       	ld	r31, Z
    1b5c:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	80 83       	st	Z, r24
  command->srcAddr = src;
    1b62:	b2 82       	std	Z+2, r11	; 0x02
    1b64:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
    1b66:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
    1b68:	c3 82       	std	Z+3, r12	; 0x03
    1b6a:	15 83       	std	Z+5, r17	; 0x05
    1b6c:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    1b6e:	50 d3       	rcall	.+1696   	; 0x2210 <nwkTxFrame>
    1b70:	ce 01       	movw	r24, r28
    1b72:	39 de       	rcall	.-910    	; 0x17e6 <nwkFrameFree>
  }
}
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	08 95       	ret

00001b88 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    1b88:	fc 01       	movw	r30, r24
    1b8a:	21 85       	ldd	r18, Z+9	; 0x09
    1b8c:	26 30       	cpi	r18, 0x06	; 6
    1b8e:	49 f4       	brne	.+18     	; 0x1ba2 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1b90:	07 80       	ldd	r0, Z+7	; 0x07
    1b92:	f0 85       	ldd	r31, Z+8	; 0x08
    1b94:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    1b96:	65 81       	ldd	r22, Z+5	; 0x05
    1b98:	83 81       	ldd	r24, Z+3	; 0x03
    1b9a:	94 81       	ldd	r25, Z+4	; 0x04
    1b9c:	ef de       	rcall	.-546    	; 0x197c <nwkRouteRemove>

  return true;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    1ba2:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    1ba4:	08 95       	ret

00001ba6 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	19 96       	adiw	r26, 0x09	; 9
    1baa:	2c 91       	ld	r18, X
    1bac:	19 97       	sbiw	r26, 0x09	; 9
    1bae:	22 23       	and	r18, r18
    1bb0:	71 f0       	breq	.+28     	; 0x1bce <nwkRxServiceDataInd+0x28>
    return false;

  switch (ind->data[0])
    1bb2:	17 96       	adiw	r26, 0x07	; 7
    1bb4:	ed 91       	ld	r30, X+
    1bb6:	fc 91       	ld	r31, X
    1bb8:	18 97       	sbiw	r26, 0x08	; 8
    1bba:	20 81       	ld	r18, Z
    1bbc:	22 23       	and	r18, r18
    1bbe:	19 f0       	breq	.+6      	; 0x1bc6 <nwkRxServiceDataInd+0x20>
    1bc0:	21 30       	cpi	r18, 0x01	; 1
    1bc2:	19 f0       	breq	.+6      	; 0x1bca <nwkRxServiceDataInd+0x24>
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <nwkRxServiceDataInd+0x2c>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    1bc6:	b5 c3       	rjmp	.+1898   	; 0x2332 <nwkTxAckReceived>
    1bc8:	08 95       	ret

#ifdef NWK_ENABLE_ROUTING
    case NWK_COMMAND_ROUTE_ERROR:
      return nwkRouteErrorReceived(ind);
    1bca:	de cf       	rjmp	.-68     	; 0x1b88 <nwkRouteErrorReceived>
    1bcc:	08 95       	ret
    1bce:	80 e0       	ldi	r24, 0x00	; 0
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    1bd0:	08 95       	ret
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    1bd4:	08 95       	ret

00001bd6 <nwkRxDuplicateRejectionTimerHandler>:
  }
}
    1bd6:	bc 01       	movw	r22, r24
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1bd8:	e8 e7       	ldi	r30, 0x78	; 120
    1bda:	fd e0       	ldi	r31, 0x0D	; 13
    1bdc:	22 e7       	ldi	r18, 0x72	; 114
    1bde:	3e e0       	ldi	r19, 0x0E	; 14
  bool restart = false;
    1be0:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    1be2:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1be4:	90 81       	ld	r25, Z
    1be6:	99 23       	and	r25, r25
    1be8:	19 f0       	breq	.+6      	; 0x1bf0 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1bea:	91 50       	subi	r25, 0x01	; 1
    1bec:	90 83       	st	Z, r25
      restart = true;
    1bee:	45 2f       	mov	r20, r21
    1bf0:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1bf2:	e2 17       	cp	r30, r18
    1bf4:	f3 07       	cpc	r31, r19
    1bf6:	b1 f7       	brne	.-20     	; 0x1be4 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    1bf8:	44 23       	and	r20, r20
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    1bfc:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
    1bfe:	64 c6       	rjmp	.+3272   	; 0x28c8 <SYS_TimerStart>
    1c00:	08 95       	ret

00001c02 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    1c02:	e8 e7       	ldi	r30, 0x78	; 120
    1c04:	fd e0       	ldi	r31, 0x0D	; 13
    1c06:	82 e7       	ldi	r24, 0x72	; 114
    1c08:	9e e0       	ldi	r25, 0x0E	; 14
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    1c0a:	10 82       	st	Z, r1
    1c0c:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1c0e:	e8 17       	cp	r30, r24
    1c10:	f9 07       	cpc	r31, r25
    1c12:	d9 f7       	brne	.-10     	; 0x1c0a <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1c14:	e6 e6       	ldi	r30, 0x66	; 102
    1c16:	fd e0       	ldi	r31, 0x0D	; 13
    1c18:	84 e6       	ldi	r24, 0x64	; 100
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e0       	ldi	r26, 0x00	; 0
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	86 83       	std	Z+6, r24	; 0x06
    1c22:	97 83       	std	Z+7, r25	; 0x07
    1c24:	a0 87       	std	Z+8, r26	; 0x08
    1c26:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1c28:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    1c2a:	8b ee       	ldi	r24, 0xEB	; 235
    1c2c:	9d e0       	ldi	r25, 0x0D	; 13
    1c2e:	94 87       	std	Z+12, r25	; 0x0c
    1c30:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1c32:	63 ed       	ldi	r22, 0xD3	; 211
    1c34:	7d e0       	ldi	r23, 0x0D	; 13
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	79 cc       	rjmp	.-1806   	; 0x152c <NWK_OpenEndpoint>
    1c3a:	08 95       	ret

00001c3c <PHY_DataInd>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1c40:	dc 01       	movw	r26, r24
    1c42:	ed 91       	ld	r30, X+
    1c44:	fc 91       	ld	r31, X
    1c46:	11 97       	sbiw	r26, 0x01	; 1
    1c48:	21 81       	ldd	r18, Z+1	; 0x01
    1c4a:	28 38       	cpi	r18, 0x88	; 136
    1c4c:	f1 f4       	brne	.+60     	; 0x1c8a <PHY_DataInd+0x4e>
    1c4e:	20 81       	ld	r18, Z
    1c50:	2f 7d       	andi	r18, 0xDF	; 223
    1c52:	21 34       	cpi	r18, 0x41	; 65
    1c54:	d1 f4       	brne	.+52     	; 0x1c8a <PHY_DataInd+0x4e>
    1c56:	12 96       	adiw	r26, 0x02	; 2
    1c58:	2c 91       	ld	r18, X
    1c5a:	20 31       	cpi	r18, 0x10	; 16
    1c5c:	b0 f0       	brcs	.+44     	; 0x1c8a <PHY_DataInd+0x4e>
    1c5e:	ec 01       	movw	r28, r24
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc()))
    1c60:	8b dd       	rcall	.-1258   	; 0x1778 <nwkFrameAlloc>
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	91 f0       	breq	.+36     	; 0x1c8a <PHY_DataInd+0x4e>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
    1c66:	20 e2       	ldi	r18, 0x20	; 32
    1c68:	fc 01       	movw	r30, r24
    1c6a:	20 83       	st	Z, r18
  frame->size = ind->size;
    1c6c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c6e:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	ed 57       	subi	r30, 0x7D	; 125
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
    1c78:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7a:	31 96       	adiw	r30, 0x01	; 1
    1c7c:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
    1c7e:	4a 81       	ldd	r20, Y+2	; 0x02
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	68 81       	ld	r22, Y
    1c84:	79 81       	ldd	r23, Y+1	; 0x01
    1c86:	02 96       	adiw	r24, 0x02	; 2
    1c88:	24 d7       	rcall	.+3656   	; 0x2ad2 <memcpy>
}
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    1c90:	80 93 73 0d 	sts	0x0D73, r24	; 0x800d73 <nwkRxAckControl>
    1c94:	08 95       	ret

00001c96 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1c96:	2f 92       	push	r2
    1c98:	3f 92       	push	r3
    1c9a:	4f 92       	push	r4
    1c9c:	5f 92       	push	r5
    1c9e:	6f 92       	push	r6
    1ca0:	7f 92       	push	r7
    1ca2:	8f 92       	push	r8
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	bf 92       	push	r11
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	2c 97       	sbiw	r28, 0x0c	; 12
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1cca:	00 e0       	ldi	r16, 0x00	; 0
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1cce:	0f 2e       	mov	r0, r31
    1cd0:	f4 e2       	ldi	r31, 0x24	; 36
    1cd2:	bf 2e       	mov	r11, r31
    1cd4:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1cd6:	0f 2e       	mov	r0, r31
    1cd8:	ff e0       	ldi	r31, 0x0F	; 15
    1cda:	ef 2e       	mov	r14, r31
    1cdc:	ff e0       	ldi	r31, 0x0F	; 15
    1cde:	ff 2e       	mov	r15, r31
    1ce0:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1ce2:	44 24       	eor	r4, r4
    1ce4:	43 94       	inc	r4
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1ce6:	68 94       	set
    1ce8:	aa 24       	eor	r10, r10
    1cea:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1cec:	68 94       	set
    1cee:	77 24       	eor	r7, r7
    1cf0:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1cf2:	68 94       	set
    1cf4:	66 24       	eor	r6, r6
    1cf6:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1cf8:	31 2c       	mov	r3, r1
    1cfa:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1cfc:	0f 2e       	mov	r0, r31
    1cfe:	f5 e1       	ldi	r31, 0x15	; 21
    1d00:	5f 2e       	mov	r5, r31
    1d02:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1d04:	cc 24       	eor	r12, r12
    1d06:	c3 94       	inc	r12
    1d08:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1d0a:	da c1       	rjmp	.+948    	; 0x20c0 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
    1d0c:	d8 01       	movw	r26, r16
    1d0e:	8c 91       	ld	r24, X
    1d10:	82 32       	cpi	r24, 0x22	; 34
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <nwkRxTaskHandler+0x80>
    1d14:	05 c1       	rjmp	.+522    	; 0x1f20 <nwkRxTaskHandler+0x28a>
    1d16:	18 f4       	brcc	.+6      	; 0x1d1e <nwkRxTaskHandler+0x88>
    1d18:	80 32       	cpi	r24, 0x20	; 32
    1d1a:	41 f0       	breq	.+16     	; 0x1d2c <nwkRxTaskHandler+0x96>
    1d1c:	d1 c1       	rjmp	.+930    	; 0x20c0 <nwkRxTaskHandler+0x42a>
    1d1e:	83 32       	cpi	r24, 0x23	; 35
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <nwkRxTaskHandler+0x8e>
    1d22:	c9 c1       	rjmp	.+914    	; 0x20b6 <nwkRxTaskHandler+0x420>
    1d24:	84 32       	cpi	r24, 0x24	; 36
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <nwkRxTaskHandler+0x94>
    1d28:	c9 c1       	rjmp	.+914    	; 0x20bc <nwkRxTaskHandler+0x426>
    1d2a:	ca c1       	rjmp	.+916    	; 0x20c0 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1d30:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1d32:	98 2f       	mov	r25, r24
    1d34:	9a 70       	andi	r25, 0x0A	; 10
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <nwkRxTaskHandler+0xa4>
    1d38:	c3 c1       	rjmp	.+902    	; 0x20c0 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1d3a:	25 81       	ldd	r18, Z+5	; 0x05
    1d3c:	36 81       	ldd	r19, Z+6	; 0x06
    1d3e:	2f 3f       	cpi	r18, 0xFF	; 255
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	91 f4       	brne	.+36     	; 0x1d68 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1d44:	d8 01       	movw	r26, r16
    1d46:	1f 96       	adiw	r26, 0x0f	; 15
    1d48:	8d 91       	ld	r24, X+
    1d4a:	9c 91       	ld	r25, X
    1d4c:	50 97       	sbiw	r26, 0x10	; 16
    1d4e:	f7 01       	movw	r30, r14
    1d50:	20 81       	ld	r18, Z
    1d52:	31 81       	ldd	r19, Z+1	; 0x01
    1d54:	28 17       	cp	r18, r24
    1d56:	39 07       	cpc	r19, r25
    1d58:	19 f0       	breq	.+6      	; 0x1d60 <nwkRxTaskHandler+0xca>
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <nwkRxTaskHandler+0xca>
    1d5e:	b0 c1       	rjmp	.+864    	; 0x20c0 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1d60:	e2 e2       	ldi	r30, 0x22	; 34
    1d62:	d8 01       	movw	r26, r16
    1d64:	ec 93       	st	X, r30
    1d66:	ac c1       	rjmp	.+856    	; 0x20c0 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1d68:	d8 01       	movw	r26, r16
    1d6a:	1f 96       	adiw	r26, 0x0f	; 15
    1d6c:	2d 91       	ld	r18, X+
    1d6e:	3c 91       	ld	r19, X
    1d70:	50 97       	sbiw	r26, 0x10	; 16
    1d72:	2f 3f       	cpi	r18, 0xFF	; 255
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	11 f4       	brne	.+4      	; 0x1d7c <nwkRxTaskHandler+0xe6>
    1d78:	80 fd       	sbrc	r24, 0
    1d7a:	a2 c1       	rjmp	.+836    	; 0x20c0 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1d7c:	f7 01       	movw	r30, r14
    1d7e:	20 81       	ld	r18, Z
    1d80:	31 81       	ldd	r19, Z+1	; 0x01
    1d82:	d8 01       	movw	r26, r16
    1d84:	1d 96       	adiw	r26, 0x0d	; 13
    1d86:	8d 91       	ld	r24, X+
    1d88:	9c 91       	ld	r25, X
    1d8a:	1e 97       	sbiw	r26, 0x0e	; 14
    1d8c:	28 17       	cp	r18, r24
    1d8e:	39 07       	cpc	r19, r25
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <nwkRxTaskHandler+0xfe>
    1d92:	96 c1       	rjmp	.+812    	; 0x20c0 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1d94:	c8 01       	movw	r24, r16
    1d96:	f7 dd       	rcall	.-1042   	; 0x1986 <nwkRouteFrameReceived>
    1d98:	e4 e7       	ldi	r30, 0x74	; 116
    1d9a:	fd e0       	ldi	r31, 0x0D	; 13
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1da0:	83 2c       	mov	r8, r3
    1da2:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1da4:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1da6:	44 81       	ldd	r20, Z+4	; 0x04
    1da8:	44 23       	and	r20, r20
    1daa:	09 f4       	brne	.+2      	; 0x1dae <nwkRxTaskHandler+0x118>
    1dac:	74 c0       	rjmp	.+232    	; 0x1e96 <nwkRxTaskHandler+0x200>
    1dae:	d8 01       	movw	r26, r16
    1db0:	1d 96       	adiw	r26, 0x0d	; 13
    1db2:	6d 91       	ld	r22, X+
    1db4:	7c 91       	ld	r23, X
    1db6:	1e 97       	sbiw	r26, 0x0e	; 14
    1db8:	40 81       	ld	r20, Z
    1dba:	51 81       	ldd	r21, Z+1	; 0x01
    1dbc:	64 17       	cp	r22, r20
    1dbe:	75 07       	cpc	r23, r21
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <nwkRxTaskHandler+0x12e>
    1dc2:	6a c0       	rjmp	.+212    	; 0x1e98 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1dc4:	1c 96       	adiw	r26, 0x0c	; 12
    1dc6:	8c 91       	ld	r24, X
    1dc8:	1c 97       	sbiw	r26, 0x0c	; 12
    1dca:	f9 01       	movw	r30, r18
    1dcc:	ee 0f       	add	r30, r30
    1dce:	ff 1f       	adc	r31, r31
    1dd0:	ee 0f       	add	r30, r30
    1dd2:	ff 1f       	adc	r31, r31
    1dd4:	e2 0f       	add	r30, r18
    1dd6:	f3 1f       	adc	r31, r19
    1dd8:	ec 58       	subi	r30, 0x8C	; 140
    1dda:	f2 4f       	sbci	r31, 0xF2	; 242
    1ddc:	92 81       	ldd	r25, Z+2	; 0x02
    1dde:	98 1b       	sub	r25, r24

      if (diff < 8)
    1de0:	98 30       	cpi	r25, 0x08	; 8
    1de2:	08 f0       	brcs	.+2      	; 0x1de6 <nwkRxTaskHandler+0x150>
    1de4:	3e c0       	rjmp	.+124    	; 0x1e62 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
    1de6:	f9 01       	movw	r30, r18
    1de8:	ee 0f       	add	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	e2 0f       	add	r30, r18
    1df2:	f3 1f       	adc	r31, r19
    1df4:	ec 58       	subi	r30, 0x8C	; 140
    1df6:	f2 4f       	sbci	r31, 0xF2	; 242
    1df8:	83 81       	ldd	r24, Z+3	; 0x03
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	09 2e       	mov	r0, r25
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <nwkRxTaskHandler+0x170>
    1e02:	55 95       	asr	r21
    1e04:	47 95       	ror	r20
    1e06:	0a 94       	dec	r0
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <nwkRxTaskHandler+0x16c>
    1e0a:	40 ff       	sbrs	r20, 0
    1e0c:	17 c0       	rjmp	.+46     	; 0x1e3c <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1e0e:	f7 01       	movw	r30, r14
    1e10:	20 81       	ld	r18, Z
    1e12:	31 81       	ldd	r19, Z+1	; 0x01
    1e14:	17 96       	adiw	r26, 0x07	; 7
    1e16:	8d 91       	ld	r24, X+
    1e18:	9c 91       	ld	r25, X
    1e1a:	18 97       	sbiw	r26, 0x08	; 8
    1e1c:	28 17       	cp	r18, r24
    1e1e:	39 07       	cpc	r19, r25
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <nwkRxTaskHandler+0x18e>
    1e22:	4e c1       	rjmp	.+668    	; 0x20c0 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    1e24:	1b 96       	adiw	r26, 0x0b	; 11
    1e26:	6c 91       	ld	r22, X
    1e28:	1b 97       	sbiw	r26, 0x0b	; 11
    1e2a:	63 fb       	bst	r22, 3
    1e2c:	66 27       	eor	r22, r22
    1e2e:	60 f9       	bld	r22, 0
    1e30:	1f 96       	adiw	r26, 0x0f	; 15
    1e32:	8d 91       	ld	r24, X+
    1e34:	9c 91       	ld	r25, X
    1e36:	50 97       	sbiw	r26, 0x10	; 16
    1e38:	a1 dd       	rcall	.-1214   	; 0x197c <nwkRouteRemove>
    1e3a:	42 c1       	rjmp	.+644    	; 0x20c0 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	ee 0f       	add	r30, r30
    1e40:	ff 1f       	adc	r31, r31
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	2e 0f       	add	r18, r30
    1e48:	3f 1f       	adc	r19, r31
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	ec 58       	subi	r30, 0x8C	; 140
    1e4e:	f2 4f       	sbci	r31, 0xF2	; 242
    1e50:	96 01       	movw	r18, r12
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <nwkRxTaskHandler+0x1c2>
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	9a 95       	dec	r25
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <nwkRxTaskHandler+0x1be>
    1e5c:	82 2b       	or	r24, r18
    1e5e:	83 83       	std	Z+3, r24	; 0x03
    1e60:	36 c1       	rjmp	.+620    	; 0x20ce <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    1e62:	f9 01       	movw	r30, r18
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	2e 0f       	add	r18, r30
    1e6e:	3f 1f       	adc	r19, r31
    1e70:	f9 01       	movw	r30, r18
    1e72:	ec 58       	subi	r30, 0x8C	; 140
    1e74:	f2 4f       	sbci	r31, 0xF2	; 242
    1e76:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1e78:	83 81       	ldd	r24, Z+3	; 0x03
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	91 95       	neg	r25
    1e80:	a9 01       	movw	r20, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <nwkRxTaskHandler+0x1f2>
    1e84:	44 0f       	add	r20, r20
    1e86:	55 1f       	adc	r21, r21
    1e88:	9a 95       	dec	r25
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <nwkRxTaskHandler+0x1ee>
    1e8c:	ca 01       	movw	r24, r20
    1e8e:	81 60       	ori	r24, 0x01	; 1
    1e90:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1e92:	54 82       	std	Z+4, r5	; 0x04
    1e94:	1c c1       	rjmp	.+568    	; 0x20ce <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    1e96:	4f 01       	movw	r8, r30
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1e9c:	82 33       	cpi	r24, 0x32	; 50
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <nwkRxTaskHandler+0x20e>
    1ea2:	80 cf       	rjmp	.-256    	; 0x1da4 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1ea4:	81 14       	cp	r8, r1
    1ea6:	91 04       	cpc	r9, r1
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <nwkRxTaskHandler+0x216>
    1eaa:	0a c1       	rjmp	.+532    	; 0x20c0 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1eac:	d8 01       	movw	r26, r16
    1eae:	1d 96       	adiw	r26, 0x0d	; 13
    1eb0:	8d 91       	ld	r24, X+
    1eb2:	9c 91       	ld	r25, X
    1eb4:	1e 97       	sbiw	r26, 0x0e	; 14
    1eb6:	f4 01       	movw	r30, r8
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1ebc:	1c 96       	adiw	r26, 0x0c	; 12
    1ebe:	8c 91       	ld	r24, X
    1ec0:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1ec2:	43 82       	std	Z+3, r4	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1ec4:	54 82       	std	Z+4, r5	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1ec6:	86 e6       	ldi	r24, 0x66	; 102
    1ec8:	9d e0       	ldi	r25, 0x0D	; 13
    1eca:	fe d4       	rcall	.+2556   	; 0x28c8 <SYS_TimerStart>
    1ecc:	00 c1       	rjmp	.+512    	; 0x20ce <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1ece:	d7 01       	movw	r26, r14
    1ed0:	2d 91       	ld	r18, X+
    1ed2:	3c 91       	ld	r19, X
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	87 85       	ldd	r24, Z+15	; 0x0f
    1ed8:	90 89       	ldd	r25, Z+16	; 0x10
    1eda:	28 17       	cp	r18, r24
    1edc:	39 07       	cpc	r19, r25
    1ede:	81 f0       	breq	.+32     	; 0x1f00 <nwkRxTaskHandler+0x26a>
    1ee0:	43 85       	ldd	r20, Z+11	; 0x0b
    1ee2:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1ee4:	0b c0       	rjmp	.+22     	; 0x1efc <nwkRxTaskHandler+0x266>
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	e1 d1       	rcall	.+962    	; 0x22ac <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1eea:	d7 01       	movw	r26, r14
    1eec:	2d 91       	ld	r18, X+
    1eee:	3c 91       	ld	r19, X
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	87 85       	ldd	r24, Z+15	; 0x0f
    1ef4:	90 89       	ldd	r25, Z+16	; 0x10
    1ef6:	28 17       	cp	r18, r24
    1ef8:	39 07       	cpc	r19, r25
    1efa:	11 f0       	breq	.+4      	; 0x1f00 <nwkRxTaskHandler+0x26a>
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	21 f4       	brne	.+8      	; 0x1f08 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1f00:	e2 e2       	ldi	r30, 0x22	; 34
    1f02:	d8 01       	movw	r26, r16
    1f04:	ec 93       	st	X, r30
    1f06:	dc c0       	rjmp	.+440    	; 0x20c0 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1f08:	d8 01       	movw	r26, r16
    1f0a:	17 96       	adiw	r26, 0x07	; 7
    1f0c:	8d 91       	ld	r24, X+
    1f0e:	9c 91       	ld	r25, X
    1f10:	18 97       	sbiw	r26, 0x08	; 8
    1f12:	82 17       	cp	r24, r18
    1f14:	93 07       	cpc	r25, r19
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <nwkRxTaskHandler+0x284>
    1f18:	d3 c0       	rjmp	.+422    	; 0x20c0 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1f1a:	e3 e2       	ldi	r30, 0x23	; 35
    1f1c:	ec 93       	st	X, r30
    1f1e:	d0 c0       	rjmp	.+416    	; 0x20c0 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1f20:	10 92 73 0d 	sts	0x0D73, r1	; 0x800d73 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1f24:	d8 01       	movw	r26, r16
    1f26:	51 96       	adiw	r26, 0x11	; 17
    1f28:	8c 91       	ld	r24, X
    1f2a:	51 97       	sbiw	r26, 0x11	; 17
    1f2c:	82 95       	swap	r24
    1f2e:	8f 70       	andi	r24, 0x0F	; 15
    1f30:	e8 2f       	mov	r30, r24
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	ee 0f       	add	r30, r30
    1f36:	ff 1f       	adc	r31, r31
    1f38:	eb 5e       	subi	r30, 0xEB	; 235
    1f3a:	f0 4f       	sbci	r31, 0xF0	; 240
    1f3c:	01 90       	ld	r0, Z+
    1f3e:	f0 81       	ld	r31, Z
    1f40:	e0 2d       	mov	r30, r0
    1f42:	30 97       	sbiw	r30, 0x00	; 0
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <nwkRxTaskHandler+0x2b2>
    1f46:	60 c0       	rjmp	.+192    	; 0x2008 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    1f48:	1d 96       	adiw	r26, 0x0d	; 13
    1f4a:	2d 91       	ld	r18, X+
    1f4c:	3c 91       	ld	r19, X
    1f4e:	1e 97       	sbiw	r26, 0x0e	; 14
    1f50:	3a 83       	std	Y+2, r19	; 0x02
    1f52:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1f54:	1f 96       	adiw	r26, 0x0f	; 15
    1f56:	4d 91       	ld	r20, X+
    1f58:	5c 91       	ld	r21, X
    1f5a:	50 97       	sbiw	r26, 0x10	; 16
    1f5c:	5c 83       	std	Y+4, r21	; 0x04
    1f5e:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1f60:	51 96       	adiw	r26, 0x11	; 17
    1f62:	9c 91       	ld	r25, X
    1f64:	51 97       	sbiw	r26, 0x11	; 17
    1f66:	9f 70       	andi	r25, 0x0F	; 15
    1f68:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1f6a:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    1f6c:	af 57       	subi	r26, 0x7F	; 127
    1f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f70:	8d 91       	ld	r24, X+
    1f72:	9c 91       	ld	r25, X
    1f74:	99 87       	std	Y+9, r25	; 0x09
    1f76:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1f78:	b8 01       	movw	r22, r16
    1f7a:	6e 5f       	subi	r22, 0xFE	; 254
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    1f7e:	86 1b       	sub	r24, r22
    1f80:	97 0b       	sbc	r25, r23
    1f82:	d8 01       	movw	r26, r16
    1f84:	11 96       	adiw	r26, 0x01	; 1
    1f86:	9c 91       	ld	r25, X
    1f88:	11 97       	sbiw	r26, 0x01	; 1
    1f8a:	98 1b       	sub	r25, r24
    1f8c:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1f8e:	ad 57       	subi	r26, 0x7D	; 125
    1f90:	bf 4f       	sbci	r27, 0xFF	; 255
    1f92:	8c 91       	ld	r24, X
    1f94:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1f96:	11 96       	adiw	r26, 0x01	; 1
    1f98:	8c 91       	ld	r24, X
    1f9a:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1f9c:	d8 01       	movw	r26, r16
    1f9e:	1b 96       	adiw	r26, 0x0b	; 11
    1fa0:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1fa2:	69 2f       	mov	r22, r25
    1fa4:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1fa6:	92 fd       	sbrc	r25, 2
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <nwkRxTaskHandler+0x318>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <nwkRxTaskHandler+0x31a>
    1fae:	80 e2       	ldi	r24, 0x20	; 32
    1fb0:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1fb2:	93 fd       	sbrc	r25, 3
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <nwkRxTaskHandler+0x324>
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <nwkRxTaskHandler+0x326>
    1fba:	90 e4       	ldi	r25, 0x40	; 64
    1fbc:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1fbe:	4f 3f       	cpi	r20, 0xFF	; 255
    1fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <nwkRxTaskHandler+0x332>
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <nwkRxTaskHandler+0x334>
    1fc8:	96 2d       	mov	r25, r6
    1fca:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1fcc:	d8 01       	movw	r26, r16
    1fce:	19 96       	adiw	r26, 0x09	; 9
    1fd0:	4d 91       	ld	r20, X+
    1fd2:	5c 91       	ld	r21, X
    1fd4:	1a 97       	sbiw	r26, 0x0a	; 10
    1fd6:	24 17       	cp	r18, r20
    1fd8:	35 07       	cpc	r19, r21
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <nwkRxTaskHandler+0x34a>
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <nwkRxTaskHandler+0x34c>
    1fe0:	97 2d       	mov	r25, r7
    1fe2:	89 2b       	or	r24, r25
    1fe4:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1fe6:	d8 01       	movw	r26, r16
    1fe8:	15 96       	adiw	r26, 0x05	; 5
    1fea:	2d 91       	ld	r18, X+
    1fec:	3c 91       	ld	r19, X
    1fee:	16 97       	sbiw	r26, 0x06	; 6
    1ff0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	11 f0       	breq	.+4      	; 0x1ffa <nwkRxTaskHandler+0x364>
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	01 c0       	rjmp	.+2      	; 0x1ffc <nwkRxTaskHandler+0x366>
    1ffa:	9a 2d       	mov	r25, r10
    1ffc:	89 2b       	or	r24, r25
    1ffe:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2000:	ce 01       	movw	r24, r28
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	09 95       	icall
    2006:	01 c0       	rjmp	.+2      	; 0x200a <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    2008:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    200a:	f8 01       	movw	r30, r16
    200c:	93 85       	ldd	r25, Z+11	; 0x0b
    200e:	90 ff       	sbrs	r25, 0
    ack = false;
    2010:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2012:	d8 01       	movw	r26, r16
    2014:	17 96       	adiw	r26, 0x07	; 7
    2016:	2d 91       	ld	r18, X+
    2018:	3c 91       	ld	r19, X
    201a:	18 97       	sbiw	r26, 0x08	; 8
    201c:	2f 3f       	cpi	r18, 0xFF	; 255
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	69 f4       	brne	.+26     	; 0x203c <nwkRxTaskHandler+0x3a6>
    2022:	f7 01       	movw	r30, r14
    2024:	40 81       	ld	r20, Z
    2026:	51 81       	ldd	r21, Z+1	; 0x01
    2028:	d8 01       	movw	r26, r16
    202a:	1f 96       	adiw	r26, 0x0f	; 15
    202c:	2d 91       	ld	r18, X+
    202e:	3c 91       	ld	r19, X
    2030:	50 97       	sbiw	r26, 0x10	; 16
    2032:	42 17       	cp	r20, r18
    2034:	53 07       	cpc	r21, r19
    2036:	11 f4       	brne	.+4      	; 0x203c <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    2038:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    203a:	84 2d       	mov	r24, r4

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    203c:	f8 01       	movw	r30, r16
    203e:	25 81       	ldd	r18, Z+5	; 0x05
    2040:	36 81       	ldd	r19, Z+6	; 0x06
    2042:	2f 3f       	cpi	r18, 0xFF	; 255
    2044:	3f 4f       	sbci	r19, 0xFF	; 255
    2046:	a1 f1       	breq	.+104    	; 0x20b0 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    2048:	d7 01       	movw	r26, r14
    204a:	2d 91       	ld	r18, X+
    204c:	3c 91       	ld	r19, X
    204e:	2f 3f       	cpi	r18, 0xFF	; 255
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    2052:	71 f1       	breq	.+92     	; 0x20b0 <nwkRxTaskHandler+0x41a>
    2054:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    2056:	61 f1       	breq	.+88     	; 0x20b0 <nwkRxTaskHandler+0x41a>
    2058:	8f db       	rcall	.-2274   	; 0x1778 <nwkFrameAlloc>
    205a:	4c 01       	movw	r8, r24
    205c:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    205e:	41 f1       	breq	.+80     	; 0x20b0 <nwkRxTaskHandler+0x41a>
    2060:	f1 db       	rcall	.-2078   	; 0x1844 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    2062:	f4 01       	movw	r30, r8
    2064:	81 81       	ldd	r24, Z+1	; 0x01
    2066:	8d 5f       	subi	r24, 0xFD	; 253
    2068:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    206a:	e9 57       	subi	r30, 0x79	; 121
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	11 82       	std	Z+1, r1	; 0x01
    2070:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2072:	d8 01       	movw	r26, r16
    2074:	1b 96       	adiw	r26, 0x0b	; 11
    2076:	8c 91       	ld	r24, X
    2078:	1b 97       	sbiw	r26, 0x0b	; 11
    207a:	86 95       	lsr	r24
    207c:	81 70       	andi	r24, 0x01	; 1
    207e:	f4 01       	movw	r30, r8
    2080:	93 85       	ldd	r25, Z+11	; 0x0b
    2082:	80 fb       	bst	r24, 0
    2084:	91 f9       	bld	r25, 1
    2086:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2088:	1d 96       	adiw	r26, 0x0d	; 13
    208a:	8d 91       	ld	r24, X+
    208c:	9c 91       	ld	r25, X
    208e:	1e 97       	sbiw	r26, 0x0e	; 14
    2090:	90 8b       	std	Z+16, r25	; 0x10
    2092:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    2094:	ef 57       	subi	r30, 0x7F	; 127
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	01 90       	ld	r0, Z+
    209a:	f0 81       	ld	r31, Z
    209c:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    209e:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    20a0:	80 91 73 0d 	lds	r24, 0x0D73	; 0x800d73 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    20a4:	82 83       	std	Z+2, r24	; 0x02
    20a6:	1c 96       	adiw	r26, 0x0c	; 12
    20a8:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    20aa:	81 83       	std	Z+1, r24	; 0x01
    20ac:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    20ae:	b0 d0       	rcall	.+352    	; 0x2210 <nwkTxFrame>
    20b0:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    20b2:	bc 92       	st	X, r11
    20b4:	05 c0       	rjmp	.+10     	; 0x20c0 <nwkRxTaskHandler+0x42a>
    20b6:	c8 01       	movw	r24, r16
      } break;
    20b8:	1b dd       	rcall	.-1482   	; 0x1af0 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <nwkRxTaskHandler+0x42a>
    20bc:	c8 01       	movw	r24, r16
    20be:	93 db       	rcall	.-2266   	; 0x17e6 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    20c0:	c8 01       	movw	r24, r16
    20c2:	9b db       	rcall	.-2250   	; 0x17fa <nwkFrameNext>
    20c4:	8c 01       	movw	r16, r24
    20c6:	89 2b       	or	r24, r25
    20c8:	09 f0       	breq	.+2      	; 0x20cc <nwkRxTaskHandler+0x436>
    20ca:	20 ce       	rjmp	.-960    	; 0x1d0c <nwkRxTaskHandler+0x76>
    20cc:	07 c0       	rjmp	.+14     	; 0x20dc <nwkRxTaskHandler+0x446>
    20ce:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    20d0:	87 81       	ldd	r24, Z+7	; 0x07
    20d2:	90 85       	ldd	r25, Z+8	; 0x08
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	09 f0       	breq	.+2      	; 0x20da <nwkRxTaskHandler+0x444>
    20d8:	08 cf       	rjmp	.-496    	; 0x1eea <nwkRxTaskHandler+0x254>
    20da:	f9 ce       	rjmp	.-526    	; 0x1ece <nwkRxTaskHandler+0x238>
    20dc:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	df 90       	pop	r13
    20f6:	cf 90       	pop	r12
    20f8:	bf 90       	pop	r11
    20fa:	af 90       	pop	r10
    20fc:	9f 90       	pop	r9
    20fe:	8f 90       	pop	r8
    2100:	7f 90       	pop	r7
    2102:	6f 90       	pop	r6
    2104:	5f 90       	pop	r5
    2106:	4f 90       	pop	r4
    2108:	3f 90       	pop	r3
    210a:	2f 90       	pop	r2
    210c:	08 95       	ret

0000210e <nwkTxDelayTimerHandler>:
    210e:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	7c 01       	movw	r14, r24
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	01 e0       	ldi	r16, 0x01	; 1
    2122:	c3 e1       	ldi	r28, 0x13	; 19
    2124:	13 c0       	rjmp	.+38     	; 0x214c <nwkTxDelayTimerHandler+0x3e>
    2126:	fc 01       	movw	r30, r24
    2128:	20 81       	ld	r18, Z
    212a:	21 31       	cpi	r18, 0x11	; 17
    212c:	79 f4       	brne	.+30     	; 0x214c <nwkTxDelayTimerHandler+0x3e>
    212e:	ec 57       	subi	r30, 0x7C	; 124
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	20 81       	ld	r18, Z
    2134:	31 81       	ldd	r19, Z+1	; 0x01
    2136:	21 50       	subi	r18, 0x01	; 1
    2138:	31 09       	sbc	r19, r1
    213a:	31 83       	std	Z+1, r19	; 0x01
    213c:	20 83       	st	Z, r18
    213e:	23 2b       	or	r18, r19
    2140:	21 f4       	brne	.+8      	; 0x214a <nwkTxDelayTimerHandler+0x3c>
    2142:	fc 01       	movw	r30, r24
    2144:	c0 83       	st	Z, r28
    2146:	10 2f       	mov	r17, r16
    2148:	01 c0       	rjmp	.+2      	; 0x214c <nwkTxDelayTimerHandler+0x3e>
    214a:	10 2f       	mov	r17, r16
    214c:	56 db       	rcall	.-2388   	; 0x17fa <nwkFrameNext>
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	51 f7       	brne	.-44     	; 0x2126 <nwkTxDelayTimerHandler+0x18>
    2152:	11 23       	and	r17, r17
    2154:	11 f0       	breq	.+4      	; 0x215a <nwkTxDelayTimerHandler+0x4c>
    2156:	c7 01       	movw	r24, r14
    2158:	b7 d3       	rcall	.+1902   	; 0x28c8 <SYS_TimerStart>
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	ff 90       	pop	r15
    2162:	ef 90       	pop	r14
    2164:	08 95       	ret

00002166 <nwkTxAckWaitTimerHandler>:
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	7c 01       	movw	r14, r24
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	01 e0       	ldi	r16, 0x01	; 1
    217c:	d7 e1       	ldi	r29, 0x17	; 23
    217e:	c0 e1       	ldi	r28, 0x10	; 16
    2180:	16 c0       	rjmp	.+44     	; 0x21ae <nwkTxAckWaitTimerHandler+0x48>
    2182:	fc 01       	movw	r30, r24
    2184:	20 81       	ld	r18, Z
    2186:	26 31       	cpi	r18, 0x16	; 22
    2188:	91 f4       	brne	.+36     	; 0x21ae <nwkTxAckWaitTimerHandler+0x48>
    218a:	ec 57       	subi	r30, 0x7C	; 124
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	20 81       	ld	r18, Z
    2190:	31 81       	ldd	r19, Z+1	; 0x01
    2192:	21 50       	subi	r18, 0x01	; 1
    2194:	31 09       	sbc	r19, r1
    2196:	31 83       	std	Z+1, r19	; 0x01
    2198:	20 83       	st	Z, r18
    219a:	23 2b       	or	r18, r19
    219c:	39 f4       	brne	.+14     	; 0x21ac <nwkTxAckWaitTimerHandler+0x46>
    219e:	fc 01       	movw	r30, r24
    21a0:	d0 83       	st	Z, r29
    21a2:	ed 57       	subi	r30, 0x7D	; 125
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	c0 83       	st	Z, r28
    21a8:	10 2f       	mov	r17, r16
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <nwkTxAckWaitTimerHandler+0x48>
    21ac:	10 2f       	mov	r17, r16
    21ae:	25 db       	rcall	.-2486   	; 0x17fa <nwkFrameNext>
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	39 f7       	brne	.-50     	; 0x2182 <nwkTxAckWaitTimerHandler+0x1c>
    21b4:	11 23       	and	r17, r17
    21b6:	11 f0       	breq	.+4      	; 0x21bc <nwkTxAckWaitTimerHandler+0x56>
    21b8:	c7 01       	movw	r24, r14
    21ba:	86 d3       	rcall	.+1804   	; 0x28c8 <SYS_TimerStart>
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	08 95       	ret

000021ca <nwkTxInit>:
    21ca:	10 92 89 0e 	sts	0x0E89, r1	; 0x800e89 <nwkTxPhyActiveFrame+0x1>
    21ce:	10 92 88 0e 	sts	0x0E88, r1	; 0x800e88 <nwkTxPhyActiveFrame>
    21d2:	eb e7       	ldi	r30, 0x7B	; 123
    21d4:	fe e0       	ldi	r31, 0x0E	; 14
    21d6:	82 e3       	ldi	r24, 0x32	; 50
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e0       	ldi	r26, 0x00	; 0
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	86 83       	std	Z+6, r24	; 0x06
    21e0:	97 83       	std	Z+7, r25	; 0x07
    21e2:	a0 87       	std	Z+8, r26	; 0x08
    21e4:	b1 87       	std	Z+9, r27	; 0x09
    21e6:	12 86       	std	Z+10, r1	; 0x0a
    21e8:	83 eb       	ldi	r24, 0xB3	; 179
    21ea:	90 e1       	ldi	r25, 0x10	; 16
    21ec:	94 87       	std	Z+12, r25	; 0x0c
    21ee:	83 87       	std	Z+11, r24	; 0x0b
    21f0:	ee e6       	ldi	r30, 0x6E	; 110
    21f2:	fe e0       	ldi	r31, 0x0E	; 14
    21f4:	8a e0       	ldi	r24, 0x0A	; 10
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e0       	ldi	r26, 0x00	; 0
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	86 83       	std	Z+6, r24	; 0x06
    21fe:	97 83       	std	Z+7, r25	; 0x07
    2200:	a0 87       	std	Z+8, r26	; 0x08
    2202:	b1 87       	std	Z+9, r27	; 0x09
    2204:	12 86       	std	Z+10, r1	; 0x0a
    2206:	87 e8       	ldi	r24, 0x87	; 135
    2208:	90 e1       	ldi	r25, 0x10	; 16
    220a:	94 87       	std	Z+12, r25	; 0x0c
    220c:	83 87       	std	Z+11, r24	; 0x0b
    220e:	08 95       	ret

00002210 <nwkTxFrame>:
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	ec 01       	movw	r28, r24
    2216:	fc 01       	movw	r30, r24
    2218:	ea 57       	subi	r30, 0x7A	; 122
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	81 ff       	sbrs	r24, 1
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <nwkTxFrame+0x18>
    2222:	92 e1       	ldi	r25, 0x12	; 18
    2224:	98 83       	st	Y, r25
    2226:	02 c0       	rjmp	.+4      	; 0x222c <nwkTxFrame+0x1c>
    2228:	92 e1       	ldi	r25, 0x12	; 18
    222a:	98 83       	st	Y, r25
    222c:	fe 01       	movw	r30, r28
    222e:	ed 57       	subi	r30, 0x7D	; 125
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	10 82       	st	Z, r1
    2234:	80 ff       	sbrs	r24, 0
    2236:	05 c0       	rjmp	.+10     	; 0x2242 <nwkTxFrame+0x32>
    2238:	2f ef       	ldi	r18, 0xFF	; 255
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	3e 83       	std	Y+6, r19	; 0x06
    223e:	2d 83       	std	Y+5, r18	; 0x05
    2240:	06 c0       	rjmp	.+12     	; 0x224e <nwkTxFrame+0x3e>
    2242:	20 91 11 0f 	lds	r18, 0x0F11	; 0x800f11 <nwkIb+0x2>
    2246:	30 91 12 0f 	lds	r19, 0x0F12	; 0x800f12 <nwkIb+0x3>
    224a:	3e 83       	std	Y+6, r19	; 0x06
    224c:	2d 83       	std	Y+5, r18	; 0x05
    224e:	85 70       	andi	r24, 0x05	; 5
    2250:	19 f4       	brne	.+6      	; 0x2258 <nwkTxFrame+0x48>
    2252:	ce 01       	movw	r24, r28
    2254:	2e dc       	rcall	.-1956   	; 0x1ab2 <nwkRoutePrepareTx>
    2256:	04 c0       	rjmp	.+8      	; 0x2260 <nwkTxFrame+0x50>
    2258:	8f 85       	ldd	r24, Y+15	; 0x0f
    225a:	98 89       	ldd	r25, Y+16	; 0x10
    225c:	98 87       	std	Y+8, r25	; 0x08
    225e:	8f 83       	std	Y+7, r24	; 0x07
    2260:	ef e0       	ldi	r30, 0x0F	; 15
    2262:	ff e0       	ldi	r31, 0x0F	; 15
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	9a 87       	std	Y+10, r25	; 0x0a
    226a:	89 87       	std	Y+9, r24	; 0x09
    226c:	85 81       	ldd	r24, Z+5	; 0x05
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    2270:	85 83       	std	Z+5, r24	; 0x05
    2272:	8c 83       	std	Y+4, r24	; 0x04
    2274:	8f 81       	ldd	r24, Y+7	; 0x07
    2276:	98 85       	ldd	r25, Y+8	; 0x08
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	69 f4       	brne	.+26     	; 0x2296 <nwkTxFrame+0x86>
    227c:	81 e4       	ldi	r24, 0x41	; 65
    227e:	98 e8       	ldi	r25, 0x88	; 136
    2280:	9b 83       	std	Y+3, r25	; 0x03
    2282:	8a 83       	std	Y+2, r24	; 0x02
    2284:	18 d4       	rcall	.+2096   	; 0x2ab6 <rand>
    2286:	cc 57       	subi	r28, 0x7C	; 124
    2288:	df 4f       	sbci	r29, 0xFF	; 255
    228a:	87 70       	andi	r24, 0x07	; 7
    228c:	99 27       	eor	r25, r25
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	99 83       	std	Y+1, r25	; 0x01
    2292:	88 83       	st	Y, r24
    2294:	08 c0       	rjmp	.+16     	; 0x22a6 <nwkTxFrame+0x96>
    2296:	81 e6       	ldi	r24, 0x61	; 97
    2298:	98 e8       	ldi	r25, 0x88	; 136
    229a:	9b 83       	std	Y+3, r25	; 0x03
    229c:	8a 83       	std	Y+2, r24	; 0x02
    229e:	cc 57       	subi	r28, 0x7C	; 124
    22a0:	df 4f       	sbci	r29, 0xFF	; 255
    22a2:	19 82       	std	Y+1, r1	; 0x01
    22a4:	18 82       	st	Y, r1
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <nwkTxBroadcastFrame>:
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	8c 01       	movw	r16, r24
    22b6:	60 da       	rcall	.-2880   	; 0x1778 <nwkFrameAlloc>
    22b8:	ec 01       	movw	r28, r24
    22ba:	89 2b       	or	r24, r25
    22bc:	a9 f1       	breq	.+106    	; 0x2328 <nwkTxBroadcastFrame+0x7c>
    22be:	82 e1       	ldi	r24, 0x12	; 18
    22c0:	88 83       	st	Y, r24
    22c2:	f8 01       	movw	r30, r16
    22c4:	81 81       	ldd	r24, Z+1	; 0x01
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	fe 01       	movw	r30, r28
    22ca:	ed 57       	subi	r30, 0x7D	; 125
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	10 82       	st	Z, r1
    22d0:	f2 d3       	rcall	.+2020   	; 0x2ab6 <rand>
    22d2:	fe 01       	movw	r30, r28
    22d4:	ec 57       	subi	r30, 0x7C	; 124
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	87 70       	andi	r24, 0x07	; 7
    22da:	99 27       	eor	r25, r25
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    22e2:	33 96       	adiw	r30, 0x03	; 3
    22e4:	11 82       	std	Z+1, r1	; 0x01
    22e6:	10 82       	st	Z, r1
    22e8:	f8 01       	movw	r30, r16
    22ea:	41 81       	ldd	r20, Z+1	; 0x01
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	b8 01       	movw	r22, r16
    22f0:	6e 5f       	subi	r22, 0xFE	; 254
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	ce 01       	movw	r24, r28
    22f6:	02 96       	adiw	r24, 0x02	; 2
    22f8:	ec d3       	rcall	.+2008   	; 0x2ad2 <memcpy>
    22fa:	81 e4       	ldi	r24, 0x41	; 65
    22fc:	98 e8       	ldi	r25, 0x88	; 136
    22fe:	9b 83       	std	Y+3, r25	; 0x03
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	8f ef       	ldi	r24, 0xFF	; 255
    2304:	9f ef       	ldi	r25, 0xFF	; 255
    2306:	98 87       	std	Y+8, r25	; 0x08
    2308:	8f 83       	std	Y+7, r24	; 0x07
    230a:	f8 01       	movw	r30, r16
    230c:	85 81       	ldd	r24, Z+5	; 0x05
    230e:	96 81       	ldd	r25, Z+6	; 0x06
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	ef e0       	ldi	r30, 0x0F	; 15
    2316:	ff e0       	ldi	r31, 0x0F	; 15
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	9a 87       	std	Y+10, r25	; 0x0a
    231e:	89 87       	std	Y+9, r24	; 0x09
    2320:	85 81       	ldd	r24, Z+5	; 0x05
    2322:	8f 5f       	subi	r24, 0xFF	; 255
    2324:	85 83       	std	Z+5, r24	; 0x05
    2326:	8c 83       	std	Y+4, r24	; 0x04
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	08 95       	ret

00002332 <nwkTxAckReceived>:
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	fc 01       	movw	r30, r24
    2338:	21 85       	ldd	r18, Z+9	; 0x09
    233a:	23 30       	cpi	r18, 0x03	; 3
    233c:	d9 f4       	brne	.+54     	; 0x2374 <nwkTxAckReceived+0x42>
    233e:	10 c0       	rjmp	.+32     	; 0x2360 <nwkTxAckReceived+0x2e>
    2340:	fc 01       	movw	r30, r24
    2342:	20 81       	ld	r18, Z
    2344:	26 31       	cpi	r18, 0x16	; 22
    2346:	89 f4       	brne	.+34     	; 0x236a <nwkTxAckReceived+0x38>
    2348:	34 85       	ldd	r19, Z+12	; 0x0c
    234a:	29 81       	ldd	r18, Y+1	; 0x01
    234c:	32 13       	cpse	r19, r18
    234e:	0d c0       	rjmp	.+26     	; 0x236a <nwkTxAckReceived+0x38>
    2350:	27 e1       	ldi	r18, 0x17	; 23
    2352:	20 83       	st	Z, r18
    2354:	2a 81       	ldd	r18, Y+2	; 0x02
    2356:	ea 57       	subi	r30, 0x7A	; 122
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	20 83       	st	Z, r18
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	0b c0       	rjmp	.+22     	; 0x2376 <nwkTxAckReceived+0x44>
    2360:	fc 01       	movw	r30, r24
    2362:	c7 81       	ldd	r28, Z+7	; 0x07
    2364:	d0 85       	ldd	r29, Z+8	; 0x08
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	47 da       	rcall	.-2930   	; 0x17fa <nwkFrameNext>
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	41 f7       	brne	.-48     	; 0x2340 <nwkTxAckReceived+0xe>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <nwkTxAckReceived+0x44>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	08 95       	ret

0000237c <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    237c:	e0 91 88 0e 	lds	r30, 0x0E88	; 0x800e88 <nwkTxPhyActiveFrame>
    2380:	f0 91 89 0e 	lds	r31, 0x0E89	; 0x800e89 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	21 f0       	breq	.+8      	; 0x2390 <PHY_DataConf+0x14>
    2388:	48 f0       	brcs	.+18     	; 0x239c <PHY_DataConf+0x20>
    238a:	82 30       	cpi	r24, 0x02	; 2
    238c:	19 f0       	breq	.+6      	; 0x2394 <PHY_DataConf+0x18>
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    2390:	80 e2       	ldi	r24, 0x20	; 32
    2392:	05 c0       	rjmp	.+10     	; 0x239e <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    2394:	81 e2       	ldi	r24, 0x21	; 33
    2396:	03 c0       	rjmp	.+6      	; 0x239e <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	01 c0       	rjmp	.+2      	; 0x239e <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    239c:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    239e:	df 01       	movw	r26, r30
    23a0:	ad 57       	subi	r26, 0x7D	; 125
    23a2:	bf 4f       	sbci	r27, 0xFF	; 255
    23a4:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    23a6:	85 e1       	ldi	r24, 0x15	; 21
    23a8:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    23aa:	10 92 89 0e 	sts	0x0E89, r1	; 0x800e89 <nwkTxPhyActiveFrame+0x1>
    23ae:	10 92 88 0e 	sts	0x0E88, r1	; 0x800e88 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    23b2:	ef e0       	ldi	r30, 0x0F	; 15
    23b4:	ff e0       	ldi	r31, 0x0F	; 15
    23b6:	86 a1       	ldd	r24, Z+38	; 0x26
    23b8:	97 a1       	ldd	r25, Z+39	; 0x27
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	97 a3       	std	Z+39, r25	; 0x27
    23be:	86 a3       	std	Z+38, r24	; 0x26
    23c0:	08 95       	ret

000023c2 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    23c2:	9f 92       	push	r9
    23c4:	af 92       	push	r10
    23c6:	bf 92       	push	r11
    23c8:	cf 92       	push	r12
    23ca:	df 92       	push	r13
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    23d8:	c0 e0       	ldi	r28, 0x00	; 0
    23da:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    23dc:	0f 2e       	mov	r0, r31
    23de:	f4 e1       	ldi	r31, 0x14	; 20
    23e0:	af 2e       	mov	r10, r31
    23e2:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    23e4:	0f e0       	ldi	r16, 0x0F	; 15
    23e6:	1f e0       	ldi	r17, 0x0F	; 15
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    23e8:	0f 2e       	mov	r0, r31
    23ea:	f7 e1       	ldi	r31, 0x17	; 23
    23ec:	df 2e       	mov	r13, r31
    23ee:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    23f0:	0f 2e       	mov	r0, r31
    23f2:	f6 e1       	ldi	r31, 0x16	; 22
    23f4:	9f 2e       	mov	r9, r31
    23f6:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    23f8:	0f 2e       	mov	r0, r31
    23fa:	f5 e1       	ldi	r31, 0x15	; 21
    23fc:	ef 2e       	mov	r14, r31
    23fe:	f1 2c       	mov	r15, r1
    2400:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2402:	0f 2e       	mov	r0, r31
    2404:	f3 e1       	ldi	r31, 0x13	; 19
    2406:	cf 2e       	mov	r12, r31
    2408:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    240a:	0f 2e       	mov	r0, r31
    240c:	f1 e1       	ldi	r31, 0x11	; 17
    240e:	bf 2e       	mov	r11, r31
    2410:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2412:	60 c0       	rjmp	.+192    	; 0x24d4 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    2414:	88 81       	ld	r24, Y
    2416:	83 31       	cpi	r24, 0x13	; 19
    2418:	c1 f0       	breq	.+48     	; 0x244a <nwkTxTaskHandler+0x88>
    241a:	18 f4       	brcc	.+6      	; 0x2422 <nwkTxTaskHandler+0x60>
    241c:	82 31       	cpi	r24, 0x12	; 18
    241e:	39 f0       	breq	.+14     	; 0x242e <nwkTxTaskHandler+0x6c>
    2420:	59 c0       	rjmp	.+178    	; 0x24d4 <nwkTxTaskHandler+0x112>
    2422:	85 31       	cpi	r24, 0x15	; 21
    2424:	49 f1       	breq	.+82     	; 0x2478 <nwkTxTaskHandler+0xb6>
    2426:	87 31       	cpi	r24, 0x17	; 23
    2428:	09 f4       	brne	.+2      	; 0x242c <nwkTxTaskHandler+0x6a>
    242a:	45 c0       	rjmp	.+138    	; 0x24b6 <nwkTxTaskHandler+0xf4>
    242c:	53 c0       	rjmp	.+166    	; 0x24d4 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    242e:	fe 01       	movw	r30, r28
    2430:	ec 57       	subi	r30, 0x7C	; 124
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	89 2b       	or	r24, r25
    243a:	29 f0       	breq	.+10     	; 0x2446 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    243c:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    243e:	8e e6       	ldi	r24, 0x6E	; 110
    2440:	9e e0       	ldi	r25, 0x0E	; 14
    2442:	42 d2       	rcall	.+1156   	; 0x28c8 <SYS_TimerStart>
    2444:	47 c0       	rjmp	.+142    	; 0x24d4 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2446:	c8 82       	st	Y, r12
    2448:	45 c0       	rjmp	.+138    	; 0x24d4 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    244a:	80 91 88 0e 	lds	r24, 0x0E88	; 0x800e88 <nwkTxPhyActiveFrame>
    244e:	90 91 89 0e 	lds	r25, 0x0E89	; 0x800e89 <nwkTxPhyActiveFrame+0x1>
    2452:	89 2b       	or	r24, r25
    2454:	09 f0       	breq	.+2      	; 0x2458 <nwkTxTaskHandler+0x96>
    2456:	3e c0       	rjmp	.+124    	; 0x24d4 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    2458:	d0 93 89 0e 	sts	0x0E89, r29	; 0x800e89 <nwkTxPhyActiveFrame+0x1>
    245c:	c0 93 88 0e 	sts	0x0E88, r28	; 0x800e88 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    2460:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    2462:	69 81       	ldd	r22, Y+1	; 0x01
    2464:	ce 01       	movw	r24, r28
    2466:	02 96       	adiw	r24, 0x02	; 2
    2468:	bf d0       	rcall	.+382    	; 0x25e8 <PHY_DataReq>
          nwkIb.lock++;
    246a:	f8 01       	movw	r30, r16
    246c:	86 a1       	ldd	r24, Z+38	; 0x26
    246e:	97 a1       	ldd	r25, Z+39	; 0x27
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	97 a3       	std	Z+39, r25	; 0x27
    2474:	86 a3       	std	Z+38, r24	; 0x26
    2476:	2e c0       	rjmp	.+92     	; 0x24d4 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    2478:	fe 01       	movw	r30, r28
    247a:	ed 57       	subi	r30, 0x7D	; 125
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 81       	ld	r24, Z
    2480:	81 11       	cpse	r24, r1
    2482:	17 c0       	rjmp	.+46     	; 0x24b2 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    2484:	2d 85       	ldd	r18, Y+13	; 0x0d
    2486:	3e 85       	ldd	r19, Y+14	; 0x0e
    2488:	f8 01       	movw	r30, r16
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	28 17       	cp	r18, r24
    2490:	39 07       	cpc	r19, r25
    2492:	69 f4       	brne	.+26     	; 0x24ae <nwkTxTaskHandler+0xec>
    2494:	8b 85       	ldd	r24, Y+11	; 0x0b
    2496:	80 ff       	sbrs	r24, 0
    2498:	0a c0       	rjmp	.+20     	; 0x24ae <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    249a:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    249c:	fe 01       	movw	r30, r28
    249e:	ec 57       	subi	r30, 0x7C	; 124
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	f1 82       	std	Z+1, r15	; 0x01
    24a4:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    24a6:	8b e7       	ldi	r24, 0x7B	; 123
    24a8:	9e e0       	ldi	r25, 0x0E	; 14
    24aa:	0e d2       	rcall	.+1052   	; 0x28c8 <SYS_TimerStart>
    24ac:	13 c0       	rjmp	.+38     	; 0x24d4 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    24ae:	d8 82       	st	Y, r13
    24b0:	11 c0       	rjmp	.+34     	; 0x24d4 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    24b2:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    24b4:	0f c0       	rjmp	.+30     	; 0x24d4 <nwkTxTaskHandler+0x112>
    24b6:	ce 01       	movw	r24, r28
    24b8:	b5 da       	rcall	.-2710   	; 0x1a24 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    24ba:	fe 01       	movw	r30, r28
    24bc:	e9 57       	subi	r30, 0x79	; 121
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	01 90       	ld	r0, Z+
    24c2:	f0 81       	ld	r31, Z
    24c4:	e0 2d       	mov	r30, r0
    24c6:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    24c8:	19 f4       	brne	.+6      	; 0x24d0 <nwkTxTaskHandler+0x10e>
    24ca:	ce 01       	movw	r24, r28
    24cc:	8c d9       	rcall	.-3304   	; 0x17e6 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <nwkTxTaskHandler+0x112>
    24d0:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    24d2:	09 95       	icall
    24d4:	ce 01       	movw	r24, r28
    24d6:	91 d9       	rcall	.-3294   	; 0x17fa <nwkFrameNext>
    24d8:	ec 01       	movw	r28, r24
    24da:	89 2b       	or	r24, r25
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <nwkTxTaskHandler+0x11e>
    24de:	9a cf       	rjmp	.-204    	; 0x2414 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	ef 90       	pop	r14
    24ec:	df 90       	pop	r13
    24ee:	cf 90       	pop	r12
    24f0:	bf 90       	pop	r11
    24f2:	af 90       	pop	r10
    24f4:	9f 90       	pop	r9
    24f6:	08 95       	ret

000024f8 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
  PHY_TX_PWR_REG_s.txPwr = txPower;
    24f8:	93 e0       	ldi	r25, 0x03	; 3
    24fa:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    24fe:	e1 e4       	ldi	r30, 0x41	; 65
    2500:	f1 e0       	ldi	r31, 0x01	; 1
    2502:	90 81       	ld	r25, Z
    2504:	9f 71       	andi	r25, 0x1F	; 31
    2506:	98 30       	cpi	r25, 0x08	; 8
    2508:	e1 f7       	brne	.-8      	; 0x2502 <phyTrxSetState+0xa>
    250a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    250e:	e1 e4       	ldi	r30, 0x41	; 65
    2510:	f1 e0       	ldi	r31, 0x01	; 1
    2512:	90 81       	ld	r25, Z
    2514:	9f 71       	andi	r25, 0x1F	; 31
    2516:	89 13       	cpse	r24, r25
    2518:	fc cf       	rjmp	.-8      	; 0x2512 <phyTrxSetState+0x1a>
    251a:	08 95       	ret

0000251c <phySetRxState>:
    251c:	88 e0       	ldi	r24, 0x08	; 8
    251e:	ec df       	rcall	.-40     	; 0x24f8 <phyTrxSetState>
    2520:	8f ef       	ldi	r24, 0xFF	; 255
    2522:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    2526:	80 91 8a 0e 	lds	r24, 0x0E8A	; 0x800e8a <phyRxState>
    252a:	88 23       	and	r24, r24
    252c:	11 f0       	breq	.+4      	; 0x2532 <phySetRxState+0x16>
    252e:	86 e1       	ldi	r24, 0x16	; 22
    2530:	e3 cf       	rjmp	.-58     	; 0x24f8 <phyTrxSetState>
    2532:	08 95       	ret

00002534 <PHY_Init>:
    2534:	e9 e3       	ldi	r30, 0x39	; 57
    2536:	f1 e0       	ldi	r31, 0x01	; 1
    2538:	80 81       	ld	r24, Z
    253a:	81 60       	ori	r24, 0x01	; 1
    253c:	80 83       	st	Z, r24
    253e:	10 92 8a 0e 	sts	0x0E8A, r1	; 0x800e8a <phyRxState>
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	80 93 0b 0f 	sts	0x0F0B, r24	; 0x800f0b <phyState>
    2548:	88 e0       	ldi	r24, 0x08	; 8
    254a:	d6 df       	rcall	.-84     	; 0x24f8 <phyTrxSetState>
    254c:	ec e4       	ldi	r30, 0x4C	; 76
    254e:	f1 e0       	ldi	r31, 0x01	; 1
    2550:	80 81       	ld	r24, Z
    2552:	80 68       	ori	r24, 0x80	; 128
    2554:	80 83       	st	Z, r24
    2556:	08 95       	ret

00002558 <PHY_SetRxState>:
    2558:	80 93 8a 0e 	sts	0x0E8A, r24	; 0x800e8a <phyRxState>
    255c:	df cf       	rjmp	.-66     	; 0x251c <phySetRxState>
    255e:	08 95       	ret

00002560 <PHY_SetChannel>:
    2560:	8f 71       	andi	r24, 0x1F	; 31
    2562:	e8 e4       	ldi	r30, 0x48	; 72
    2564:	f1 e0       	ldi	r31, 0x01	; 1
    2566:	90 81       	ld	r25, Z
    2568:	90 7e       	andi	r25, 0xE0	; 224
    256a:	89 2b       	or	r24, r25
    256c:	80 83       	st	Z, r24
    256e:	08 95       	ret

00002570 <PHY_SetPanId>:
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	00 d0       	rcall	.+0      	; 0x2576 <PHY_SetPanId+0x6>
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
    257e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	08 95       	ret

00002592 <PHY_SetShortAddr>:
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	00 d0       	rcall	.+0      	; 0x2598 <PHY_SetShortAddr+0x6>
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    25aa:	99 81       	ldd	r25, Y+1	; 0x01
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	89 0f       	add	r24, r25
    25b0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7e016d>
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	08 95       	ret

000025be <PHY_Sleep>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Sleep(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    25be:	88 e0       	ldi	r24, 0x08	; 8
    25c0:	9b df       	rcall	.-202    	; 0x24f8 <phyTrxSetState>
  TRXPR_REG_s.slptr = 1;
    25c2:	e9 e3       	ldi	r30, 0x39	; 57
    25c4:	f1 e0       	ldi	r31, 0x01	; 1
    25c6:	80 81       	ld	r24, Z
    25c8:	82 60       	ori	r24, 0x02	; 2
    25ca:	80 83       	st	Z, r24
  phyState = PHY_STATE_SLEEP;
    25cc:	82 e0       	ldi	r24, 0x02	; 2
    25ce:	80 93 0b 0f 	sts	0x0F0B, r24	; 0x800f0b <phyState>
    25d2:	08 95       	ret

000025d4 <PHY_Wakeup>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
    25d4:	e9 e3       	ldi	r30, 0x39	; 57
    25d6:	f1 e0       	ldi	r31, 0x01	; 1
    25d8:	80 81       	ld	r24, Z
    25da:	8d 7f       	andi	r24, 0xFD	; 253
    25dc:	80 83       	st	Z, r24
  phySetRxState();
    25de:	9e df       	rcall	.-196    	; 0x251c <phySetRxState>
  phyState = PHY_STATE_IDLE;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	80 93 0b 0f 	sts	0x0F0B, r24	; 0x800f0b <phyState>
    25e6:	08 95       	ret

000025e8 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	18 2f       	mov	r17, r24
    25f0:	d9 2f       	mov	r29, r25
    25f2:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    25f4:	89 e1       	ldi	r24, 0x19	; 25
    25f6:	80 df       	rcall	.-256    	; 0x24f8 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    25f8:	8f ef       	ldi	r24, 0xFF	; 255
    25fa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	8c 0f       	add	r24, r28
    2602:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
  for (uint8_t i = 0; i < size; i++)
    2606:	cc 23       	and	r28, r28
    2608:	71 f0       	breq	.+28     	; 0x2626 <PHY_DataReq+0x3e>
    260a:	a1 2f       	mov	r26, r17
    260c:	bd 2f       	mov	r27, r29
    260e:	c1 50       	subi	r28, 0x01	; 1
    2610:	6c 2f       	mov	r22, r28
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	6e 57       	subi	r22, 0x7E	; 126
    2616:	7e 4f       	sbci	r23, 0xFE	; 254
    2618:	e1 e8       	ldi	r30, 0x81	; 129
    261a:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    261c:	8d 91       	ld	r24, X+
    261e:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    2620:	e6 17       	cp	r30, r22
    2622:	f7 07       	cpc	r31, r23
    2624:	d9 f7       	brne	.-10     	; 0x261c <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	80 93 0b 0f 	sts	0x0F0B, r24	; 0x800f0b <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
}
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	08 95       	ret

0000263a <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    263a:	1f 93       	push	r17
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	00 d0       	rcall	.+0      	; 0x2642 <PHY_TaskHandler+0x8>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <PHY_TaskHandler+0xa>
    2644:	1f 92       	push	r1
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    264a:	80 91 0b 0f 	lds	r24, 0x0F0B	; 0x800f0b <phyState>
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	09 f4       	brne	.+2      	; 0x2654 <PHY_TaskHandler+0x1a>
    2652:	65 c0       	rjmp	.+202    	; 0x271e <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2654:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    2658:	83 ff       	sbrs	r24, 3
    265a:	3e c0       	rjmp	.+124    	; 0x26d8 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    265c:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2660:	6a 2f       	mov	r22, r26
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	ab 01       	movw	r20, r22
    2666:	4f 5f       	subi	r20, 0xFF	; 255
    2668:	5f 4f       	sbci	r21, 0xFF	; 255
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    2670:	fc 01       	movw	r30, r24
    2672:	e0 58       	subi	r30, 0x80	; 128
    2674:	fe 4f       	sbci	r31, 0xFE	; 254
    2676:	30 81       	ld	r19, Z
    2678:	fc 01       	movw	r30, r24
    267a:	e5 57       	subi	r30, 0x75	; 117
    267c:	f1 4f       	sbci	r31, 0xF1	; 241
    267e:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2680:	2f 5f       	subi	r18, 0xFF	; 255
    2682:	82 2f       	mov	r24, r18
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	84 17       	cp	r24, r20
    2688:	95 07       	cpc	r25, r21
    268a:	94 f3       	brlt	.-28     	; 0x2670 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    268c:	8b e8       	ldi	r24, 0x8B	; 139
    268e:	9e e0       	ldi	r25, 0x0E	; 14
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    2694:	a2 50       	subi	r26, 0x02	; 2
    2696:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    2698:	fb 01       	movw	r30, r22
    269a:	e5 57       	subi	r30, 0x75	; 117
    269c:	f1 4f       	sbci	r31, 0xF1	; 241
    269e:	80 81       	ld	r24, Z
    26a0:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    26a2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7e0147>
    26a6:	8a 55       	subi	r24, 0x5A	; 90
    26a8:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    26aa:	ce 01       	movw	r24, r28
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	c6 da       	rcall	.-2676   	; 0x1c3c <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    26b0:	e1 e4       	ldi	r30, 0x41	; 65
    26b2:	f1 e0       	ldi	r31, 0x01	; 1
    26b4:	80 81       	ld	r24, Z
    26b6:	8f 71       	andi	r24, 0x1F	; 31
    26b8:	86 31       	cpi	r24, 0x16	; 22
    26ba:	e1 f7       	brne	.-8      	; 0x26b4 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    26bc:	ef e4       	ldi	r30, 0x4F	; 79
    26be:	f1 e0       	ldi	r31, 0x01	; 1
    26c0:	80 81       	ld	r24, Z
    26c2:	88 60       	ori	r24, 0x08	; 8
    26c4:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    26c6:	ec e4       	ldi	r30, 0x4C	; 76
    26c8:	f1 e0       	ldi	r31, 0x01	; 1
    26ca:	80 81       	ld	r24, Z
    26cc:	8f 77       	andi	r24, 0x7F	; 127
    26ce:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    26d0:	80 81       	ld	r24, Z
    26d2:	80 68       	ori	r24, 0x80	; 128
    26d4:	80 83       	st	Z, r24
    26d6:	23 c0       	rjmp	.+70     	; 0x271e <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    26d8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    26dc:	86 ff       	sbrs	r24, 6
    26de:	1f c0       	rjmp	.+62     	; 0x271e <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    26e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    26e4:	8f 71       	andi	r24, 0x1F	; 31
    26e6:	89 31       	cpi	r24, 0x19	; 25
    26e8:	a9 f4       	brne	.+42     	; 0x2714 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    26ea:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    26ee:	12 95       	swap	r17
    26f0:	16 95       	lsr	r17
    26f2:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    26f4:	49 f0       	breq	.+18     	; 0x2708 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    26f6:	13 30       	cpi	r17, 0x03	; 3
    26f8:	21 f0       	breq	.+8      	; 0x2702 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    26fa:	15 30       	cpi	r17, 0x05	; 5
    26fc:	21 f0       	breq	.+8      	; 0x2706 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    26fe:	13 e0       	ldi	r17, 0x03	; 3
    2700:	03 c0       	rjmp	.+6      	; 0x2708 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2702:	11 e0       	ldi	r17, 0x01	; 1
    2704:	01 c0       	rjmp	.+2      	; 0x2708 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    2706:	12 e0       	ldi	r17, 0x02	; 2
    2708:	09 df       	rcall	.-494    	; 0x251c <phySetRxState>
      phyState = PHY_STATE_IDLE;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	80 93 0b 0f 	sts	0x0F0B, r24	; 0x800f0b <phyState>

      PHY_DataConf(status);
    2710:	81 2f       	mov	r24, r17
    2712:	34 de       	rcall	.-920    	; 0x237c <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2714:	ef e4       	ldi	r30, 0x4F	; 79
    2716:	f1 e0       	ldi	r31, 0x01	; 1
    2718:	80 81       	ld	r24, Z
    271a:	80 64       	ori	r24, 0x40	; 64
    271c:	80 83       	st	Z, r24
  }
}
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	08 95       	ret

00002730 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    2730:	0e 94 c6 08 	call	0x118c	; 0x118c <HAL_Init>
  SYS_TimerInit();
    2734:	6d d0       	rcall	.+218    	; 0x2810 <SYS_TimerInit>
  PHY_Init();
    2736:	fe de       	rcall	.-516    	; 0x2534 <PHY_Init>
    2738:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <NWK_Init>
  NWK_Init();
    273c:	08 95       	ret

0000273e <SYS_TaskHandler>:
    273e:	7d df       	rcall	.-262    	; 0x263a <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    2740:	0e 94 be 0a 	call	0x157c	; 0x157c <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2744:	cc c0       	rjmp	.+408    	; 0x28de <SYS_TimerTaskHandler>
    2746:	08 95       	ret

00002748 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	ec 01       	movw	r28, r24
  if (timers)
    2752:	80 91 0c 0f 	lds	r24, 0x0F0C	; 0x800f0c <timers>
    2756:	90 91 0d 0f 	lds	r25, 0x0F0D	; 0x800f0d <timers+0x1>
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	09 f4       	brne	.+2      	; 0x2760 <placeTimer+0x18>
    275e:	45 c0       	rjmp	.+138    	; 0x27ea <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    2760:	4e 81       	ldd	r20, Y+6	; 0x06
    2762:	5f 81       	ldd	r21, Y+7	; 0x07
    2764:	68 85       	ldd	r22, Y+8	; 0x08
    2766:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    2768:	fc 01       	movw	r30, r24
    276a:	02 81       	ldd	r16, Z+2	; 0x02
    276c:	13 81       	ldd	r17, Z+3	; 0x03
    276e:	24 81       	ldd	r18, Z+4	; 0x04
    2770:	35 81       	ldd	r19, Z+5	; 0x05
    2772:	40 17       	cp	r20, r16
    2774:	51 07       	cpc	r21, r17
    2776:	62 07       	cpc	r22, r18
    2778:	73 07       	cpc	r23, r19
    277a:	60 f0       	brcs	.+24     	; 0x2794 <placeTimer+0x4c>
    277c:	dc 01       	movw	r26, r24
    277e:	17 c0       	rjmp	.+46     	; 0x27ae <placeTimer+0x66>
    2780:	02 81       	ldd	r16, Z+2	; 0x02
    2782:	13 81       	ldd	r17, Z+3	; 0x03
    2784:	24 81       	ldd	r18, Z+4	; 0x04
    2786:	35 81       	ldd	r19, Z+5	; 0x05
    2788:	40 17       	cp	r20, r16
    278a:	51 07       	cpc	r21, r17
    278c:	62 07       	cpc	r22, r18
    278e:	73 07       	cpc	r23, r19
    2790:	68 f4       	brcc	.+26     	; 0x27ac <placeTimer+0x64>
    2792:	03 c0       	rjmp	.+6      	; 0x279a <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2794:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    2796:	a0 e0       	ldi	r26, 0x00	; 0
    2798:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    279a:	04 1b       	sub	r16, r20
    279c:	15 0b       	sbc	r17, r21
    279e:	26 0b       	sbc	r18, r22
    27a0:	37 0b       	sbc	r19, r23
    27a2:	02 83       	std	Z+2, r16	; 0x02
    27a4:	13 83       	std	Z+3, r17	; 0x03
    27a6:	24 83       	std	Z+4, r18	; 0x04
    27a8:	35 83       	std	Z+5, r19	; 0x05
         break;
    27aa:	0a c0       	rjmp	.+20     	; 0x27c0 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    27ac:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    27ae:	40 1b       	sub	r20, r16
    27b0:	51 0b       	sbc	r21, r17
    27b2:	62 0b       	sbc	r22, r18
    27b4:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    27b6:	ed 91       	ld	r30, X+
    27b8:	fc 91       	ld	r31, X
    27ba:	11 97       	sbiw	r26, 0x01	; 1
    27bc:	30 97       	sbiw	r30, 0x00	; 0
    27be:	01 f7       	brne	.-64     	; 0x2780 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    27c0:	4a 83       	std	Y+2, r20	; 0x02
    27c2:	5b 83       	std	Y+3, r21	; 0x03
    27c4:	6c 83       	std	Y+4, r22	; 0x04
    27c6:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    27c8:	10 97       	sbiw	r26, 0x00	; 0
    27ca:	41 f0       	breq	.+16     	; 0x27dc <placeTimer+0x94>
    {
      timer->next = prev->next;
    27cc:	8d 91       	ld	r24, X+
    27ce:	9c 91       	ld	r25, X
    27d0:	11 97       	sbiw	r26, 0x01	; 1
    27d2:	99 83       	std	Y+1, r25	; 0x01
    27d4:	88 83       	st	Y, r24
      prev->next = timer;
    27d6:	cd 93       	st	X+, r28
    27d8:	dc 93       	st	X, r29
    27da:	15 c0       	rjmp	.+42     	; 0x2806 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    27dc:	99 83       	std	Y+1, r25	; 0x01
    27de:	88 83       	st	Y, r24
      timers = timer;
    27e0:	d0 93 0d 0f 	sts	0x0F0D, r29	; 0x800f0d <timers+0x1>
    27e4:	c0 93 0c 0f 	sts	0x0F0C, r28	; 0x800f0c <timers>
    27e8:	0e c0       	rjmp	.+28     	; 0x2806 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    27ea:	19 82       	std	Y+1, r1	; 0x01
    27ec:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    27ee:	8e 81       	ldd	r24, Y+6	; 0x06
    27f0:	9f 81       	ldd	r25, Y+7	; 0x07
    27f2:	a8 85       	ldd	r26, Y+8	; 0x08
    27f4:	b9 85       	ldd	r27, Y+9	; 0x09
    27f6:	8a 83       	std	Y+2, r24	; 0x02
    27f8:	9b 83       	std	Y+3, r25	; 0x03
    27fa:	ac 83       	std	Y+4, r26	; 0x04
    27fc:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    27fe:	d0 93 0d 0f 	sts	0x0F0D, r29	; 0x800f0d <timers+0x1>
    2802:	c0 93 0c 0f 	sts	0x0F0C, r28	; 0x800f0c <timers>
  }
}
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	0f 91       	pop	r16
    280e:	08 95       	ret

00002810 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    2810:	10 92 0d 0f 	sts	0x0F0D, r1	; 0x800f0d <timers+0x1>
    2814:	10 92 0c 0f 	sts	0x0F0C, r1	; 0x800f0c <timers>
    2818:	08 95       	ret

0000281a <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    281e:	a0 91 0c 0f 	lds	r26, 0x0F0C	; 0x800f0c <timers>
    2822:	b0 91 0d 0f 	lds	r27, 0x0F0D	; 0x800f0d <timers+0x1>
    2826:	10 97       	sbiw	r26, 0x00	; 0
    2828:	91 f1       	breq	.+100    	; 0x288e <SYS_TimerStop+0x74>
  {
    if (t == timer)
    282a:	a8 17       	cp	r26, r24
    282c:	b9 07       	cpc	r27, r25
    282e:	51 f5       	brne	.+84     	; 0x2884 <SYS_TimerStop+0x6a>
    2830:	0a c0       	rjmp	.+20     	; 0x2846 <SYS_TimerStop+0x2c>
    2832:	8e 17       	cp	r24, r30
    2834:	9f 07       	cpc	r25, r31
    2836:	29 f5       	brne	.+74     	; 0x2882 <SYS_TimerStop+0x68>
    {
      if (prev)
    2838:	10 97       	sbiw	r26, 0x00	; 0
    283a:	31 f0       	breq	.+12     	; 0x2848 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    283c:	20 81       	ld	r18, Z
    283e:	31 81       	ldd	r19, Z+1	; 0x01
    2840:	2d 93       	st	X+, r18
    2842:	3c 93       	st	X, r19
    2844:	07 c0       	rjmp	.+14     	; 0x2854 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2846:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    2848:	20 81       	ld	r18, Z
    284a:	31 81       	ldd	r19, Z+1	; 0x01
    284c:	30 93 0d 0f 	sts	0x0F0D, r19	; 0x800f0d <timers+0x1>
    2850:	20 93 0c 0f 	sts	0x0F0C, r18	; 0x800f0c <timers>

      if (t->next)
    2854:	01 90       	ld	r0, Z+
    2856:	f0 81       	ld	r31, Z
    2858:	e0 2d       	mov	r30, r0
    285a:	30 97       	sbiw	r30, 0x00	; 0
    285c:	c1 f0       	breq	.+48     	; 0x288e <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    285e:	42 81       	ldd	r20, Z+2	; 0x02
    2860:	53 81       	ldd	r21, Z+3	; 0x03
    2862:	64 81       	ldd	r22, Z+4	; 0x04
    2864:	75 81       	ldd	r23, Z+5	; 0x05
    2866:	ec 01       	movw	r28, r24
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	9b 81       	ldd	r25, Y+3	; 0x03
    286c:	ac 81       	ldd	r26, Y+4	; 0x04
    286e:	bd 81       	ldd	r27, Y+5	; 0x05
    2870:	84 0f       	add	r24, r20
    2872:	95 1f       	adc	r25, r21
    2874:	a6 1f       	adc	r26, r22
    2876:	b7 1f       	adc	r27, r23
    2878:	82 83       	std	Z+2, r24	; 0x02
    287a:	93 83       	std	Z+3, r25	; 0x03
    287c:	a4 83       	std	Z+4, r26	; 0x04
    287e:	b5 83       	std	Z+5, r27	; 0x05
    2880:	06 c0       	rjmp	.+12     	; 0x288e <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2882:	df 01       	movw	r26, r30
    2884:	ed 91       	ld	r30, X+
    2886:	fc 91       	ld	r31, X
    2888:	11 97       	sbiw	r26, 0x01	; 1
    288a:	30 97       	sbiw	r30, 0x00	; 0
    288c:	91 f6       	brne	.-92     	; 0x2832 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    288e:	df 91       	pop	r29
    2890:	cf 91       	pop	r28
    2892:	08 95       	ret

00002894 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2894:	e0 91 0c 0f 	lds	r30, 0x0F0C	; 0x800f0c <timers>
    2898:	f0 91 0d 0f 	lds	r31, 0x0F0D	; 0x800f0d <timers+0x1>
    289c:	30 97       	sbiw	r30, 0x00	; 0
    289e:	71 f0       	breq	.+28     	; 0x28bc <SYS_TimerStarted+0x28>
    if (t == timer)
    28a0:	e8 17       	cp	r30, r24
    28a2:	f9 07       	cpc	r31, r25
    28a4:	21 f4       	brne	.+8      	; 0x28ae <SYS_TimerStarted+0x1a>
    28a6:	0c c0       	rjmp	.+24     	; 0x28c0 <SYS_TimerStarted+0x2c>
    28a8:	8e 17       	cp	r24, r30
    28aa:	9f 07       	cpc	r25, r31
    28ac:	59 f0       	breq	.+22     	; 0x28c4 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    28ae:	01 90       	ld	r0, Z+
    28b0:	f0 81       	ld	r31, Z
    28b2:	e0 2d       	mov	r30, r0
    28b4:	30 97       	sbiw	r30, 0x00	; 0
    28b6:	c1 f7       	brne	.-16     	; 0x28a8 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	08 95       	ret
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	08 95       	ret
    28c4:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    28c6:	08 95       	ret

000028c8 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    28ce:	e2 df       	rcall	.-60     	; 0x2894 <SYS_TimerStarted>
    28d0:	81 11       	cpse	r24, r1
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <SYS_TimerStart+0x10>
    placeTimer(timer);
    28d4:	ce 01       	movw	r24, r28
    28d6:	38 df       	rcall	.-400    	; 0x2748 <placeTimer>
}
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	08 95       	ret

000028de <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    28de:	cf 92       	push	r12
    28e0:	df 92       	push	r13
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    28ea:	80 91 0e 0f 	lds	r24, 0x0F0E	; 0x800f0e <halTimerIrqCount>
    28ee:	88 23       	and	r24, r24
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <SYS_TimerTaskHandler+0x16>
    28f2:	59 c0       	rjmp	.+178    	; 0x29a6 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    28f4:	8f b7       	in	r24, 0x3f	; 63
    28f6:	f8 94       	cli
    cnt = halTimerIrqCount;
    28f8:	c0 90 0e 0f 	lds	r12, 0x0F0E	; 0x800f0e <halTimerIrqCount>
    halTimerIrqCount = 0;
    28fc:	10 92 0e 0f 	sts	0x0F0E, r1	; 0x800f0e <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    2900:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    2902:	d1 2c       	mov	r13, r1
    2904:	e1 2c       	mov	r14, r1
    2906:	f1 2c       	mov	r15, r1
    2908:	cc 0c       	add	r12, r12
    290a:	dd 1c       	adc	r13, r13
    290c:	ee 1c       	adc	r14, r14
    290e:	ff 1c       	adc	r15, r15
    2910:	d7 01       	movw	r26, r14
    2912:	c6 01       	movw	r24, r12
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	aa 1f       	adc	r26, r26
    291a:	bb 1f       	adc	r27, r27
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	aa 1f       	adc	r26, r26
    2922:	bb 1f       	adc	r27, r27
    2924:	c8 0e       	add	r12, r24
    2926:	d9 1e       	adc	r13, r25
    2928:	ea 1e       	adc	r14, r26
    292a:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    292c:	c0 91 0c 0f 	lds	r28, 0x0F0C	; 0x800f0c <timers>
    2930:	d0 91 0d 0f 	lds	r29, 0x0F0D	; 0x800f0d <timers+0x1>
    2934:	20 97       	sbiw	r28, 0x00	; 0
    2936:	b9 f1       	breq	.+110    	; 0x29a6 <SYS_TimerTaskHandler+0xc8>
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	9b 81       	ldd	r25, Y+3	; 0x03
    293c:	ac 81       	ldd	r26, Y+4	; 0x04
    293e:	bd 81       	ldd	r27, Y+5	; 0x05
    2940:	c8 16       	cp	r12, r24
    2942:	d9 06       	cpc	r13, r25
    2944:	ea 06       	cpc	r14, r26
    2946:	fb 06       	cpc	r15, r27
    2948:	10 f1       	brcs	.+68     	; 0x298e <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    294a:	c8 1a       	sub	r12, r24
    294c:	d9 0a       	sbc	r13, r25
    294e:	ea 0a       	sbc	r14, r26
    2950:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    2952:	88 81       	ld	r24, Y
    2954:	99 81       	ldd	r25, Y+1	; 0x01
    2956:	90 93 0d 0f 	sts	0x0F0D, r25	; 0x800f0d <timers+0x1>
    295a:	80 93 0c 0f 	sts	0x0F0C, r24	; 0x800f0c <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    295e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2960:	81 30       	cpi	r24, 0x01	; 1
    2962:	11 f4       	brne	.+4      	; 0x2968 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    2964:	ce 01       	movw	r24, r28
    2966:	f0 de       	rcall	.-544    	; 0x2748 <placeTimer>
    timer->handler(timer);
    2968:	eb 85       	ldd	r30, Y+11	; 0x0b
    296a:	fc 85       	ldd	r31, Y+12	; 0x0c
    296c:	ce 01       	movw	r24, r28
    296e:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    2970:	c0 91 0c 0f 	lds	r28, 0x0F0C	; 0x800f0c <timers>
    2974:	d0 91 0d 0f 	lds	r29, 0x0F0D	; 0x800f0d <timers+0x1>
    2978:	20 97       	sbiw	r28, 0x00	; 0
    297a:	a9 f0       	breq	.+42     	; 0x29a6 <SYS_TimerTaskHandler+0xc8>
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	9b 81       	ldd	r25, Y+3	; 0x03
    2980:	ac 81       	ldd	r26, Y+4	; 0x04
    2982:	bd 81       	ldd	r27, Y+5	; 0x05
    2984:	c8 16       	cp	r12, r24
    2986:	d9 06       	cpc	r13, r25
    2988:	ea 06       	cpc	r14, r26
    298a:	fb 06       	cpc	r15, r27
    298c:	f0 f6       	brcc	.-68     	; 0x294a <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	9b 81       	ldd	r25, Y+3	; 0x03
    2992:	ac 81       	ldd	r26, Y+4	; 0x04
    2994:	bd 81       	ldd	r27, Y+5	; 0x05
    2996:	8c 19       	sub	r24, r12
    2998:	9d 09       	sbc	r25, r13
    299a:	ae 09       	sbc	r26, r14
    299c:	bf 09       	sbc	r27, r15
    299e:	8a 83       	std	Y+2, r24	; 0x02
    29a0:	9b 83       	std	Y+3, r25	; 0x03
    29a2:	ac 83       	std	Y+4, r26	; 0x04
    29a4:	bd 83       	std	Y+5, r27	; 0x05
}
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	df 90       	pop	r13
    29b0:	cf 90       	pop	r12
    29b2:	08 95       	ret

000029b4 <__udivmodsi4>:
    29b4:	a1 e2       	ldi	r26, 0x21	; 33
    29b6:	1a 2e       	mov	r1, r26
    29b8:	aa 1b       	sub	r26, r26
    29ba:	bb 1b       	sub	r27, r27
    29bc:	fd 01       	movw	r30, r26
    29be:	0d c0       	rjmp	.+26     	; 0x29da <__udivmodsi4_ep>

000029c0 <__udivmodsi4_loop>:
    29c0:	aa 1f       	adc	r26, r26
    29c2:	bb 1f       	adc	r27, r27
    29c4:	ee 1f       	adc	r30, r30
    29c6:	ff 1f       	adc	r31, r31
    29c8:	a2 17       	cp	r26, r18
    29ca:	b3 07       	cpc	r27, r19
    29cc:	e4 07       	cpc	r30, r20
    29ce:	f5 07       	cpc	r31, r21
    29d0:	20 f0       	brcs	.+8      	; 0x29da <__udivmodsi4_ep>
    29d2:	a2 1b       	sub	r26, r18
    29d4:	b3 0b       	sbc	r27, r19
    29d6:	e4 0b       	sbc	r30, r20
    29d8:	f5 0b       	sbc	r31, r21

000029da <__udivmodsi4_ep>:
    29da:	66 1f       	adc	r22, r22
    29dc:	77 1f       	adc	r23, r23
    29de:	88 1f       	adc	r24, r24
    29e0:	99 1f       	adc	r25, r25
    29e2:	1a 94       	dec	r1
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <__udivmodsi4_loop>
    29e6:	60 95       	com	r22
    29e8:	70 95       	com	r23
    29ea:	80 95       	com	r24
    29ec:	90 95       	com	r25
    29ee:	9b 01       	movw	r18, r22
    29f0:	ac 01       	movw	r20, r24
    29f2:	bd 01       	movw	r22, r26
    29f4:	cf 01       	movw	r24, r30
    29f6:	08 95       	ret

000029f8 <__tablejump2__>:
    29f8:	ee 0f       	add	r30, r30
    29fa:	ff 1f       	adc	r31, r31
    29fc:	00 24       	eor	r0, r0
    29fe:	00 1c       	adc	r0, r0
    2a00:	0b be       	out	0x3b, r0	; 59
    2a02:	07 90       	elpm	r0, Z+
    2a04:	f6 91       	elpm	r31, Z
    2a06:	e0 2d       	mov	r30, r0
    2a08:	09 94       	ijmp

00002a0a <__umulhisi3>:
    2a0a:	a2 9f       	mul	r26, r18
    2a0c:	b0 01       	movw	r22, r0
    2a0e:	b3 9f       	mul	r27, r19
    2a10:	c0 01       	movw	r24, r0
    2a12:	a3 9f       	mul	r26, r19
    2a14:	70 0d       	add	r23, r0
    2a16:	81 1d       	adc	r24, r1
    2a18:	11 24       	eor	r1, r1
    2a1a:	91 1d       	adc	r25, r1
    2a1c:	b2 9f       	mul	r27, r18
    2a1e:	70 0d       	add	r23, r0
    2a20:	81 1d       	adc	r24, r1
    2a22:	11 24       	eor	r1, r1
    2a24:	91 1d       	adc	r25, r1
    2a26:	08 95       	ret

00002a28 <do_rand>:
    2a28:	8f 92       	push	r8
    2a2a:	9f 92       	push	r9
    2a2c:	af 92       	push	r10
    2a2e:	bf 92       	push	r11
    2a30:	cf 92       	push	r12
    2a32:	df 92       	push	r13
    2a34:	ef 92       	push	r14
    2a36:	ff 92       	push	r15
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	ec 01       	movw	r28, r24
    2a3e:	68 81       	ld	r22, Y
    2a40:	79 81       	ldd	r23, Y+1	; 0x01
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	61 15       	cp	r22, r1
    2a48:	71 05       	cpc	r23, r1
    2a4a:	81 05       	cpc	r24, r1
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	21 f4       	brne	.+8      	; 0x2a58 <do_rand+0x30>
    2a50:	64 e2       	ldi	r22, 0x24	; 36
    2a52:	79 ed       	ldi	r23, 0xD9	; 217
    2a54:	8b e5       	ldi	r24, 0x5B	; 91
    2a56:	97 e0       	ldi	r25, 0x07	; 7
    2a58:	2d e1       	ldi	r18, 0x1D	; 29
    2a5a:	33 ef       	ldi	r19, 0xF3	; 243
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	36 d3       	rcall	.+1644   	; 0x30ce <__divmodsi4>
    2a62:	49 01       	movw	r8, r18
    2a64:	5a 01       	movw	r10, r20
    2a66:	9b 01       	movw	r18, r22
    2a68:	ac 01       	movw	r20, r24
    2a6a:	a7 ea       	ldi	r26, 0xA7	; 167
    2a6c:	b1 e4       	ldi	r27, 0x41	; 65
    2a6e:	4b d3       	rcall	.+1686   	; 0x3106 <__muluhisi3>
    2a70:	6b 01       	movw	r12, r22
    2a72:	7c 01       	movw	r14, r24
    2a74:	ac ee       	ldi	r26, 0xEC	; 236
    2a76:	b4 ef       	ldi	r27, 0xF4	; 244
    2a78:	a5 01       	movw	r20, r10
    2a7a:	94 01       	movw	r18, r8
    2a7c:	50 d3       	rcall	.+1696   	; 0x311e <__mulohisi3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8c 0d       	add	r24, r12
    2a84:	9d 1d       	adc	r25, r13
    2a86:	ae 1d       	adc	r26, r14
    2a88:	bf 1d       	adc	r27, r15
    2a8a:	b7 ff       	sbrs	r27, 7
    2a8c:	03 c0       	rjmp	.+6      	; 0x2a94 <do_rand+0x6c>
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	a1 09       	sbc	r26, r1
    2a92:	b0 48       	sbci	r27, 0x80	; 128
    2a94:	88 83       	st	Y, r24
    2a96:	99 83       	std	Y+1, r25	; 0x01
    2a98:	aa 83       	std	Y+2, r26	; 0x02
    2a9a:	bb 83       	std	Y+3, r27	; 0x03
    2a9c:	9f 77       	andi	r25, 0x7F	; 127
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	bf 90       	pop	r11
    2aac:	af 90       	pop	r10
    2aae:	9f 90       	pop	r9
    2ab0:	8f 90       	pop	r8
    2ab2:	08 95       	ret

00002ab4 <rand_r>:
    2ab4:	b9 cf       	rjmp	.-142    	; 0x2a28 <do_rand>

00002ab6 <rand>:
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	92 e0       	ldi	r25, 0x02	; 2
    2aba:	b6 cf       	rjmp	.-148    	; 0x2a28 <do_rand>

00002abc <srand>:
    2abc:	a0 e0       	ldi	r26, 0x00	; 0
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2ac4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2ac8:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    2acc:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    2ad0:	08 95       	ret

00002ad2 <memcpy>:
    2ad2:	fb 01       	movw	r30, r22
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <memcpy+0xa>
    2ad8:	01 90       	ld	r0, Z+
    2ada:	0d 92       	st	X+, r0
    2adc:	41 50       	subi	r20, 0x01	; 1
    2ade:	50 40       	sbci	r21, 0x00	; 0
    2ae0:	d8 f7       	brcc	.-10     	; 0x2ad8 <memcpy+0x6>
    2ae2:	08 95       	ret

00002ae4 <printf>:
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	ae 01       	movw	r20, r28
    2aee:	4b 5f       	subi	r20, 0xFB	; 251
    2af0:	5f 4f       	sbci	r21, 0xFF	; 255
    2af2:	fa 01       	movw	r30, r20
    2af4:	61 91       	ld	r22, Z+
    2af6:	71 91       	ld	r23, Z+
    2af8:	af 01       	movw	r20, r30
    2afa:	80 91 39 0f 	lds	r24, 0x0F39	; 0x800f39 <__iob+0x2>
    2afe:	90 91 3a 0f 	lds	r25, 0x0F3A	; 0x800f3a <__iob+0x3>
    2b02:	38 d0       	rcall	.+112    	; 0x2b74 <vfprintf>
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	08 95       	ret

00002b0a <putchar>:
    2b0a:	60 91 39 0f 	lds	r22, 0x0F39	; 0x800f39 <__iob+0x2>
    2b0e:	70 91 3a 0f 	lds	r23, 0x0F3A	; 0x800f3a <__iob+0x3>
    2b12:	43 c2       	rjmp	.+1158   	; 0x2f9a <fputc>

00002b14 <puts>:
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	e0 91 39 0f 	lds	r30, 0x0F39	; 0x800f39 <__iob+0x2>
    2b20:	f0 91 3a 0f 	lds	r31, 0x0F3A	; 0x800f3a <__iob+0x3>
    2b24:	23 81       	ldd	r18, Z+3	; 0x03
    2b26:	21 ff       	sbrs	r18, 1
    2b28:	1b c0       	rjmp	.+54     	; 0x2b60 <puts+0x4c>
    2b2a:	8c 01       	movw	r16, r24
    2b2c:	d0 e0       	ldi	r29, 0x00	; 0
    2b2e:	c0 e0       	ldi	r28, 0x00	; 0
    2b30:	f8 01       	movw	r30, r16
    2b32:	81 91       	ld	r24, Z+
    2b34:	8f 01       	movw	r16, r30
    2b36:	60 91 39 0f 	lds	r22, 0x0F39	; 0x800f39 <__iob+0x2>
    2b3a:	70 91 3a 0f 	lds	r23, 0x0F3A	; 0x800f3a <__iob+0x3>
    2b3e:	db 01       	movw	r26, r22
    2b40:	18 96       	adiw	r26, 0x08	; 8
    2b42:	ed 91       	ld	r30, X+
    2b44:	fc 91       	ld	r31, X
    2b46:	19 97       	sbiw	r26, 0x09	; 9
    2b48:	88 23       	and	r24, r24
    2b4a:	31 f0       	breq	.+12     	; 0x2b58 <puts+0x44>
    2b4c:	09 95       	icall
    2b4e:	89 2b       	or	r24, r25
    2b50:	79 f3       	breq	.-34     	; 0x2b30 <puts+0x1c>
    2b52:	df ef       	ldi	r29, 0xFF	; 255
    2b54:	cf ef       	ldi	r28, 0xFF	; 255
    2b56:	ec cf       	rjmp	.-40     	; 0x2b30 <puts+0x1c>
    2b58:	8a e0       	ldi	r24, 0x0A	; 10
    2b5a:	09 95       	icall
    2b5c:	89 2b       	or	r24, r25
    2b5e:	19 f0       	breq	.+6      	; 0x2b66 <puts+0x52>
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
    2b62:	9f ef       	ldi	r25, 0xFF	; 255
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <puts+0x56>
    2b66:	8d 2f       	mov	r24, r29
    2b68:	9c 2f       	mov	r25, r28
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	08 95       	ret

00002b74 <vfprintf>:
    2b74:	2f 92       	push	r2
    2b76:	3f 92       	push	r3
    2b78:	4f 92       	push	r4
    2b7a:	5f 92       	push	r5
    2b7c:	6f 92       	push	r6
    2b7e:	7f 92       	push	r7
    2b80:	8f 92       	push	r8
    2b82:	9f 92       	push	r9
    2b84:	af 92       	push	r10
    2b86:	bf 92       	push	r11
    2b88:	cf 92       	push	r12
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	2b 97       	sbiw	r28, 0x0b	; 11
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	6c 01       	movw	r12, r24
    2baa:	7b 01       	movw	r14, r22
    2bac:	8a 01       	movw	r16, r20
    2bae:	fc 01       	movw	r30, r24
    2bb0:	17 82       	std	Z+7, r1	; 0x07
    2bb2:	16 82       	std	Z+6, r1	; 0x06
    2bb4:	83 81       	ldd	r24, Z+3	; 0x03
    2bb6:	81 ff       	sbrs	r24, 1
    2bb8:	bf c1       	rjmp	.+894    	; 0x2f38 <vfprintf+0x3c4>
    2bba:	ce 01       	movw	r24, r28
    2bbc:	01 96       	adiw	r24, 0x01	; 1
    2bbe:	3c 01       	movw	r6, r24
    2bc0:	f6 01       	movw	r30, r12
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	f7 01       	movw	r30, r14
    2bc6:	93 fd       	sbrc	r25, 3
    2bc8:	85 91       	lpm	r24, Z+
    2bca:	93 ff       	sbrs	r25, 3
    2bcc:	81 91       	ld	r24, Z+
    2bce:	7f 01       	movw	r14, r30
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <vfprintf+0x62>
    2bd4:	ad c1       	rjmp	.+858    	; 0x2f30 <vfprintf+0x3bc>
    2bd6:	85 32       	cpi	r24, 0x25	; 37
    2bd8:	39 f4       	brne	.+14     	; 0x2be8 <vfprintf+0x74>
    2bda:	93 fd       	sbrc	r25, 3
    2bdc:	85 91       	lpm	r24, Z+
    2bde:	93 ff       	sbrs	r25, 3
    2be0:	81 91       	ld	r24, Z+
    2be2:	7f 01       	movw	r14, r30
    2be4:	85 32       	cpi	r24, 0x25	; 37
    2be6:	21 f4       	brne	.+8      	; 0x2bf0 <vfprintf+0x7c>
    2be8:	b6 01       	movw	r22, r12
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	d6 d1       	rcall	.+940    	; 0x2f9a <fputc>
    2bee:	e8 cf       	rjmp	.-48     	; 0x2bc0 <vfprintf+0x4c>
    2bf0:	91 2c       	mov	r9, r1
    2bf2:	21 2c       	mov	r2, r1
    2bf4:	31 2c       	mov	r3, r1
    2bf6:	ff e1       	ldi	r31, 0x1F	; 31
    2bf8:	f3 15       	cp	r31, r3
    2bfa:	d8 f0       	brcs	.+54     	; 0x2c32 <vfprintf+0xbe>
    2bfc:	8b 32       	cpi	r24, 0x2B	; 43
    2bfe:	79 f0       	breq	.+30     	; 0x2c1e <vfprintf+0xaa>
    2c00:	38 f4       	brcc	.+14     	; 0x2c10 <vfprintf+0x9c>
    2c02:	80 32       	cpi	r24, 0x20	; 32
    2c04:	79 f0       	breq	.+30     	; 0x2c24 <vfprintf+0xb0>
    2c06:	83 32       	cpi	r24, 0x23	; 35
    2c08:	a1 f4       	brne	.+40     	; 0x2c32 <vfprintf+0xbe>
    2c0a:	23 2d       	mov	r18, r3
    2c0c:	20 61       	ori	r18, 0x10	; 16
    2c0e:	1d c0       	rjmp	.+58     	; 0x2c4a <vfprintf+0xd6>
    2c10:	8d 32       	cpi	r24, 0x2D	; 45
    2c12:	61 f0       	breq	.+24     	; 0x2c2c <vfprintf+0xb8>
    2c14:	80 33       	cpi	r24, 0x30	; 48
    2c16:	69 f4       	brne	.+26     	; 0x2c32 <vfprintf+0xbe>
    2c18:	23 2d       	mov	r18, r3
    2c1a:	21 60       	ori	r18, 0x01	; 1
    2c1c:	16 c0       	rjmp	.+44     	; 0x2c4a <vfprintf+0xd6>
    2c1e:	83 2d       	mov	r24, r3
    2c20:	82 60       	ori	r24, 0x02	; 2
    2c22:	38 2e       	mov	r3, r24
    2c24:	e3 2d       	mov	r30, r3
    2c26:	e4 60       	ori	r30, 0x04	; 4
    2c28:	3e 2e       	mov	r3, r30
    2c2a:	2a c0       	rjmp	.+84     	; 0x2c80 <vfprintf+0x10c>
    2c2c:	f3 2d       	mov	r31, r3
    2c2e:	f8 60       	ori	r31, 0x08	; 8
    2c30:	1d c0       	rjmp	.+58     	; 0x2c6c <vfprintf+0xf8>
    2c32:	37 fc       	sbrc	r3, 7
    2c34:	2d c0       	rjmp	.+90     	; 0x2c90 <vfprintf+0x11c>
    2c36:	20 ed       	ldi	r18, 0xD0	; 208
    2c38:	28 0f       	add	r18, r24
    2c3a:	2a 30       	cpi	r18, 0x0A	; 10
    2c3c:	40 f0       	brcs	.+16     	; 0x2c4e <vfprintf+0xda>
    2c3e:	8e 32       	cpi	r24, 0x2E	; 46
    2c40:	b9 f4       	brne	.+46     	; 0x2c70 <vfprintf+0xfc>
    2c42:	36 fc       	sbrc	r3, 6
    2c44:	75 c1       	rjmp	.+746    	; 0x2f30 <vfprintf+0x3bc>
    2c46:	23 2d       	mov	r18, r3
    2c48:	20 64       	ori	r18, 0x40	; 64
    2c4a:	32 2e       	mov	r3, r18
    2c4c:	19 c0       	rjmp	.+50     	; 0x2c80 <vfprintf+0x10c>
    2c4e:	36 fe       	sbrs	r3, 6
    2c50:	06 c0       	rjmp	.+12     	; 0x2c5e <vfprintf+0xea>
    2c52:	8a e0       	ldi	r24, 0x0A	; 10
    2c54:	98 9e       	mul	r9, r24
    2c56:	20 0d       	add	r18, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	92 2e       	mov	r9, r18
    2c5c:	11 c0       	rjmp	.+34     	; 0x2c80 <vfprintf+0x10c>
    2c5e:	ea e0       	ldi	r30, 0x0A	; 10
    2c60:	2e 9e       	mul	r2, r30
    2c62:	20 0d       	add	r18, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	22 2e       	mov	r2, r18
    2c68:	f3 2d       	mov	r31, r3
    2c6a:	f0 62       	ori	r31, 0x20	; 32
    2c6c:	3f 2e       	mov	r3, r31
    2c6e:	08 c0       	rjmp	.+16     	; 0x2c80 <vfprintf+0x10c>
    2c70:	8c 36       	cpi	r24, 0x6C	; 108
    2c72:	21 f4       	brne	.+8      	; 0x2c7c <vfprintf+0x108>
    2c74:	83 2d       	mov	r24, r3
    2c76:	80 68       	ori	r24, 0x80	; 128
    2c78:	38 2e       	mov	r3, r24
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <vfprintf+0x10c>
    2c7c:	88 36       	cpi	r24, 0x68	; 104
    2c7e:	41 f4       	brne	.+16     	; 0x2c90 <vfprintf+0x11c>
    2c80:	f7 01       	movw	r30, r14
    2c82:	93 fd       	sbrc	r25, 3
    2c84:	85 91       	lpm	r24, Z+
    2c86:	93 ff       	sbrs	r25, 3
    2c88:	81 91       	ld	r24, Z+
    2c8a:	7f 01       	movw	r14, r30
    2c8c:	81 11       	cpse	r24, r1
    2c8e:	b3 cf       	rjmp	.-154    	; 0x2bf6 <vfprintf+0x82>
    2c90:	98 2f       	mov	r25, r24
    2c92:	9f 7d       	andi	r25, 0xDF	; 223
    2c94:	95 54       	subi	r25, 0x45	; 69
    2c96:	93 30       	cpi	r25, 0x03	; 3
    2c98:	28 f4       	brcc	.+10     	; 0x2ca4 <vfprintf+0x130>
    2c9a:	0c 5f       	subi	r16, 0xFC	; 252
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	9f e3       	ldi	r25, 0x3F	; 63
    2ca0:	99 83       	std	Y+1, r25	; 0x01
    2ca2:	0d c0       	rjmp	.+26     	; 0x2cbe <vfprintf+0x14a>
    2ca4:	83 36       	cpi	r24, 0x63	; 99
    2ca6:	31 f0       	breq	.+12     	; 0x2cb4 <vfprintf+0x140>
    2ca8:	83 37       	cpi	r24, 0x73	; 115
    2caa:	71 f0       	breq	.+28     	; 0x2cc8 <vfprintf+0x154>
    2cac:	83 35       	cpi	r24, 0x53	; 83
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <vfprintf+0x13e>
    2cb0:	55 c0       	rjmp	.+170    	; 0x2d5c <vfprintf+0x1e8>
    2cb2:	20 c0       	rjmp	.+64     	; 0x2cf4 <vfprintf+0x180>
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	80 81       	ld	r24, Z
    2cb8:	89 83       	std	Y+1, r24	; 0x01
    2cba:	0e 5f       	subi	r16, 0xFE	; 254
    2cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbe:	88 24       	eor	r8, r8
    2cc0:	83 94       	inc	r8
    2cc2:	91 2c       	mov	r9, r1
    2cc4:	53 01       	movw	r10, r6
    2cc6:	12 c0       	rjmp	.+36     	; 0x2cec <vfprintf+0x178>
    2cc8:	28 01       	movw	r4, r16
    2cca:	f2 e0       	ldi	r31, 0x02	; 2
    2ccc:	4f 0e       	add	r4, r31
    2cce:	51 1c       	adc	r5, r1
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	a0 80       	ld	r10, Z
    2cd4:	b1 80       	ldd	r11, Z+1	; 0x01
    2cd6:	36 fe       	sbrs	r3, 6
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <vfprintf+0x16c>
    2cda:	69 2d       	mov	r22, r9
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <vfprintf+0x170>
    2ce0:	6f ef       	ldi	r22, 0xFF	; 255
    2ce2:	7f ef       	ldi	r23, 0xFF	; 255
    2ce4:	c5 01       	movw	r24, r10
    2ce6:	4e d1       	rcall	.+668    	; 0x2f84 <strnlen>
    2ce8:	4c 01       	movw	r8, r24
    2cea:	82 01       	movw	r16, r4
    2cec:	f3 2d       	mov	r31, r3
    2cee:	ff 77       	andi	r31, 0x7F	; 127
    2cf0:	3f 2e       	mov	r3, r31
    2cf2:	15 c0       	rjmp	.+42     	; 0x2d1e <vfprintf+0x1aa>
    2cf4:	28 01       	movw	r4, r16
    2cf6:	22 e0       	ldi	r18, 0x02	; 2
    2cf8:	42 0e       	add	r4, r18
    2cfa:	51 1c       	adc	r5, r1
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	a0 80       	ld	r10, Z
    2d00:	b1 80       	ldd	r11, Z+1	; 0x01
    2d02:	36 fe       	sbrs	r3, 6
    2d04:	03 c0       	rjmp	.+6      	; 0x2d0c <vfprintf+0x198>
    2d06:	69 2d       	mov	r22, r9
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <vfprintf+0x19c>
    2d0c:	6f ef       	ldi	r22, 0xFF	; 255
    2d0e:	7f ef       	ldi	r23, 0xFF	; 255
    2d10:	c5 01       	movw	r24, r10
    2d12:	2d d1       	rcall	.+602    	; 0x2f6e <strnlen_P>
    2d14:	4c 01       	movw	r8, r24
    2d16:	f3 2d       	mov	r31, r3
    2d18:	f0 68       	ori	r31, 0x80	; 128
    2d1a:	3f 2e       	mov	r3, r31
    2d1c:	82 01       	movw	r16, r4
    2d1e:	33 fc       	sbrc	r3, 3
    2d20:	19 c0       	rjmp	.+50     	; 0x2d54 <vfprintf+0x1e0>
    2d22:	82 2d       	mov	r24, r2
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	88 16       	cp	r8, r24
    2d28:	99 06       	cpc	r9, r25
    2d2a:	a0 f4       	brcc	.+40     	; 0x2d54 <vfprintf+0x1e0>
    2d2c:	b6 01       	movw	r22, r12
    2d2e:	80 e2       	ldi	r24, 0x20	; 32
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	33 d1       	rcall	.+614    	; 0x2f9a <fputc>
    2d34:	2a 94       	dec	r2
    2d36:	f5 cf       	rjmp	.-22     	; 0x2d22 <vfprintf+0x1ae>
    2d38:	f5 01       	movw	r30, r10
    2d3a:	37 fc       	sbrc	r3, 7
    2d3c:	85 91       	lpm	r24, Z+
    2d3e:	37 fe       	sbrs	r3, 7
    2d40:	81 91       	ld	r24, Z+
    2d42:	5f 01       	movw	r10, r30
    2d44:	b6 01       	movw	r22, r12
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	28 d1       	rcall	.+592    	; 0x2f9a <fputc>
    2d4a:	21 10       	cpse	r2, r1
    2d4c:	2a 94       	dec	r2
    2d4e:	21 e0       	ldi	r18, 0x01	; 1
    2d50:	82 1a       	sub	r8, r18
    2d52:	91 08       	sbc	r9, r1
    2d54:	81 14       	cp	r8, r1
    2d56:	91 04       	cpc	r9, r1
    2d58:	79 f7       	brne	.-34     	; 0x2d38 <vfprintf+0x1c4>
    2d5a:	e1 c0       	rjmp	.+450    	; 0x2f1e <vfprintf+0x3aa>
    2d5c:	84 36       	cpi	r24, 0x64	; 100
    2d5e:	11 f0       	breq	.+4      	; 0x2d64 <vfprintf+0x1f0>
    2d60:	89 36       	cpi	r24, 0x69	; 105
    2d62:	39 f5       	brne	.+78     	; 0x2db2 <vfprintf+0x23e>
    2d64:	f8 01       	movw	r30, r16
    2d66:	37 fe       	sbrs	r3, 7
    2d68:	07 c0       	rjmp	.+14     	; 0x2d78 <vfprintf+0x204>
    2d6a:	60 81       	ld	r22, Z
    2d6c:	71 81       	ldd	r23, Z+1	; 0x01
    2d6e:	82 81       	ldd	r24, Z+2	; 0x02
    2d70:	93 81       	ldd	r25, Z+3	; 0x03
    2d72:	0c 5f       	subi	r16, 0xFC	; 252
    2d74:	1f 4f       	sbci	r17, 0xFF	; 255
    2d76:	08 c0       	rjmp	.+16     	; 0x2d88 <vfprintf+0x214>
    2d78:	60 81       	ld	r22, Z
    2d7a:	71 81       	ldd	r23, Z+1	; 0x01
    2d7c:	07 2e       	mov	r0, r23
    2d7e:	00 0c       	add	r0, r0
    2d80:	88 0b       	sbc	r24, r24
    2d82:	99 0b       	sbc	r25, r25
    2d84:	0e 5f       	subi	r16, 0xFE	; 254
    2d86:	1f 4f       	sbci	r17, 0xFF	; 255
    2d88:	f3 2d       	mov	r31, r3
    2d8a:	ff 76       	andi	r31, 0x6F	; 111
    2d8c:	3f 2e       	mov	r3, r31
    2d8e:	97 ff       	sbrs	r25, 7
    2d90:	09 c0       	rjmp	.+18     	; 0x2da4 <vfprintf+0x230>
    2d92:	90 95       	com	r25
    2d94:	80 95       	com	r24
    2d96:	70 95       	com	r23
    2d98:	61 95       	neg	r22
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2da0:	f0 68       	ori	r31, 0x80	; 128
    2da2:	3f 2e       	mov	r3, r31
    2da4:	2a e0       	ldi	r18, 0x0A	; 10
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	a3 01       	movw	r20, r6
    2daa:	33 d1       	rcall	.+614    	; 0x3012 <__ultoa_invert>
    2dac:	88 2e       	mov	r8, r24
    2dae:	86 18       	sub	r8, r6
    2db0:	44 c0       	rjmp	.+136    	; 0x2e3a <vfprintf+0x2c6>
    2db2:	85 37       	cpi	r24, 0x75	; 117
    2db4:	31 f4       	brne	.+12     	; 0x2dc2 <vfprintf+0x24e>
    2db6:	23 2d       	mov	r18, r3
    2db8:	2f 7e       	andi	r18, 0xEF	; 239
    2dba:	b2 2e       	mov	r11, r18
    2dbc:	2a e0       	ldi	r18, 0x0A	; 10
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	25 c0       	rjmp	.+74     	; 0x2e0c <vfprintf+0x298>
    2dc2:	93 2d       	mov	r25, r3
    2dc4:	99 7f       	andi	r25, 0xF9	; 249
    2dc6:	b9 2e       	mov	r11, r25
    2dc8:	8f 36       	cpi	r24, 0x6F	; 111
    2dca:	c1 f0       	breq	.+48     	; 0x2dfc <vfprintf+0x288>
    2dcc:	18 f4       	brcc	.+6      	; 0x2dd4 <vfprintf+0x260>
    2dce:	88 35       	cpi	r24, 0x58	; 88
    2dd0:	79 f0       	breq	.+30     	; 0x2df0 <vfprintf+0x27c>
    2dd2:	ae c0       	rjmp	.+348    	; 0x2f30 <vfprintf+0x3bc>
    2dd4:	80 37       	cpi	r24, 0x70	; 112
    2dd6:	19 f0       	breq	.+6      	; 0x2dde <vfprintf+0x26a>
    2dd8:	88 37       	cpi	r24, 0x78	; 120
    2dda:	21 f0       	breq	.+8      	; 0x2de4 <vfprintf+0x270>
    2ddc:	a9 c0       	rjmp	.+338    	; 0x2f30 <vfprintf+0x3bc>
    2dde:	e9 2f       	mov	r30, r25
    2de0:	e0 61       	ori	r30, 0x10	; 16
    2de2:	be 2e       	mov	r11, r30
    2de4:	b4 fe       	sbrs	r11, 4
    2de6:	0d c0       	rjmp	.+26     	; 0x2e02 <vfprintf+0x28e>
    2de8:	fb 2d       	mov	r31, r11
    2dea:	f4 60       	ori	r31, 0x04	; 4
    2dec:	bf 2e       	mov	r11, r31
    2dee:	09 c0       	rjmp	.+18     	; 0x2e02 <vfprintf+0x28e>
    2df0:	34 fe       	sbrs	r3, 4
    2df2:	0a c0       	rjmp	.+20     	; 0x2e08 <vfprintf+0x294>
    2df4:	29 2f       	mov	r18, r25
    2df6:	26 60       	ori	r18, 0x06	; 6
    2df8:	b2 2e       	mov	r11, r18
    2dfa:	06 c0       	rjmp	.+12     	; 0x2e08 <vfprintf+0x294>
    2dfc:	28 e0       	ldi	r18, 0x08	; 8
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	05 c0       	rjmp	.+10     	; 0x2e0c <vfprintf+0x298>
    2e02:	20 e1       	ldi	r18, 0x10	; 16
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <vfprintf+0x298>
    2e08:	20 e1       	ldi	r18, 0x10	; 16
    2e0a:	32 e0       	ldi	r19, 0x02	; 2
    2e0c:	f8 01       	movw	r30, r16
    2e0e:	b7 fe       	sbrs	r11, 7
    2e10:	07 c0       	rjmp	.+14     	; 0x2e20 <vfprintf+0x2ac>
    2e12:	60 81       	ld	r22, Z
    2e14:	71 81       	ldd	r23, Z+1	; 0x01
    2e16:	82 81       	ldd	r24, Z+2	; 0x02
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	0c 5f       	subi	r16, 0xFC	; 252
    2e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1e:	06 c0       	rjmp	.+12     	; 0x2e2c <vfprintf+0x2b8>
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 5f       	subi	r16, 0xFE	; 254
    2e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2c:	a3 01       	movw	r20, r6
    2e2e:	f1 d0       	rcall	.+482    	; 0x3012 <__ultoa_invert>
    2e30:	88 2e       	mov	r8, r24
    2e32:	86 18       	sub	r8, r6
    2e34:	fb 2d       	mov	r31, r11
    2e36:	ff 77       	andi	r31, 0x7F	; 127
    2e38:	3f 2e       	mov	r3, r31
    2e3a:	36 fe       	sbrs	r3, 6
    2e3c:	0d c0       	rjmp	.+26     	; 0x2e58 <vfprintf+0x2e4>
    2e3e:	23 2d       	mov	r18, r3
    2e40:	2e 7f       	andi	r18, 0xFE	; 254
    2e42:	a2 2e       	mov	r10, r18
    2e44:	89 14       	cp	r8, r9
    2e46:	58 f4       	brcc	.+22     	; 0x2e5e <vfprintf+0x2ea>
    2e48:	34 fe       	sbrs	r3, 4
    2e4a:	0b c0       	rjmp	.+22     	; 0x2e62 <vfprintf+0x2ee>
    2e4c:	32 fc       	sbrc	r3, 2
    2e4e:	09 c0       	rjmp	.+18     	; 0x2e62 <vfprintf+0x2ee>
    2e50:	83 2d       	mov	r24, r3
    2e52:	8e 7e       	andi	r24, 0xEE	; 238
    2e54:	a8 2e       	mov	r10, r24
    2e56:	05 c0       	rjmp	.+10     	; 0x2e62 <vfprintf+0x2ee>
    2e58:	b8 2c       	mov	r11, r8
    2e5a:	a3 2c       	mov	r10, r3
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <vfprintf+0x2f0>
    2e5e:	b8 2c       	mov	r11, r8
    2e60:	01 c0       	rjmp	.+2      	; 0x2e64 <vfprintf+0x2f0>
    2e62:	b9 2c       	mov	r11, r9
    2e64:	a4 fe       	sbrs	r10, 4
    2e66:	0f c0       	rjmp	.+30     	; 0x2e86 <vfprintf+0x312>
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e8 0d       	add	r30, r8
    2e6c:	f1 1d       	adc	r31, r1
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 33       	cpi	r24, 0x30	; 48
    2e72:	21 f4       	brne	.+8      	; 0x2e7c <vfprintf+0x308>
    2e74:	9a 2d       	mov	r25, r10
    2e76:	99 7e       	andi	r25, 0xE9	; 233
    2e78:	a9 2e       	mov	r10, r25
    2e7a:	09 c0       	rjmp	.+18     	; 0x2e8e <vfprintf+0x31a>
    2e7c:	a2 fe       	sbrs	r10, 2
    2e7e:	06 c0       	rjmp	.+12     	; 0x2e8c <vfprintf+0x318>
    2e80:	b3 94       	inc	r11
    2e82:	b3 94       	inc	r11
    2e84:	04 c0       	rjmp	.+8      	; 0x2e8e <vfprintf+0x31a>
    2e86:	8a 2d       	mov	r24, r10
    2e88:	86 78       	andi	r24, 0x86	; 134
    2e8a:	09 f0       	breq	.+2      	; 0x2e8e <vfprintf+0x31a>
    2e8c:	b3 94       	inc	r11
    2e8e:	a3 fc       	sbrc	r10, 3
    2e90:	10 c0       	rjmp	.+32     	; 0x2eb2 <vfprintf+0x33e>
    2e92:	a0 fe       	sbrs	r10, 0
    2e94:	06 c0       	rjmp	.+12     	; 0x2ea2 <vfprintf+0x32e>
    2e96:	b2 14       	cp	r11, r2
    2e98:	80 f4       	brcc	.+32     	; 0x2eba <vfprintf+0x346>
    2e9a:	28 0c       	add	r2, r8
    2e9c:	92 2c       	mov	r9, r2
    2e9e:	9b 18       	sub	r9, r11
    2ea0:	0d c0       	rjmp	.+26     	; 0x2ebc <vfprintf+0x348>
    2ea2:	b2 14       	cp	r11, r2
    2ea4:	58 f4       	brcc	.+22     	; 0x2ebc <vfprintf+0x348>
    2ea6:	b6 01       	movw	r22, r12
    2ea8:	80 e2       	ldi	r24, 0x20	; 32
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	76 d0       	rcall	.+236    	; 0x2f9a <fputc>
    2eae:	b3 94       	inc	r11
    2eb0:	f8 cf       	rjmp	.-16     	; 0x2ea2 <vfprintf+0x32e>
    2eb2:	b2 14       	cp	r11, r2
    2eb4:	18 f4       	brcc	.+6      	; 0x2ebc <vfprintf+0x348>
    2eb6:	2b 18       	sub	r2, r11
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <vfprintf+0x34a>
    2eba:	98 2c       	mov	r9, r8
    2ebc:	21 2c       	mov	r2, r1
    2ebe:	a4 fe       	sbrs	r10, 4
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <vfprintf+0x36c>
    2ec2:	b6 01       	movw	r22, r12
    2ec4:	80 e3       	ldi	r24, 0x30	; 48
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	68 d0       	rcall	.+208    	; 0x2f9a <fputc>
    2eca:	a2 fe       	sbrs	r10, 2
    2ecc:	16 c0       	rjmp	.+44     	; 0x2efa <vfprintf+0x386>
    2ece:	a1 fc       	sbrc	r10, 1
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <vfprintf+0x364>
    2ed2:	88 e7       	ldi	r24, 0x78	; 120
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <vfprintf+0x368>
    2ed8:	88 e5       	ldi	r24, 0x58	; 88
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	b6 01       	movw	r22, r12
    2ede:	0c c0       	rjmp	.+24     	; 0x2ef8 <vfprintf+0x384>
    2ee0:	8a 2d       	mov	r24, r10
    2ee2:	86 78       	andi	r24, 0x86	; 134
    2ee4:	51 f0       	breq	.+20     	; 0x2efa <vfprintf+0x386>
    2ee6:	a1 fe       	sbrs	r10, 1
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <vfprintf+0x37a>
    2eea:	8b e2       	ldi	r24, 0x2B	; 43
    2eec:	01 c0       	rjmp	.+2      	; 0x2ef0 <vfprintf+0x37c>
    2eee:	80 e2       	ldi	r24, 0x20	; 32
    2ef0:	a7 fc       	sbrc	r10, 7
    2ef2:	8d e2       	ldi	r24, 0x2D	; 45
    2ef4:	b6 01       	movw	r22, r12
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	50 d0       	rcall	.+160    	; 0x2f9a <fputc>
    2efa:	89 14       	cp	r8, r9
    2efc:	30 f4       	brcc	.+12     	; 0x2f0a <vfprintf+0x396>
    2efe:	b6 01       	movw	r22, r12
    2f00:	80 e3       	ldi	r24, 0x30	; 48
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	4a d0       	rcall	.+148    	; 0x2f9a <fputc>
    2f06:	9a 94       	dec	r9
    2f08:	f8 cf       	rjmp	.-16     	; 0x2efa <vfprintf+0x386>
    2f0a:	8a 94       	dec	r8
    2f0c:	f3 01       	movw	r30, r6
    2f0e:	e8 0d       	add	r30, r8
    2f10:	f1 1d       	adc	r31, r1
    2f12:	80 81       	ld	r24, Z
    2f14:	b6 01       	movw	r22, r12
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	40 d0       	rcall	.+128    	; 0x2f9a <fputc>
    2f1a:	81 10       	cpse	r8, r1
    2f1c:	f6 cf       	rjmp	.-20     	; 0x2f0a <vfprintf+0x396>
    2f1e:	22 20       	and	r2, r2
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <vfprintf+0x3b0>
    2f22:	4e ce       	rjmp	.-868    	; 0x2bc0 <vfprintf+0x4c>
    2f24:	b6 01       	movw	r22, r12
    2f26:	80 e2       	ldi	r24, 0x20	; 32
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	37 d0       	rcall	.+110    	; 0x2f9a <fputc>
    2f2c:	2a 94       	dec	r2
    2f2e:	f7 cf       	rjmp	.-18     	; 0x2f1e <vfprintf+0x3aa>
    2f30:	f6 01       	movw	r30, r12
    2f32:	86 81       	ldd	r24, Z+6	; 0x06
    2f34:	97 81       	ldd	r25, Z+7	; 0x07
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <vfprintf+0x3c8>
    2f38:	8f ef       	ldi	r24, 0xFF	; 255
    2f3a:	9f ef       	ldi	r25, 0xFF	; 255
    2f3c:	2b 96       	adiw	r28, 0x0b	; 11
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	1f 91       	pop	r17
    2f4e:	0f 91       	pop	r16
    2f50:	ff 90       	pop	r15
    2f52:	ef 90       	pop	r14
    2f54:	df 90       	pop	r13
    2f56:	cf 90       	pop	r12
    2f58:	bf 90       	pop	r11
    2f5a:	af 90       	pop	r10
    2f5c:	9f 90       	pop	r9
    2f5e:	8f 90       	pop	r8
    2f60:	7f 90       	pop	r7
    2f62:	6f 90       	pop	r6
    2f64:	5f 90       	pop	r5
    2f66:	4f 90       	pop	r4
    2f68:	3f 90       	pop	r3
    2f6a:	2f 90       	pop	r2
    2f6c:	08 95       	ret

00002f6e <strnlen_P>:
    2f6e:	fc 01       	movw	r30, r24
    2f70:	05 90       	lpm	r0, Z+
    2f72:	61 50       	subi	r22, 0x01	; 1
    2f74:	70 40       	sbci	r23, 0x00	; 0
    2f76:	01 10       	cpse	r0, r1
    2f78:	d8 f7       	brcc	.-10     	; 0x2f70 <strnlen_P+0x2>
    2f7a:	80 95       	com	r24
    2f7c:	90 95       	com	r25
    2f7e:	8e 0f       	add	r24, r30
    2f80:	9f 1f       	adc	r25, r31
    2f82:	08 95       	ret

00002f84 <strnlen>:
    2f84:	fc 01       	movw	r30, r24
    2f86:	61 50       	subi	r22, 0x01	; 1
    2f88:	70 40       	sbci	r23, 0x00	; 0
    2f8a:	01 90       	ld	r0, Z+
    2f8c:	01 10       	cpse	r0, r1
    2f8e:	d8 f7       	brcc	.-10     	; 0x2f86 <strnlen+0x2>
    2f90:	80 95       	com	r24
    2f92:	90 95       	com	r25
    2f94:	8e 0f       	add	r24, r30
    2f96:	9f 1f       	adc	r25, r31
    2f98:	08 95       	ret

00002f9a <fputc>:
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	fb 01       	movw	r30, r22
    2fa4:	23 81       	ldd	r18, Z+3	; 0x03
    2fa6:	21 fd       	sbrc	r18, 1
    2fa8:	03 c0       	rjmp	.+6      	; 0x2fb0 <fputc+0x16>
    2faa:	8f ef       	ldi	r24, 0xFF	; 255
    2fac:	9f ef       	ldi	r25, 0xFF	; 255
    2fae:	2c c0       	rjmp	.+88     	; 0x3008 <fputc+0x6e>
    2fb0:	22 ff       	sbrs	r18, 2
    2fb2:	16 c0       	rjmp	.+44     	; 0x2fe0 <fputc+0x46>
    2fb4:	46 81       	ldd	r20, Z+6	; 0x06
    2fb6:	57 81       	ldd	r21, Z+7	; 0x07
    2fb8:	24 81       	ldd	r18, Z+4	; 0x04
    2fba:	35 81       	ldd	r19, Z+5	; 0x05
    2fbc:	42 17       	cp	r20, r18
    2fbe:	53 07       	cpc	r21, r19
    2fc0:	44 f4       	brge	.+16     	; 0x2fd2 <fputc+0x38>
    2fc2:	a0 81       	ld	r26, Z
    2fc4:	b1 81       	ldd	r27, Z+1	; 0x01
    2fc6:	9d 01       	movw	r18, r26
    2fc8:	2f 5f       	subi	r18, 0xFF	; 255
    2fca:	3f 4f       	sbci	r19, 0xFF	; 255
    2fcc:	31 83       	std	Z+1, r19	; 0x01
    2fce:	20 83       	st	Z, r18
    2fd0:	8c 93       	st	X, r24
    2fd2:	26 81       	ldd	r18, Z+6	; 0x06
    2fd4:	37 81       	ldd	r19, Z+7	; 0x07
    2fd6:	2f 5f       	subi	r18, 0xFF	; 255
    2fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fda:	37 83       	std	Z+7, r19	; 0x07
    2fdc:	26 83       	std	Z+6, r18	; 0x06
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <fputc+0x6e>
    2fe0:	8b 01       	movw	r16, r22
    2fe2:	ec 01       	movw	r28, r24
    2fe4:	fb 01       	movw	r30, r22
    2fe6:	00 84       	ldd	r0, Z+8	; 0x08
    2fe8:	f1 85       	ldd	r31, Z+9	; 0x09
    2fea:	e0 2d       	mov	r30, r0
    2fec:	09 95       	icall
    2fee:	89 2b       	or	r24, r25
    2ff0:	e1 f6       	brne	.-72     	; 0x2faa <fputc+0x10>
    2ff2:	d8 01       	movw	r26, r16
    2ff4:	16 96       	adiw	r26, 0x06	; 6
    2ff6:	8d 91       	ld	r24, X+
    2ff8:	9c 91       	ld	r25, X
    2ffa:	17 97       	sbiw	r26, 0x07	; 7
    2ffc:	01 96       	adiw	r24, 0x01	; 1
    2ffe:	17 96       	adiw	r26, 0x07	; 7
    3000:	9c 93       	st	X, r25
    3002:	8e 93       	st	-X, r24
    3004:	16 97       	sbiw	r26, 0x06	; 6
    3006:	ce 01       	movw	r24, r28
    3008:	df 91       	pop	r29
    300a:	cf 91       	pop	r28
    300c:	1f 91       	pop	r17
    300e:	0f 91       	pop	r16
    3010:	08 95       	ret

00003012 <__ultoa_invert>:
    3012:	fa 01       	movw	r30, r20
    3014:	aa 27       	eor	r26, r26
    3016:	28 30       	cpi	r18, 0x08	; 8
    3018:	51 f1       	breq	.+84     	; 0x306e <__ultoa_invert+0x5c>
    301a:	20 31       	cpi	r18, 0x10	; 16
    301c:	81 f1       	breq	.+96     	; 0x307e <__ultoa_invert+0x6c>
    301e:	e8 94       	clt
    3020:	6f 93       	push	r22
    3022:	6e 7f       	andi	r22, 0xFE	; 254
    3024:	6e 5f       	subi	r22, 0xFE	; 254
    3026:	7f 4f       	sbci	r23, 0xFF	; 255
    3028:	8f 4f       	sbci	r24, 0xFF	; 255
    302a:	9f 4f       	sbci	r25, 0xFF	; 255
    302c:	af 4f       	sbci	r26, 0xFF	; 255
    302e:	b1 e0       	ldi	r27, 0x01	; 1
    3030:	3e d0       	rcall	.+124    	; 0x30ae <__ultoa_invert+0x9c>
    3032:	b4 e0       	ldi	r27, 0x04	; 4
    3034:	3c d0       	rcall	.+120    	; 0x30ae <__ultoa_invert+0x9c>
    3036:	67 0f       	add	r22, r23
    3038:	78 1f       	adc	r23, r24
    303a:	89 1f       	adc	r24, r25
    303c:	9a 1f       	adc	r25, r26
    303e:	a1 1d       	adc	r26, r1
    3040:	68 0f       	add	r22, r24
    3042:	79 1f       	adc	r23, r25
    3044:	8a 1f       	adc	r24, r26
    3046:	91 1d       	adc	r25, r1
    3048:	a1 1d       	adc	r26, r1
    304a:	6a 0f       	add	r22, r26
    304c:	71 1d       	adc	r23, r1
    304e:	81 1d       	adc	r24, r1
    3050:	91 1d       	adc	r25, r1
    3052:	a1 1d       	adc	r26, r1
    3054:	20 d0       	rcall	.+64     	; 0x3096 <__ultoa_invert+0x84>
    3056:	09 f4       	brne	.+2      	; 0x305a <__ultoa_invert+0x48>
    3058:	68 94       	set
    305a:	3f 91       	pop	r19
    305c:	2a e0       	ldi	r18, 0x0A	; 10
    305e:	26 9f       	mul	r18, r22
    3060:	11 24       	eor	r1, r1
    3062:	30 19       	sub	r19, r0
    3064:	30 5d       	subi	r19, 0xD0	; 208
    3066:	31 93       	st	Z+, r19
    3068:	de f6       	brtc	.-74     	; 0x3020 <__ultoa_invert+0xe>
    306a:	cf 01       	movw	r24, r30
    306c:	08 95       	ret
    306e:	46 2f       	mov	r20, r22
    3070:	47 70       	andi	r20, 0x07	; 7
    3072:	40 5d       	subi	r20, 0xD0	; 208
    3074:	41 93       	st	Z+, r20
    3076:	b3 e0       	ldi	r27, 0x03	; 3
    3078:	0f d0       	rcall	.+30     	; 0x3098 <__ultoa_invert+0x86>
    307a:	c9 f7       	brne	.-14     	; 0x306e <__ultoa_invert+0x5c>
    307c:	f6 cf       	rjmp	.-20     	; 0x306a <__ultoa_invert+0x58>
    307e:	46 2f       	mov	r20, r22
    3080:	4f 70       	andi	r20, 0x0F	; 15
    3082:	40 5d       	subi	r20, 0xD0	; 208
    3084:	4a 33       	cpi	r20, 0x3A	; 58
    3086:	18 f0       	brcs	.+6      	; 0x308e <__ultoa_invert+0x7c>
    3088:	49 5d       	subi	r20, 0xD9	; 217
    308a:	31 fd       	sbrc	r19, 1
    308c:	40 52       	subi	r20, 0x20	; 32
    308e:	41 93       	st	Z+, r20
    3090:	02 d0       	rcall	.+4      	; 0x3096 <__ultoa_invert+0x84>
    3092:	a9 f7       	brne	.-22     	; 0x307e <__ultoa_invert+0x6c>
    3094:	ea cf       	rjmp	.-44     	; 0x306a <__ultoa_invert+0x58>
    3096:	b4 e0       	ldi	r27, 0x04	; 4
    3098:	a6 95       	lsr	r26
    309a:	97 95       	ror	r25
    309c:	87 95       	ror	r24
    309e:	77 95       	ror	r23
    30a0:	67 95       	ror	r22
    30a2:	ba 95       	dec	r27
    30a4:	c9 f7       	brne	.-14     	; 0x3098 <__ultoa_invert+0x86>
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	61 05       	cpc	r22, r1
    30aa:	71 05       	cpc	r23, r1
    30ac:	08 95       	ret
    30ae:	9b 01       	movw	r18, r22
    30b0:	ac 01       	movw	r20, r24
    30b2:	0a 2e       	mov	r0, r26
    30b4:	06 94       	lsr	r0
    30b6:	57 95       	ror	r21
    30b8:	47 95       	ror	r20
    30ba:	37 95       	ror	r19
    30bc:	27 95       	ror	r18
    30be:	ba 95       	dec	r27
    30c0:	c9 f7       	brne	.-14     	; 0x30b4 <__ultoa_invert+0xa2>
    30c2:	62 0f       	add	r22, r18
    30c4:	73 1f       	adc	r23, r19
    30c6:	84 1f       	adc	r24, r20
    30c8:	95 1f       	adc	r25, r21
    30ca:	a0 1d       	adc	r26, r0
    30cc:	08 95       	ret

000030ce <__divmodsi4>:
    30ce:	05 2e       	mov	r0, r21
    30d0:	97 fb       	bst	r25, 7
    30d2:	16 f4       	brtc	.+4      	; 0x30d8 <__divmodsi4+0xa>
    30d4:	00 94       	com	r0
    30d6:	0f d0       	rcall	.+30     	; 0x30f6 <__negsi2>
    30d8:	57 fd       	sbrc	r21, 7
    30da:	05 d0       	rcall	.+10     	; 0x30e6 <__divmodsi4_neg2>
    30dc:	6b dc       	rcall	.-1834   	; 0x29b4 <__udivmodsi4>
    30de:	07 fc       	sbrc	r0, 7
    30e0:	02 d0       	rcall	.+4      	; 0x30e6 <__divmodsi4_neg2>
    30e2:	46 f4       	brtc	.+16     	; 0x30f4 <__divmodsi4_exit>
    30e4:	08 c0       	rjmp	.+16     	; 0x30f6 <__negsi2>

000030e6 <__divmodsi4_neg2>:
    30e6:	50 95       	com	r21
    30e8:	40 95       	com	r20
    30ea:	30 95       	com	r19
    30ec:	21 95       	neg	r18
    30ee:	3f 4f       	sbci	r19, 0xFF	; 255
    30f0:	4f 4f       	sbci	r20, 0xFF	; 255
    30f2:	5f 4f       	sbci	r21, 0xFF	; 255

000030f4 <__divmodsi4_exit>:
    30f4:	08 95       	ret

000030f6 <__negsi2>:
    30f6:	90 95       	com	r25
    30f8:	80 95       	com	r24
    30fa:	70 95       	com	r23
    30fc:	61 95       	neg	r22
    30fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3100:	8f 4f       	sbci	r24, 0xFF	; 255
    3102:	9f 4f       	sbci	r25, 0xFF	; 255
    3104:	08 95       	ret

00003106 <__muluhisi3>:
    3106:	81 dc       	rcall	.-1790   	; 0x2a0a <__umulhisi3>
    3108:	a5 9f       	mul	r26, r21
    310a:	90 0d       	add	r25, r0
    310c:	b4 9f       	mul	r27, r20
    310e:	90 0d       	add	r25, r0
    3110:	a4 9f       	mul	r26, r20
    3112:	80 0d       	add	r24, r0
    3114:	91 1d       	adc	r25, r1
    3116:	11 24       	eor	r1, r1
    3118:	08 95       	ret

0000311a <__mulshisi3>:
    311a:	b7 ff       	sbrs	r27, 7
    311c:	f4 cf       	rjmp	.-24     	; 0x3106 <__muluhisi3>

0000311e <__mulohisi3>:
    311e:	f3 df       	rcall	.-26     	; 0x3106 <__muluhisi3>
    3120:	82 1b       	sub	r24, r18
    3122:	93 0b       	sbc	r25, r19
    3124:	08 95       	ret

00003126 <_exit>:
    3126:	f8 94       	cli

00003128 <__stop_program>:
    3128:	ff cf       	rjmp	.-2      	; 0x3128 <__stop_program>

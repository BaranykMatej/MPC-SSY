
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001cac  00001d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000180b  00800204  00800204  00001d44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000061e2  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ca0  00000000  00000000  000083ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000265b  00000000  00000000  0000b04e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009dc  00000000  00000000  0000d6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ed6  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024f0  00000000  00000000  0000ff5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  0001244e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c1       	rjmp	.+900    	; 0x3ba <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c2       	rjmp	.+1218   	; 0x554 <__vector_36>
      92:	00 00       	nop
      94:	43 c2       	rjmp	.+1158   	; 0x51c <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	77 c1       	rjmp	.+750    	; 0x398 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	ec ea       	ldi	r30, 0xAC	; 172
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	af 30       	cpi	r26, 0x0F	; 15
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	b5 d0       	rcall	.+362    	; 0x2da <main>
     170:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
appDataReqBusy = false;
     176:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <appDataReqBusy>
     17a:	08 95       	ret

0000017c <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     17c:	cf 93       	push	r28
if (appDataReqBusy || 0 == appUartBufferPtr)
     17e:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <appDataReqBusy>
     182:	81 11       	cpse	r24, r1
     184:	26 c0       	rjmp	.+76     	; 0x1d2 <appSendData+0x56>
     186:	c0 91 04 02 	lds	r28, 0x0204	; 0x800204 <__data_end>
     18a:	cc 23       	and	r28, r28
     18c:	11 f1       	breq	.+68     	; 0x1d2 <appSendData+0x56>
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     18e:	4c 2f       	mov	r20, r28
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	65 e0       	ldi	r22, 0x05	; 5
     194:	72 e0       	ldi	r23, 0x02	; 2
     196:	82 e7       	ldi	r24, 0x72	; 114
     198:	92 e0       	ldi	r25, 0x02	; 2
     19a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <memcpy>

appDataReq.dstAddr = 1-APP_ADDR;
     19e:	e0 ee       	ldi	r30, 0xE0	; 224
     1a0:	f2 e0       	ldi	r31, 0x02	; 2
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	96 83       	std	Z+6, r25	; 0x06
     1a8:	85 83       	std	Z+5, r24	; 0x05
appDataReq.dstEndpoint = APP_ENDPOINT;
     1aa:	17 82       	std	Z+7, r1	; 0x07
appDataReq.srcEndpoint = APP_ENDPOINT;
     1ac:	10 86       	std	Z+8, r1	; 0x08
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	81 87       	std	Z+9, r24	; 0x09
appDataReq.data = appDataReqBuffer;
     1b2:	82 e7       	ldi	r24, 0x72	; 114
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	93 87       	std	Z+11, r25	; 0x0b
     1b8:	82 87       	std	Z+10, r24	; 0x0a
appDataReq.size = appUartBufferPtr;
     1ba:	c4 87       	std	Z+12, r28	; 0x0c
appDataReq.confirm = appDataConf;
     1bc:	8b eb       	ldi	r24, 0xBB	; 187
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	96 87       	std	Z+14, r25	; 0x0e
     1c2:	85 87       	std	Z+13, r24	; 0x0d
NWK_DataReq(&appDataReq);
     1c4:	cf 01       	movw	r24, r30
     1c6:	ba d2       	rcall	.+1396   	; 0x73c <NWK_DataReq>

appUartBufferPtr = 0;
     1c8:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
appDataReqBusy = true;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <appDataReqBusy>
}
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
appSendData();
     1d6:	d2 cf       	rjmp	.-92     	; 0x17c <appSendData>
     1d8:	08 95       	ret

000001da <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	1f 93       	push	r17
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	1f 92       	push	r1
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	7c 01       	movw	r14, r24
	if (ind->data[0] == 06 && ind->size == 1) {
     1ec:	dc 01       	movw	r26, r24
     1ee:	17 96       	adiw	r26, 0x07	; 7
     1f0:	ed 91       	ld	r30, X+
     1f2:	fc 91       	ld	r31, X
     1f4:	18 97       	sbiw	r26, 0x08	; 8
     1f6:	80 81       	ld	r24, Z
     1f8:	86 30       	cpi	r24, 0x06	; 6
     1fa:	29 f0       	breq	.+10     	; 0x206 <appDataInd+0x2c>
		HAL_UartWriteByte('X');
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     1fc:	f7 01       	movw	r30, r14
     1fe:	81 85       	ldd	r24, Z+9	; 0x09
     200:	81 11       	cpse	r24, r1
     202:	09 c0       	rjmp	.+18     	; 0x216 <appDataInd+0x3c>
     204:	17 c0       	rjmp	.+46     	; 0x234 <appDataInd+0x5a>

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	if (ind->data[0] == 06 && ind->size == 1) {
     206:	d7 01       	movw	r26, r14
     208:	19 96       	adiw	r26, 0x09	; 9
     20a:	8c 91       	ld	r24, X
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	b1 f7       	brne	.-20     	; 0x1fc <appDataInd+0x22>
		HAL_UartWriteByte('X');
     210:	88 e5       	ldi	r24, 0x58	; 88
     212:	37 d1       	rcall	.+622    	; 0x482 <HAL_UartWriteByte>
     214:	2b c0       	rjmp	.+86     	; 0x26c <appDataInd+0x92>
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     216:	10 e0       	ldi	r17, 0x00	; 0
			HAL_UartWriteByte(ind->data[i]);
     218:	d7 01       	movw	r26, r14
     21a:	17 96       	adiw	r26, 0x07	; 7
     21c:	ed 91       	ld	r30, X+
     21e:	fc 91       	ld	r31, X
     220:	18 97       	sbiw	r26, 0x08	; 8
     222:	e1 0f       	add	r30, r17
     224:	f1 1d       	adc	r31, r1
     226:	80 81       	ld	r24, Z
     228:	2c d1       	rcall	.+600    	; 0x482 <HAL_UartWriteByte>
static bool appDataInd(NWK_DataInd_t *ind)
{
	if (ind->data[0] == 06 && ind->size == 1) {
		HAL_UartWriteByte('X');
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     22a:	1f 5f       	subi	r17, 0xFF	; 255
     22c:	f7 01       	movw	r30, r14
     22e:	81 85       	ldd	r24, Z+9	; 0x09
     230:	18 17       	cp	r17, r24
     232:	90 f3       	brcs	.-28     	; 0x218 <appDataInd+0x3e>
appDataReqBusy = true;
}

static void appSendDataRecv(void)
{
	char ack = 06;
     234:	86 e0       	ldi	r24, 0x06	; 6
     236:	89 83       	std	Y+1, r24	; 0x01
	appDataReq.dstAddr = 1-APP_ADDR;
     238:	e0 ee       	ldi	r30, 0xE0	; 224
     23a:	f2 e0       	ldi	r31, 0x02	; 2
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	96 83       	std	Z+6, r25	; 0x06
     242:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
     244:	17 82       	std	Z+7, r1	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
     246:	10 86       	std	Z+8, r1	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = &ack;
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	93 87       	std	Z+11, r25	; 0x0b
     252:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = sizeof(ack);
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	14 87       	std	Z+12, r17	; 0x0c
	appDataReq.confirm = appDataConf;
     258:	8b eb       	ldi	r24, 0xBB	; 187
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	96 87       	std	Z+14, r25	; 0x0e
	NWK_DataReq(&appDataReq);
     25e:	85 87       	std	Z+13, r24	; 0x0d
     260:	cf 01       	movw	r24, r30
     262:	6c d2       	rcall	.+1240   	; 0x73c <NWK_DataReq>

	appUartBufferPtr = 0;
     264:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
	appDataReqBusy = true;
     268:	10 93 df 02 	sts	0x02DF, r17	; 0x8002df <appDataReqBusy>
			HAL_UartWriteByte(ind->data[i]);
		}
		appSendDataRecv();
	}
	return true;
}
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0f 90       	pop	r0
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	08 95       	ret

0000027c <HAL_UartBytesReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     27c:	ff 92       	push	r15
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	8c 01       	movw	r16, r24
for (uint16_t i = 0; i < bytes; i++)
     288:	89 2b       	or	r24, r25
     28a:	c9 f0       	breq	.+50     	; 0x2be <HAL_UartBytesReceived+0x42>
     28c:	c0 e0       	ldi	r28, 0x00	; 0
     28e:	d0 e0       	ldi	r29, 0x00	; 0
{
uint8_t byte = HAL_UartReadByte();
     290:	1f d1       	rcall	.+574    	; 0x4d0 <HAL_UartReadByte>
     292:	f8 2e       	mov	r15, r24

if (appUartBufferPtr == sizeof(appUartBuffer))
     294:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     298:	8d 36       	cpi	r24, 0x6D	; 109
appSendData();
     29a:	09 f4       	brne	.+2      	; 0x29e <HAL_UartBytesReceived+0x22>
     29c:	6f df       	rcall	.-290    	; 0x17c <appSendData>

if (appUartBufferPtr < sizeof(appUartBuffer))
     29e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_end>
     2a2:	ed 36       	cpi	r30, 0x6D	; 109
     2a4:	40 f4       	brcc	.+16     	; 0x2b6 <HAL_UartBytesReceived+0x3a>
appUartBuffer[appUartBufferPtr++] = byte;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	8e 0f       	add	r24, r30
     2aa:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	eb 5f       	subi	r30, 0xFB	; 251
     2b2:	fd 4f       	sbci	r31, 0xFD	; 253
     2b4:	f0 82       	st	Z, r15

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     2b6:	21 96       	adiw	r28, 0x01	; 1
     2b8:	0c 17       	cp	r16, r28
     2ba:	1d 07       	cpc	r17, r29
     2bc:	49 f7       	brne	.-46     	; 0x290 <HAL_UartBytesReceived+0x14>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     2be:	81 ef       	ldi	r24, 0xF1	; 241
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     2c6:	81 ef       	ldi	r24, 0xF1	; 241
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SYS_TimerStart>
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	ff 90       	pop	r15
     2d8:	08 95       	ret

000002da <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
SYS_Init();
     2da:	0e 94 57 0c 	call	0x18ae	; 0x18ae <SYS_Init>
HAL_UartInit(38400);
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	76 e9       	ldi	r23, 0x96	; 150
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	78 d0       	rcall	.+240    	; 0x3d8 <HAL_UartInit>
HAL_UartWriteByte('j');
     2e8:	8a e6       	ldi	r24, 0x6A	; 106
     2ea:	cb d0       	rcall	.+406    	; 0x482 <HAL_UartWriteByte>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     2ec:	c1 ef       	ldi	r28, 0xF1	; 241
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
     2f0:	0f 2e       	mov	r0, r31
     2f2:	f4 e1       	ldi	r31, 0x14	; 20
     2f4:	cf 2e       	mov	r12, r31
     2f6:	d1 2c       	mov	r13, r1
     2f8:	e1 2c       	mov	r14, r1
     2fa:	f1 2c       	mov	r15, r1
     2fc:	f0 2d       	mov	r31, r0
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     2fe:	0b ee       	ldi	r16, 0xEB	; 235
     300:	10 e0       	ldi	r17, 0x00	; 0
HAL_UartInit(38400);
HAL_UartWriteByte('j');

while (1)
{
SYS_TaskHandler();
     302:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SYS_TaskHandler>
HAL_UartTaskHandler();
     306:	7d d1       	rcall	.+762    	; 0x602 <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
switch (appState)
     308:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appState>
     30c:	81 11       	cpse	r24, r1

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     30e:	f9 cf       	rjmp	.-14     	; 0x302 <main+0x28>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
NWK_SetPanId(APP_PANID);
     314:	d0 d1       	rcall	.+928    	; 0x6b6 <NWK_SetAddr>
     316:	80 e8       	ldi	r24, 0x80	; 128
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	d4 d1       	rcall	.+936    	; 0x6c4 <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     31c:	8f e1       	ldi	r24, 0x1F	; 31
     31e:	0e 94 86 0b 	call	0x170c	; 0x170c <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 82 0b 	call	0x1704	; 0x1704 <PHY_SetRxState>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     328:	6d ee       	ldi	r22, 0xED	; 237
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	d1 d1       	rcall	.+930    	; 0x6d2 <NWK_OpenEndpoint>

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     330:	ce 82       	std	Y+6, r12	; 0x06
     332:	df 82       	std	Y+7, r13	; 0x07
     334:	e8 86       	std	Y+8, r14	; 0x08
     336:	f9 86       	std	Y+9, r15	; 0x09
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     338:	1a 86       	std	Y+10, r1	; 0x0a
appTimer.handler = appTimerHandler;
     33a:	1c 87       	std	Y+12, r17	; 0x0c
     33c:	0b 87       	std	Y+11, r16	; 0x0b
switch (appState)
{
	case APP_STATE_INITIAL: 
		{
		appInit();
		appState = APP_STATE_IDLE;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <appState>
     344:	de cf       	rjmp	.-68     	; 0x302 <main+0x28>

00000346 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     346:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	a8 95       	wdr
     34e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     352:	88 61       	ori	r24, 0x18	; 24
     354:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     358:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     35c:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     35e:	e1 e6       	ldi	r30, 0x61	; 97
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 e8       	ldi	r24, 0x80	; 128
     364:	80 83       	st	Z, r24
  CLKPR = 0;
     366:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     368:	78 94       	sei

  HAL_TimerInit();
     36a:	01 c0       	rjmp	.+2      	; 0x36e <HAL_TimerInit>
     36c:	08 95       	ret

0000036e <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     36e:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	97 e2       	ldi	r25, 0x27	; 39
     376:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     37a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     37e:	e1 ea       	ldi	r30, 0xA1	; 161
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	80 83       	st	Z, r24
     386:	80 81       	ld	r24, Z
     388:	82 60       	ori	r24, 0x02	; 2
     38a:	80 83       	st	Z, r24
     38c:	e2 e7       	ldi	r30, 0x72	; 114
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	82 60       	ori	r24, 0x02	; 2
     394:	80 83       	st	Z, r24
     396:	08 95       	ret

00000398 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	8f 93       	push	r24
  halTimerIrqCount++;
     3a4:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
     3a8:	8f 5f       	subi	r24, 0xFF	; 255
     3aa:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <halTimerIrqCount>
}
     3ae:	8f 91       	pop	r24
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	8f 93       	push	r24
  halSleepTimerEvent = true;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <halSleepTimerEvent>
}
     3cc:	8f 91       	pop	r24
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	aa 1f       	adc	r26, r26
     3e2:	bb 1f       	adc	r27, r27
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	aa 1f       	adc	r26, r26
     3ea:	bb 1f       	adc	r27, r27
     3ec:	9c 01       	movw	r18, r24
     3ee:	ad 01       	movw	r20, r26
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	44 1f       	adc	r20, r20
     3f6:	55 1f       	adc	r21, r21
     3f8:	22 0f       	add	r18, r18
     3fa:	33 1f       	adc	r19, r19
     3fc:	44 1f       	adc	r20, r20
     3fe:	55 1f       	adc	r21, r21
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	74 e2       	ldi	r23, 0x24	; 36
     404:	84 ef       	ldi	r24, 0xF4	; 244
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__udivmodsi4>
     40c:	ba 01       	movw	r22, r20
     40e:	a9 01       	movw	r20, r18
     410:	41 50       	subi	r20, 0x01	; 1
     412:	51 09       	sbc	r21, r1
     414:	61 09       	sbc	r22, r1
     416:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     418:	bb 27       	eor	r27, r27
     41a:	a7 2f       	mov	r26, r23
     41c:	96 2f       	mov	r25, r22
     41e:	85 2f       	mov	r24, r21
     420:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
     424:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     42e:	88 e9       	ldi	r24, 0x98	; 152
     430:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
     434:	86 e0       	ldi	r24, 0x06	; 6
     436:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
     43a:	ee e2       	ldi	r30, 0x2E	; 46
     43c:	f6 e0       	ldi	r31, 0x06	; 6
     43e:	8d e9       	ldi	r24, 0x9D	; 157
     440:	94 e0       	ldi	r25, 0x04	; 4
     442:	91 87       	std	Z+9, r25	; 0x09
     444:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     446:	80 e9       	ldi	r24, 0x90	; 144
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	95 83       	std	Z+5, r25	; 0x05
     44c:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     44e:	17 82       	std	Z+7, r1	; 0x07
     450:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     452:	11 82       	std	Z+1, r1	; 0x01
     454:	10 82       	st	Z, r1
  txFifo.tail = 0;
     456:	13 82       	std	Z+3, r1	; 0x03
     458:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     45a:	e3 e9       	ldi	r30, 0x93	; 147
     45c:	f4 e0       	ldi	r31, 0x04	; 4
     45e:	22 e0       	ldi	r18, 0x02	; 2
     460:	33 e0       	ldi	r19, 0x03	; 3
     462:	31 87       	std	Z+9, r19	; 0x09
     464:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     466:	95 83       	std	Z+5, r25	; 0x05
     468:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     46a:	17 82       	std	Z+7, r1	; 0x07
     46c:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     46e:	11 82       	std	Z+1, r1	; 0x01
     470:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     472:	13 82       	std	Z+3, r1	; 0x03
     474:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <udrEmpty>
  newData = false;
     47c:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <newData>
     480:	08 95       	ret

00000482 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     486:	ee e2       	ldi	r30, 0x2E	; 46
     488:	f6 e0       	ldi	r31, 0x06	; 6
     48a:	26 81       	ldd	r18, Z+6	; 0x06
     48c:	37 81       	ldd	r19, Z+7	; 0x07
     48e:	64 81       	ldd	r22, Z+4	; 0x04
     490:	75 81       	ldd	r23, Z+5	; 0x05
     492:	26 17       	cp	r18, r22
     494:	37 07       	cpc	r19, r23
     496:	c9 f0       	breq	.+50     	; 0x4ca <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     498:	c0 85       	ldd	r28, Z+8	; 0x08
     49a:	d1 85       	ldd	r29, Z+9	; 0x09
     49c:	42 81       	ldd	r20, Z+2	; 0x02
     49e:	53 81       	ldd	r21, Z+3	; 0x03
     4a0:	da 01       	movw	r26, r20
     4a2:	11 96       	adiw	r26, 0x01	; 1
     4a4:	b3 83       	std	Z+3, r27	; 0x03
     4a6:	a2 83       	std	Z+2, r26	; 0x02
     4a8:	fe 01       	movw	r30, r28
     4aa:	e4 0f       	add	r30, r20
     4ac:	f5 1f       	adc	r31, r21
     4ae:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     4b0:	6a 17       	cp	r22, r26
     4b2:	7b 07       	cpc	r23, r27
     4b4:	21 f4       	brne	.+8      	; 0x4be <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     4b6:	10 92 31 06 	sts	0x0631, r1	; 0x800631 <txFifo+0x3>
     4ba:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <txFifo+0x2>
  txFifo.bytes++;
     4be:	2f 5f       	subi	r18, 0xFF	; 255
     4c0:	3f 4f       	sbci	r19, 0xFF	; 255
     4c2:	30 93 35 06 	sts	0x0635, r19	; 0x800635 <txFifo+0x7>
     4c6:	20 93 34 06 	sts	0x0634, r18	; 0x800634 <txFifo+0x6>
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     4d0:	4f b7       	in	r20, 0x3f	; 63
     4d2:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     4d4:	e3 e9       	ldi	r30, 0x93	; 147
     4d6:	f4 e0       	ldi	r31, 0x04	; 4
     4d8:	20 85       	ldd	r18, Z+8	; 0x08
     4da:	31 85       	ldd	r19, Z+9	; 0x09
     4dc:	80 81       	ld	r24, Z
     4de:	91 81       	ldd	r25, Z+1	; 0x01
     4e0:	bc 01       	movw	r22, r24
     4e2:	6f 5f       	subi	r22, 0xFF	; 255
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	71 83       	std	Z+1, r23	; 0x01
     4e8:	60 83       	st	Z, r22
     4ea:	d9 01       	movw	r26, r18
     4ec:	a8 0f       	add	r26, r24
     4ee:	b9 1f       	adc	r27, r25
     4f0:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	24 81       	ldd	r18, Z+4	; 0x04
     4f8:	35 81       	ldd	r19, Z+5	; 0x05
     4fa:	62 17       	cp	r22, r18
     4fc:	73 07       	cpc	r23, r19
     4fe:	21 f4       	brne	.+8      	; 0x508 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     500:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <rxFifo+0x1>
     504:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <rxFifo>
    rxFifo.bytes--;
     508:	e3 e9       	ldi	r30, 0x93	; 147
     50a:	f4 e0       	ldi	r31, 0x04	; 4
     50c:	26 81       	ldd	r18, Z+6	; 0x06
     50e:	37 81       	ldd	r19, Z+7	; 0x07
     510:	21 50       	subi	r18, 0x01	; 1
     512:	31 09       	sbc	r19, r1
     514:	37 83       	std	Z+7, r19	; 0x07
     516:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     518:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     51a:	08 95       	ret

0000051c <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	0b b6       	in	r0, 0x3b	; 59
     528:	0f 92       	push	r0
     52a:	8f 93       	push	r24
     52c:	ef 93       	push	r30
     52e:	ff 93       	push	r31
  udrEmpty = true;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     536:	e9 ec       	ldi	r30, 0xC9	; 201
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	8f 7d       	andi	r24, 0xDF	; 223
     53e:	80 83       	st	Z, r24
}
     540:	ff 91       	pop	r31
     542:	ef 91       	pop	r30
     544:	8f 91       	pop	r24
     546:	0f 90       	pop	r0
     548:	0b be       	out	0x3b, r0	; 59
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     554:	1f 92       	push	r1
     556:	0f 92       	push	r0
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	0f 92       	push	r0
     55c:	11 24       	eor	r1, r1
     55e:	0b b6       	in	r0, 0x3b	; 59
     560:	0f 92       	push	r0
     562:	2f 93       	push	r18
     564:	3f 93       	push	r19
     566:	4f 93       	push	r20
     568:	5f 93       	push	r21
     56a:	6f 93       	push	r22
     56c:	7f 93       	push	r23
     56e:	8f 93       	push	r24
     570:	9f 93       	push	r25
     572:	af 93       	push	r26
     574:	bf 93       	push	r27
     576:	ef 93       	push	r30
     578:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     57a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     57e:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     582:	8c 71       	andi	r24, 0x1C	; 28
     584:	59 f5       	brne	.+86     	; 0x5dc <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     586:	e3 e9       	ldi	r30, 0x93	; 147
     588:	f4 e0       	ldi	r31, 0x04	; 4
     58a:	46 81       	ldd	r20, Z+6	; 0x06
     58c:	57 81       	ldd	r21, Z+7	; 0x07
     58e:	84 81       	ldd	r24, Z+4	; 0x04
     590:	95 81       	ldd	r25, Z+5	; 0x05
     592:	48 17       	cp	r20, r24
     594:	59 07       	cpc	r21, r25
     596:	11 f1       	breq	.+68     	; 0x5dc <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     598:	40 85       	ldd	r20, Z+8	; 0x08
     59a:	51 85       	ldd	r21, Z+9	; 0x09
     59c:	82 81       	ldd	r24, Z+2	; 0x02
     59e:	93 81       	ldd	r25, Z+3	; 0x03
     5a0:	bc 01       	movw	r22, r24
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	73 83       	std	Z+3, r23	; 0x03
     5a8:	62 83       	std	Z+2, r22	; 0x02
     5aa:	da 01       	movw	r26, r20
     5ac:	a8 0f       	add	r26, r24
     5ae:	b9 1f       	adc	r27, r25
     5b0:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     5b2:	22 81       	ldd	r18, Z+2	; 0x02
     5b4:	33 81       	ldd	r19, Z+3	; 0x03
     5b6:	84 81       	ldd	r24, Z+4	; 0x04
     5b8:	95 81       	ldd	r25, Z+5	; 0x05
     5ba:	28 17       	cp	r18, r24
     5bc:	39 07       	cpc	r19, r25
     5be:	21 f4       	brne	.+8      	; 0x5c8 <__vector_36+0x74>
      rxFifo.tail = 0;
     5c0:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <rxFifo+0x3>
     5c4:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <rxFifo+0x2>
    rxFifo.bytes++;
     5c8:	e3 e9       	ldi	r30, 0x93	; 147
     5ca:	f4 e0       	ldi	r31, 0x04	; 4
     5cc:	86 81       	ldd	r24, Z+6	; 0x06
     5ce:	97 81       	ldd	r25, Z+7	; 0x07
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	97 83       	std	Z+7, r25	; 0x07
     5d4:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0b be       	out	0x3b, r0	; 59
     5f8:	0f 90       	pop	r0
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	0f 90       	pop	r0
     5fe:	1f 90       	pop	r1
     600:	18 95       	reti

00000602 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     602:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <txFifo+0x6>
     606:	90 91 35 06 	lds	r25, 0x0635	; 0x800635 <txFifo+0x7>
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	69 f1       	breq	.+90     	; 0x668 <HAL_UartTaskHandler+0x66>
     60e:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <udrEmpty>
     612:	22 23       	and	r18, r18
     614:	49 f1       	breq	.+82     	; 0x668 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     616:	ee e2       	ldi	r30, 0x2E	; 46
     618:	f6 e0       	ldi	r31, 0x06	; 6
     61a:	60 85       	ldd	r22, Z+8	; 0x08
     61c:	71 85       	ldd	r23, Z+9	; 0x09
     61e:	20 81       	ld	r18, Z
     620:	31 81       	ldd	r19, Z+1	; 0x01
     622:	a9 01       	movw	r20, r18
     624:	4f 5f       	subi	r20, 0xFF	; 255
     626:	5f 4f       	sbci	r21, 0xFF	; 255
     628:	51 83       	std	Z+1, r21	; 0x01
     62a:	40 83       	st	Z, r20
     62c:	db 01       	movw	r26, r22
     62e:	a2 0f       	add	r26, r18
     630:	b3 1f       	adc	r27, r19
     632:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     634:	64 81       	ldd	r22, Z+4	; 0x04
     636:	75 81       	ldd	r23, Z+5	; 0x05
     638:	46 17       	cp	r20, r22
     63a:	57 07       	cpc	r21, r23
     63c:	21 f4       	brne	.+8      	; 0x646 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     63e:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <txFifo+0x1>
     642:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <txFifo>
    txFifo.bytes--;
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <txFifo+0x7>
     64c:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     650:	9f b7       	in	r25, 0x3f	; 63
     652:	f8 94       	cli
      UDRx = byte;
     654:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     658:	e9 ec       	ldi	r30, 0xC9	; 201
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	80 62       	ori	r24, 0x20	; 32
     660:	80 83       	st	Z, r24
      udrEmpty = false;
     662:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     666:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     668:	2f b7       	in	r18, 0x3f	; 63
     66a:	f8 94       	cli
      new = newData;
     66c:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <newData>
      newData = false;
     670:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <newData>
      bytes = rxFifo.bytes;
     674:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <rxFifo+0x6>
     678:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     67c:	2f bf       	out	0x3f, r18	; 63

    if (new)
     67e:	99 23       	and	r25, r25
     680:	11 f0       	breq	.+4      	; 0x686 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     682:	ca 01       	movw	r24, r20
     684:	fb cd       	rjmp	.-1034   	; 0x27c <HAL_UartBytesReceived>
     686:	08 95       	ret

00000688 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     688:	e7 ee       	ldi	r30, 0xE7	; 231
     68a:	f9 e1       	ldi	r31, 0x19	; 25
     68c:	14 82       	std	Z+4, r1	; 0x04
     68e:	15 82       	std	Z+5, r1	; 0x05
     690:	11 82       	std	Z+1, r1	; 0x01
     692:	10 82       	st	Z, r1
     694:	17 a2       	std	Z+39, r1	; 0x27
     696:	16 a2       	std	Z+38, r1	; 0x26
     698:	ed ee       	ldi	r30, 0xED	; 237
     69a:	f9 e1       	ldi	r31, 0x19	; 25
     69c:	8d e0       	ldi	r24, 0x0D	; 13
     69e:	9a e1       	ldi	r25, 0x1A	; 26
     6a0:	11 92       	st	Z+, r1
     6a2:	11 92       	st	Z+, r1
     6a4:	e8 17       	cp	r30, r24
     6a6:	f9 07       	cpc	r31, r25
     6a8:	d9 f7       	brne	.-10     	; 0x6a0 <NWK_Init+0x18>
     6aa:	42 d6       	rcall	.+3204   	; 0x1330 <nwkTxInit>
     6ac:	60 d3       	rcall	.+1728   	; 0xd6e <nwkRxInit>
     6ae:	0d d1       	rcall	.+538    	; 0x8ca <nwkFrameInit>
     6b0:	40 d0       	rcall	.+128    	; 0x732 <nwkDataReqInit>
     6b2:	92 c1       	rjmp	.+804    	; 0x9d8 <nwkRouteInit>
     6b4:	08 95       	ret

000006b6 <NWK_SetAddr>:
     6b6:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <nwkIb+0x1>
     6ba:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <nwkIb>
     6be:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <PHY_SetShortAddr>
     6c2:	08 95       	ret

000006c4 <NWK_SetPanId>:
     6c4:	90 93 ea 19 	sts	0x19EA, r25	; 0x8019ea <nwkIb+0x3>
     6c8:	80 93 e9 19 	sts	0x19E9, r24	; 0x8019e9 <nwkIb+0x2>
     6cc:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <PHY_SetPanId>
     6d0:	08 95       	ret

000006d2 <NWK_OpenEndpoint>:
     6d2:	e8 2f       	mov	r30, r24
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	e3 51       	subi	r30, 0x13	; 19
     6dc:	f6 4e       	sbci	r31, 0xE6	; 230
     6de:	71 83       	std	Z+1, r23	; 0x01
     6e0:	60 83       	st	Z, r22
     6e2:	08 95       	ret

000006e4 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     6e4:	8b d3       	rcall	.+1814   	; 0xdfc <nwkRxTaskHandler>
  nwkTxTaskHandler();
     6e6:	20 d7       	rcall	.+3648   	; 0x1528 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     6e8:	4d c0       	rjmp	.+154    	; 0x784 <nwkDataReqTaskHandler>
     6ea:	08 95       	ret

000006ec <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6ec:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <nwkDataReqQueue>
     6f0:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     6f4:	30 97       	sbiw	r30, 0x00	; 0
     6f6:	d9 f0       	breq	.+54     	; 0x72e <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     6f8:	22 81       	ldd	r18, Z+2	; 0x02
     6fa:	33 81       	ldd	r19, Z+3	; 0x03
     6fc:	82 17       	cp	r24, r18
     6fe:	93 07       	cpc	r25, r19
     700:	89 f4       	brne	.+34     	; 0x724 <nwkDataReqTxConf+0x38>
     702:	05 c0       	rjmp	.+10     	; 0x70e <nwkDataReqTxConf+0x22>
     704:	22 81       	ldd	r18, Z+2	; 0x02
     706:	33 81       	ldd	r19, Z+3	; 0x03
     708:	28 17       	cp	r18, r24
     70a:	39 07       	cpc	r19, r25
     70c:	59 f4       	brne	.+22     	; 0x724 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     70e:	dc 01       	movw	r26, r24
     710:	ad 57       	subi	r26, 0x7D	; 125
     712:	bf 4f       	sbci	r27, 0xFF	; 255
     714:	2c 91       	ld	r18, X
     716:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     718:	13 96       	adiw	r26, 0x03	; 3
     71a:	2c 91       	ld	r18, X
     71c:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     71e:	22 e0       	ldi	r18, 0x02	; 2
     720:	24 83       	std	Z+4, r18	; 0x04
      break;
     722:	05 c0       	rjmp	.+10     	; 0x72e <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     724:	01 90       	ld	r0, Z+
     726:	f0 81       	ld	r31, Z
     728:	e0 2d       	mov	r30, r0
     72a:	30 97       	sbiw	r30, 0x00	; 0
     72c:	59 f7       	brne	.-42     	; 0x704 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     72e:	11 c1       	rjmp	.+546    	; 0x952 <nwkFrameFree>
     730:	08 95       	ret

00000732 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     732:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <nwkDataReqQueue+0x1>
     736:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <nwkDataReqQueue>
     73a:	08 95       	ret

0000073c <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     73c:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     73e:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     740:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     742:	13 82       	std	Z+3, r1	; 0x03
     744:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     746:	a7 ee       	ldi	r26, 0xE7	; 231
     748:	b9 e1       	ldi	r27, 0x19	; 25
     74a:	96 96       	adiw	r26, 0x26	; 38
     74c:	8d 91       	ld	r24, X+
     74e:	9c 91       	ld	r25, X
     750:	97 97       	sbiw	r26, 0x27	; 39
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	97 96       	adiw	r26, 0x27	; 39
     756:	9c 93       	st	X, r25
     758:	8e 93       	st	-X, r24
     75a:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     75c:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     760:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	39 f4       	brne	.+14     	; 0x776 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     768:	11 82       	std	Z+1, r1	; 0x01
     76a:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     76c:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <nwkDataReqQueue+0x1>
     770:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <nwkDataReqQueue>
     774:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     776:	91 83       	std	Z+1, r25	; 0x01
     778:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     77a:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <nwkDataReqQueue+0x1>
     77e:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <nwkDataReqQueue>
     782:	08 95       	ret

00000784 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     78c:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <nwkDataReqQueue>
     790:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     794:	30 97       	sbiw	r30, 0x00	; 0
     796:	09 f4       	brne	.+2      	; 0x79a <nwkDataReqTaskHandler+0x16>
     798:	93 c0       	rjmp	.+294    	; 0x8c0 <nwkDataReqTaskHandler+0x13c>
     79a:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     79c:	8c 81       	ldd	r24, Y+4	; 0x04
     79e:	88 23       	and	r24, r24
     7a0:	21 f0       	breq	.+8      	; 0x7aa <nwkDataReqTaskHandler+0x26>
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <nwkDataReqTaskHandler+0x24>
     7a6:	66 c0       	rjmp	.+204    	; 0x874 <nwkDataReqTaskHandler+0xf0>
     7a8:	85 c0       	rjmp	.+266    	; 0x8b4 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     7aa:	9a d0       	rcall	.+308    	; 0x8e0 <nwkFrameAlloc>
     7ac:	8c 01       	movw	r16, r24
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	21 f4       	brne	.+8      	; 0x7ba <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     7b6:	8f 87       	std	Y+15, r24	; 0x0f
     7b8:	83 c0       	rjmp	.+262    	; 0x8c0 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     7ba:	9b 83       	std	Y+3, r25	; 0x03
     7bc:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     7c2:	f8 01       	movw	r30, r16
     7c4:	e9 57       	subi	r30, 0x79	; 121
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	86 e7       	ldi	r24, 0x76	; 118
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	89 85       	ldd	r24, Y+9	; 0x09
     7d4:	82 fb       	bst	r24, 2
     7d6:	88 27       	eor	r24, r24
     7d8:	80 f9       	bld	r24, 0
     7da:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     7dc:	99 85       	ldd	r25, Y+9	; 0x09
     7de:	d8 01       	movw	r26, r16
     7e0:	1b 96       	adiw	r26, 0x0b	; 11
     7e2:	8c 91       	ld	r24, X
     7e4:	1b 97       	sbiw	r26, 0x0b	; 11
     7e6:	90 fb       	bst	r25, 0
     7e8:	80 f9       	bld	r24, 0
     7ea:	1b 96       	adiw	r26, 0x0b	; 11
     7ec:	8c 93       	st	X, r24
     7ee:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     7f0:	99 85       	ldd	r25, Y+9	; 0x09
     7f2:	93 fb       	bst	r25, 3
     7f4:	99 27       	eor	r25, r25
     7f6:	90 f9       	bld	r25, 0
     7f8:	90 fb       	bst	r25, 0
     7fa:	82 f9       	bld	r24, 2
     7fc:	1b 96       	adiw	r26, 0x0b	; 11
     7fe:	8c 93       	st	X, r24
     800:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     802:	e7 ee       	ldi	r30, 0xE7	; 231
     804:	f9 e1       	ldi	r31, 0x19	; 25
     806:	84 81       	ldd	r24, Z+4	; 0x04
     808:	8f 5f       	subi	r24, 0xFF	; 255
     80a:	84 83       	std	Z+4, r24	; 0x04
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8c 93       	st	X, r24
     810:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	1e 96       	adiw	r26, 0x0e	; 14
     818:	9c 93       	st	X, r25
     81a:	8e 93       	st	-X, r24
     81c:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     81e:	8d 81       	ldd	r24, Y+5	; 0x05
     820:	9e 81       	ldd	r25, Y+6	; 0x06
     822:	50 96       	adiw	r26, 0x10	; 16
     824:	9c 93       	st	X, r25
     826:	8e 93       	st	-X, r24
     828:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     82a:	88 85       	ldd	r24, Y+8	; 0x08
     82c:	98 2f       	mov	r25, r24
     82e:	9f 70       	andi	r25, 0x0F	; 15
     830:	51 96       	adiw	r26, 0x11	; 17
     832:	8c 91       	ld	r24, X
     834:	51 97       	sbiw	r26, 0x11	; 17
     836:	80 7f       	andi	r24, 0xF0	; 240
     838:	89 2b       	or	r24, r25
     83a:	51 96       	adiw	r26, 0x11	; 17
     83c:	8c 93       	st	X, r24
     83e:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     840:	9f 81       	ldd	r25, Y+7	; 0x07
     842:	92 95       	swap	r25
     844:	90 7f       	andi	r25, 0xF0	; 240
     846:	8f 70       	andi	r24, 0x0F	; 15
     848:	89 2b       	or	r24, r25
     84a:	51 96       	adiw	r26, 0x11	; 17
     84c:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     84e:	f8 01       	movw	r30, r16
     850:	ef 57       	subi	r30, 0x7F	; 127
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	4c 85       	ldd	r20, Y+12	; 0x0c
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	6a 85       	ldd	r22, Y+10	; 0x0a
     85a:	7b 85       	ldd	r23, Y+11	; 0x0b
     85c:	80 81       	ld	r24, Z
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <memcpy>
  frame->size += req->size;
     864:	f8 01       	movw	r30, r16
     866:	91 81       	ldd	r25, Z+1	; 0x01
     868:	8c 85       	ldd	r24, Y+12	; 0x0c
     86a:	89 0f       	add	r24, r25
     86c:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     86e:	c8 01       	movw	r24, r16
     870:	82 d5       	rcall	.+2820   	; 0x1376 <nwkTxFrame>
     872:	26 c0       	rjmp	.+76     	; 0x8c0 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     874:	ec 17       	cp	r30, r28
     876:	fd 07       	cpc	r31, r29
     878:	41 f4       	brne	.+16     	; 0x88a <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     882:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
     886:	0a c0       	rjmp	.+20     	; 0x89c <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     888:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     88a:	80 81       	ld	r24, Z
     88c:	91 81       	ldd	r25, Z+1	; 0x01
     88e:	8c 17       	cp	r24, r28
     890:	9d 07       	cpc	r25, r29
     892:	d1 f7       	brne	.-12     	; 0x888 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     894:	88 81       	ld	r24, Y
     896:	99 81       	ldd	r25, Y+1	; 0x01
     898:	91 83       	std	Z+1, r25	; 0x01
     89a:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     89c:	e7 ee       	ldi	r30, 0xE7	; 231
     89e:	f9 e1       	ldi	r31, 0x19	; 25
     8a0:	86 a1       	ldd	r24, Z+38	; 0x26
     8a2:	97 a1       	ldd	r25, Z+39	; 0x27
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	97 a3       	std	Z+39, r25	; 0x27
     8a8:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     8aa:	ed 85       	ldd	r30, Y+13	; 0x0d
     8ac:	fe 85       	ldd	r31, Y+14	; 0x0e
     8ae:	ce 01       	movw	r24, r28
     8b0:	19 95       	eicall
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     8b4:	09 90       	ld	r0, Y+
     8b6:	d8 81       	ld	r29, Y
     8b8:	c0 2d       	mov	r28, r0
     8ba:	20 97       	sbiw	r28, 0x00	; 0
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <nwkDataReqTaskHandler+0x13c>
     8be:	6e cf       	rjmp	.-292    	; 0x79c <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	08 95       	ret

000008ca <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     8ca:	ea e3       	ldi	r30, 0x3A	; 58
     8cc:	f6 e0       	ldi	r31, 0x06	; 6
     8ce:	88 e4       	ldi	r24, 0x48	; 72
     8d0:	96 e1       	ldi	r25, 0x16	; 22
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     8d2:	10 82       	st	Z, r1
     8d4:	e7 57       	subi	r30, 0x77	; 119
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     8d8:	e8 17       	cp	r30, r24
     8da:	f9 07       	cpc	r31, r25
     8dc:	d1 f7       	brne	.-12     	; 0x8d2 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     8de:	08 95       	ret

000008e0 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     8e0:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <nwkFrameFrames>
     8e4:	88 23       	and	r24, r24
     8e6:	59 f0       	breq	.+22     	; 0x8fe <nwkFrameAlloc+0x1e>
     8e8:	e3 ec       	ldi	r30, 0xC3	; 195
     8ea:	f6 e0       	ldi	r31, 0x06	; 6
     8ec:	68 e4       	ldi	r22, 0x48	; 72
     8ee:	76 e1       	ldi	r23, 0x16	; 22
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	ac 01       	movw	r20, r24
     8f6:	20 81       	ld	r18, Z
     8f8:	21 11       	cpse	r18, r1
     8fa:	22 c0       	rjmp	.+68     	; 0x940 <nwkFrameAlloc+0x60>
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <nwkFrameAlloc+0x22>
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     902:	69 e8       	ldi	r22, 0x89	; 137
     904:	64 9f       	mul	r22, r20
     906:	90 01       	movw	r18, r0
     908:	65 9f       	mul	r22, r21
     90a:	30 0d       	add	r19, r0
     90c:	11 24       	eor	r1, r1
     90e:	c9 01       	movw	r24, r18
     910:	86 5c       	subi	r24, 0xC6	; 198
     912:	99 4f       	sbci	r25, 0xF9	; 249
     914:	fc 01       	movw	r30, r24
     916:	11 92       	st	Z+, r1
     918:	6a 95       	dec	r22
     91a:	e9 f7       	brne	.-6      	; 0x916 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     91c:	40 e1       	ldi	r20, 0x10	; 16
     91e:	fc 01       	movw	r30, r24
     920:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     922:	ef 57       	subi	r30, 0x7F	; 127
     924:	ff 4f       	sbci	r31, 0xFF	; 255
     926:	24 5b       	subi	r18, 0xB4	; 180
     928:	39 4f       	sbci	r19, 0xF9	; 249
     92a:	31 83       	std	Z+1, r19	; 0x01
     92c:	20 83       	st	Z, r18
      nwkIb.lock++;
     92e:	e7 ee       	ldi	r30, 0xE7	; 231
     930:	f9 e1       	ldi	r31, 0x19	; 25
     932:	26 a1       	ldd	r18, Z+38	; 0x26
     934:	37 a1       	ldd	r19, Z+39	; 0x27
     936:	2f 5f       	subi	r18, 0xFF	; 255
     938:	3f 4f       	sbci	r19, 0xFF	; 255
     93a:	37 a3       	std	Z+39, r19	; 0x27
     93c:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     93e:	08 95       	ret
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	e7 57       	subi	r30, 0x77	; 119
     944:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     946:	e6 17       	cp	r30, r22
     948:	f7 07       	cpc	r31, r23
     94a:	a1 f6       	brne	.-88     	; 0x8f4 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
}
     950:	08 95       	ret

00000952 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     952:	fc 01       	movw	r30, r24
     954:	10 82       	st	Z, r1
  nwkIb.lock--;
     956:	e7 ee       	ldi	r30, 0xE7	; 231
     958:	f9 e1       	ldi	r31, 0x19	; 25
     95a:	86 a1       	ldd	r24, Z+38	; 0x26
     95c:	97 a1       	ldd	r25, Z+39	; 0x27
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	97 a3       	std	Z+39, r25	; 0x27
     962:	86 a3       	std	Z+38, r24	; 0x26
     964:	08 95       	ret

00000966 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	41 f0       	breq	.+16     	; 0x97a <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     96a:	fc 01       	movw	r30, r24
     96c:	e7 57       	subi	r30, 0x77	; 119
     96e:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     970:	86 e1       	ldi	r24, 0x16	; 22
     972:	e8 34       	cpi	r30, 0x48	; 72
     974:	f8 07       	cpc	r31, r24
     976:	18 f0       	brcs	.+6      	; 0x97e <nwkFrameNext+0x18>
     978:	12 c0       	rjmp	.+36     	; 0x99e <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     97a:	ea e3       	ldi	r30, 0x3A	; 58
     97c:	f6 e0       	ldi	r31, 0x06	; 6
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     97e:	80 81       	ld	r24, Z
     980:	88 23       	and	r24, r24
     982:	21 f0       	breq	.+8      	; 0x98c <nwkFrameNext+0x26>
     984:	0f c0       	rjmp	.+30     	; 0x9a4 <nwkFrameNext+0x3e>
     986:	80 81       	ld	r24, Z
     988:	81 11       	cpse	r24, r1
     98a:	0f c0       	rjmp	.+30     	; 0x9aa <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     98c:	e7 57       	subi	r30, 0x77	; 119
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	86 e1       	ldi	r24, 0x16	; 22
     992:	e8 34       	cpi	r30, 0x48	; 72
     994:	f8 07       	cpc	r31, r24
     996:	b8 f3       	brcs	.-18     	; 0x986 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	08 95       	ret
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9a4:	8e 2f       	mov	r24, r30
     9a6:	9f 2f       	mov	r25, r31
     9a8:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9aa:	8e 2f       	mov	r24, r30
     9ac:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     9ae:	08 95       	ret

000009b0 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     9b0:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     9b2:	dc 01       	movw	r26, r24
     9b4:	ad 57       	subi	r26, 0x7D	; 125
     9b6:	bf 4f       	sbci	r27, 0xFF	; 255
     9b8:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     9ba:	a7 ee       	ldi	r26, 0xE7	; 231
     9bc:	b9 e1       	ldi	r27, 0x19	; 25
     9be:	14 96       	adiw	r26, 0x04	; 4
     9c0:	9c 91       	ld	r25, X
     9c2:	14 97       	sbiw	r26, 0x04	; 4
     9c4:	9f 5f       	subi	r25, 0xFF	; 255
     9c6:	14 96       	adiw	r26, 0x04	; 4
     9c8:	9c 93       	st	X, r25
     9ca:	14 97       	sbiw	r26, 0x04	; 4
     9cc:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     9ce:	8d 91       	ld	r24, X+
     9d0:	9c 91       	ld	r25, X
     9d2:	96 87       	std	Z+14, r25	; 0x0e
     9d4:	85 87       	std	Z+13, r24	; 0x0d
     9d6:	08 95       	ret

000009d8 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     9d8:	a9 e4       	ldi	r26, 0x49	; 73
     9da:	b6 e1       	ldi	r27, 0x16	; 22
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	4f ef       	ldi	r20, 0xFF	; 255
     9e2:	5f ef       	ldi	r21, 0xFF	; 255
     9e4:	11 96       	adiw	r26, 0x01	; 1
     9e6:	5c 93       	st	X, r21
     9e8:	4e 93       	st	-X, r20
     9ea:	fc 01       	movw	r30, r24
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	e8 1b       	sub	r30, r24
     9fa:	f9 0b       	sbc	r31, r25
     9fc:	e8 5b       	subi	r30, 0xB8	; 184
     9fe:	f9 4e       	sbci	r31, 0xE9	; 233
     a00:	20 81       	ld	r18, Z
     a02:	2e 7f       	andi	r18, 0xFE	; 254
     a04:	20 83       	st	Z, r18
     a06:	14 96       	adiw	r26, 0x04	; 4
     a08:	1c 92       	st	X, r1
     a0a:	14 97       	sbiw	r26, 0x04	; 4
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	17 96       	adiw	r26, 0x07	; 7
     a10:	84 36       	cpi	r24, 0x64	; 100
     a12:	91 05       	cpc	r25, r1
     a14:	39 f7       	brne	.-50     	; 0x9e4 <nwkRouteInit+0xc>
     a16:	08 95       	ret

00000a18 <NWK_RouteFindEntry>:
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	e9 e4       	ldi	r30, 0x49	; 73
     a22:	f6 e1       	ldi	r31, 0x16	; 22
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	06 2f       	mov	r16, r22
     a2a:	10 e0       	ldi	r17, 0x00	; 0
     a2c:	40 81       	ld	r20, Z
     a2e:	51 81       	ldd	r21, Z+1	; 0x01
     a30:	48 17       	cp	r20, r24
     a32:	59 07       	cpc	r21, r25
     a34:	b1 f4       	brne	.+44     	; 0xa62 <NWK_RouteFindEntry+0x4a>
     a36:	d9 01       	movw	r26, r18
     a38:	aa 0f       	add	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	aa 0f       	add	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	aa 0f       	add	r26, r26
     a42:	bb 1f       	adc	r27, r27
     a44:	a2 1b       	sub	r26, r18
     a46:	b3 0b       	sbc	r27, r19
     a48:	a8 5b       	subi	r26, 0xB8	; 184
     a4a:	b9 4e       	sbci	r27, 0xE9	; 233
     a4c:	4c 91       	ld	r20, X
     a4e:	46 95       	lsr	r20
     a50:	41 70       	andi	r20, 0x01	; 1
     a52:	c4 2f       	mov	r28, r20
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	d4 2f       	mov	r29, r20
     a58:	c0 17       	cp	r28, r16
     a5a:	d1 07       	cpc	r29, r17
     a5c:	11 f4       	brne	.+4      	; 0xa62 <NWK_RouteFindEntry+0x4a>
     a5e:	cd 01       	movw	r24, r26
     a60:	08 c0       	rjmp	.+16     	; 0xa72 <NWK_RouteFindEntry+0x5a>
     a62:	2f 5f       	subi	r18, 0xFF	; 255
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	37 96       	adiw	r30, 0x07	; 7
     a68:	24 36       	cpi	r18, 0x64	; 100
     a6a:	31 05       	cpc	r19, r1
     a6c:	f9 f6       	brne	.-66     	; 0xa2c <NWK_RouteFindEntry+0x14>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <NWK_RouteNewEntry>:
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e4       	ldi	r30, 0x48	; 72
     a82:	f6 e1       	ldi	r31, 0x16	; 22
     a84:	80 81       	ld	r24, Z
     a86:	80 fd       	sbrc	r24, 0
     a88:	0d c0       	rjmp	.+26     	; 0xaa4 <NWK_RouteNewEntry+0x28>
     a8a:	85 81       	ldd	r24, Z+5	; 0x05
     a8c:	88 23       	and	r24, r24
     a8e:	81 f0       	breq	.+32     	; 0xab0 <NWK_RouteNewEntry+0x34>
     a90:	10 97       	sbiw	r26, 0x00	; 0
     a92:	39 f0       	breq	.+14     	; 0xaa2 <NWK_RouteNewEntry+0x26>
     a94:	15 96       	adiw	r26, 0x05	; 5
     a96:	9c 91       	ld	r25, X
     a98:	15 97       	sbiw	r26, 0x05	; 5
     a9a:	89 17       	cp	r24, r25
     a9c:	18 f4       	brcc	.+6      	; 0xaa4 <NWK_RouteNewEntry+0x28>
     a9e:	df 01       	movw	r26, r30
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <NWK_RouteNewEntry+0x28>
     aa2:	df 01       	movw	r26, r30
     aa4:	37 96       	adiw	r30, 0x07	; 7
     aa6:	89 e1       	ldi	r24, 0x19	; 25
     aa8:	e4 30       	cpi	r30, 0x04	; 4
     aaa:	f8 07       	cpc	r31, r24
     aac:	59 f7       	brne	.-42     	; 0xa84 <NWK_RouteNewEntry+0x8>
     aae:	fd 01       	movw	r30, r26
     ab0:	80 81       	ld	r24, Z
     ab2:	8d 70       	andi	r24, 0x0D	; 13
     ab4:	80 63       	ori	r24, 0x30	; 48
     ab6:	80 83       	st	Z, r24
     ab8:	80 e8       	ldi	r24, 0x80	; 128
     aba:	85 83       	std	Z+5, r24	; 0x05
     abc:	cf 01       	movw	r24, r30
     abe:	08 95       	ret

00000ac0 <NWK_RouteFreeEntry>:
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	80 fd       	sbrc	r24, 0
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <NWK_RouteFreeEntry+0x12>
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	9f ef       	ldi	r25, 0xFF	; 255
     acc:	92 83       	std	Z+2, r25	; 0x02
     ace:	81 83       	std	Z+1, r24	; 0x01
     ad0:	15 82       	std	Z+5, r1	; 0x05
     ad2:	08 95       	ret

00000ad4 <NWK_RouteNextHop>:
     ad4:	a1 df       	rcall	.-190    	; 0xa18 <NWK_RouteFindEntry>
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	21 f0       	breq	.+8      	; 0xae2 <NWK_RouteNextHop+0xe>
     ada:	fc 01       	movw	r30, r24
     adc:	83 81       	ldd	r24, Z+3	; 0x03
     ade:	94 81       	ldd	r25, Z+4	; 0x04
     ae0:	08 95       	ret
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	9f ef       	ldi	r25, 0xFF	; 255
     ae6:	08 95       	ret

00000ae8 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     ae8:	97 df       	rcall	.-210    	; 0xa18 <NWK_RouteFindEntry>
  if (entry)
     aea:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     aec:	09 f0       	breq	.+2      	; 0xaf0 <nwkRouteRemove+0x8>
     aee:	e8 cf       	rjmp	.-48     	; 0xac0 <NWK_RouteFreeEntry>
     af0:	08 95       	ret

00000af2 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     afc:	01 85       	ldd	r16, Z+9	; 0x09
     afe:	12 85       	ldd	r17, Z+10	; 0x0a
     b00:	11 23       	and	r17, r17
     b02:	2c f4       	brge	.+10     	; 0xb0e <nwkRouteFrameReceived+0x1c>
     b04:	85 85       	ldd	r24, Z+13	; 0x0d
     b06:	96 85       	ldd	r25, Z+14	; 0x0e
     b08:	08 17       	cp	r16, r24
     b0a:	19 07       	cpc	r17, r25
     b0c:	e1 f5       	brne	.+120    	; 0xb86 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     b0e:	85 81       	ldd	r24, Z+5	; 0x05
     b10:	96 81       	ldd	r25, Z+6	; 0x06
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	c1 f1       	breq	.+112    	; 0xb86 <nwkRouteFrameReceived+0x94>
     b16:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	85 85       	ldd	r24, Z+13	; 0x0d
     b1c:	96 85       	ldd	r25, Z+14	; 0x0e
     b1e:	7c df       	rcall	.-264    	; 0xa18 <NWK_RouteFindEntry>
     b20:	fc 01       	movw	r30, r24

  if (entry)
     b22:	89 2b       	or	r24, r25
     b24:	a1 f0       	breq	.+40     	; 0xb4e <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     b26:	8f 81       	ldd	r24, Y+7	; 0x07
     b28:	98 85       	ldd	r25, Y+8	; 0x08
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	f9 f4       	brne	.+62     	; 0xb6c <nwkRouteFrameReceived+0x7a>
     b2e:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
     b32:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
     b36:	8f 85       	ldd	r24, Y+15	; 0x0f
     b38:	98 89       	ldd	r25, Y+16	; 0x10
     b3a:	28 17       	cp	r18, r24
     b3c:	39 07       	cpc	r19, r25
     b3e:	b1 f4       	brne	.+44     	; 0xb6c <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     b40:	14 83       	std	Z+4, r17	; 0x04
     b42:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     b44:	80 81       	ld	r24, Z
     b46:	8f 70       	andi	r24, 0x0F	; 15
     b48:	80 63       	ori	r24, 0x30	; 48
     b4a:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     b4c:	0a c0       	rjmp	.+20     	; 0xb62 <nwkRouteFrameReceived+0x70>
     b4e:	96 df       	rcall	.-212    	; 0xa7c <NWK_RouteNewEntry>
     b50:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     b52:	8d 85       	ldd	r24, Y+13	; 0x0d
     b54:	9e 85       	ldd	r25, Y+14	; 0x0e
     b56:	92 83       	std	Z+2, r25	; 0x02
     b58:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     b5a:	89 85       	ldd	r24, Y+9	; 0x09
     b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b5e:	94 83       	std	Z+4, r25	; 0x04
     b60:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     b62:	cd 57       	subi	r28, 0x7D	; 125
     b64:	df 4f       	sbci	r29, 0xFF	; 255
     b66:	88 81       	ld	r24, Y
     b68:	86 83       	std	Z+6, r24	; 0x06
     b6a:	0d c0       	rjmp	.+26     	; 0xb86 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     b6c:	83 81       	ldd	r24, Z+3	; 0x03
     b6e:	94 81       	ldd	r25, Z+4	; 0x04
     b70:	08 17       	cp	r16, r24
     b72:	19 07       	cpc	r17, r25
     b74:	b1 f3       	breq	.-20     	; 0xb62 <nwkRouteFrameReceived+0x70>
     b76:	96 81       	ldd	r25, Z+6	; 0x06
     b78:	de 01       	movw	r26, r28
     b7a:	ad 57       	subi	r26, 0x7D	; 125
     b7c:	bf 4f       	sbci	r27, 0xFF	; 255
     b7e:	8c 91       	ld	r24, X
     b80:	98 17       	cp	r25, r24
     b82:	f0 f2       	brcs	.-68     	; 0xb40 <nwkRouteFrameReceived+0x4e>
     b84:	ee cf       	rjmp	.-36     	; 0xb62 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	08 95       	ret

00000b90 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     b96:	87 85       	ldd	r24, Z+15	; 0x0f
     b98:	90 89       	ldd	r25, Z+16	; 0x10
     b9a:	8f 3f       	cpi	r24, 0xFF	; 255
     b9c:	2f ef       	ldi	r18, 0xFF	; 255
     b9e:	92 07       	cpc	r25, r18
     ba0:	d9 f1       	breq	.+118    	; 0xc18 <nwkRouteFrameSent+0x88>
     ba2:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     ba4:	63 85       	ldd	r22, Z+11	; 0x0b
     ba6:	63 fb       	bst	r22, 3
     ba8:	66 27       	eor	r22, r22
     baa:	60 f9       	bld	r22, 0
     bac:	35 df       	rcall	.-406    	; 0xa18 <NWK_RouteFindEntry>
     bae:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     bb0:	89 2b       	or	r24, r25
     bb2:	91 f1       	breq	.+100    	; 0xc18 <nwkRouteFrameSent+0x88>
     bb4:	8c 91       	ld	r24, X
     bb6:	80 fd       	sbrc	r24, 0
     bb8:	2f c0       	rjmp	.+94     	; 0xc18 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     bba:	fe 01       	movw	r30, r28
     bbc:	ed 57       	subi	r30, 0x7D	; 125
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	80 81       	ld	r24, Z
     bc2:	81 11       	cpse	r24, r1
     bc4:	19 c0       	rjmp	.+50     	; 0xbf8 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     bc6:	8c 91       	ld	r24, X
     bc8:	8f 70       	andi	r24, 0x0F	; 15
     bca:	80 63       	ori	r24, 0x30	; 48
     bcc:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     bce:	15 96       	adiw	r26, 0x05	; 5
     bd0:	8c 91       	ld	r24, X
     bd2:	15 97       	sbiw	r26, 0x05	; 5
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	15 96       	adiw	r26, 0x05	; 5
     bd8:	8c 93       	st	X, r24
     bda:	8f 3f       	cpi	r24, 0xFF	; 255
     bdc:	e9 f4       	brne	.+58     	; 0xc18 <nwkRouteFrameSent+0x88>
     bde:	ed e4       	ldi	r30, 0x4D	; 77
     be0:	f6 e1       	ldi	r31, 0x16	; 22
     be2:	29 e0       	ldi	r18, 0x09	; 9
     be4:	39 e1       	ldi	r19, 0x19	; 25
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     be6:	80 81       	ld	r24, Z
     be8:	86 95       	lsr	r24
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 83       	st	Z, r24
     bee:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     bf0:	e2 17       	cp	r30, r18
     bf2:	f3 07       	cpc	r31, r19
     bf4:	c1 f7       	brne	.-16     	; 0xbe6 <nwkRouteFrameSent+0x56>
     bf6:	10 c0       	rjmp	.+32     	; 0xc18 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     bf8:	9c 91       	ld	r25, X
     bfa:	89 2f       	mov	r24, r25
     bfc:	82 95       	swap	r24
     bfe:	8f 70       	andi	r24, 0x0F	; 15
     c00:	81 5f       	subi	r24, 0xF1	; 241
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	28 2f       	mov	r18, r24
     c06:	22 95       	swap	r18
     c08:	20 7f       	andi	r18, 0xF0	; 240
     c0a:	9f 70       	andi	r25, 0x0F	; 15
     c0c:	92 2b       	or	r25, r18
     c0e:	9c 93       	st	X, r25
     c10:	81 11       	cpse	r24, r1
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     c14:	cd 01       	movw	r24, r26
     c16:	54 df       	rcall	.-344    	; 0xac0 <NWK_RouteFreeEntry>
  }
}
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c24:	87 85       	ldd	r24, Z+15	; 0x0f
     c26:	90 89       	ldd	r25, Z+16	; 0x10
     c28:	8f 3f       	cpi	r24, 0xFF	; 255
     c2a:	2f ef       	ldi	r18, 0xFF	; 255
     c2c:	92 07       	cpc	r25, r18
     c2e:	29 f4       	brne	.+10     	; 0xc3a <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	90 87       	std	Z+8, r25	; 0x08
     c36:	87 83       	std	Z+7, r24	; 0x07
     c38:	0e c0       	rjmp	.+28     	; 0xc56 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     c3a:	23 85       	ldd	r18, Z+11	; 0x0b
     c3c:	22 ff       	sbrs	r18, 2
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     c40:	90 87       	std	Z+8, r25	; 0x08
     c42:	87 83       	std	Z+7, r24	; 0x07
     c44:	08 c0       	rjmp	.+16     	; 0xc56 <nwkRoutePrepareTx+0x38>
     c46:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     c48:	63 85       	ldd	r22, Z+11	; 0x0b
     c4a:	63 fb       	bst	r22, 3
     c4c:	66 27       	eor	r22, r22
     c4e:	60 f9       	bld	r22, 0
     c50:	41 df       	rcall	.-382    	; 0xad4 <NWK_RouteNextHop>
     c52:	98 87       	std	Y+8, r25	; 0x08
     c54:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     c5c:	af 92       	push	r10
     c5e:	bf 92       	push	r11
     c60:	cf 92       	push	r12
     c62:	df 92       	push	r13
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     c70:	1b 85       	ldd	r17, Y+11	; 0x0b
     c72:	13 fb       	bst	r17, 3
     c74:	11 27       	eor	r17, r17
     c76:	10 f9       	bld	r17, 0
     c78:	cf 84       	ldd	r12, Y+15	; 0x0f
     c7a:	d8 88       	ldd	r13, Y+16	; 0x10
     c7c:	61 2f       	mov	r22, r17
     c7e:	c6 01       	movw	r24, r12
     c80:	29 df       	rcall	.-430    	; 0xad4 <NWK_RouteNextHop>
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	59 f0       	breq	.+22     	; 0xc9c <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     c86:	fe 01       	movw	r30, r28
     c88:	e9 57       	subi	r30, 0x79	; 121
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	11 82       	std	Z+1, r1	; 0x01
     c8e:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     c96:	ce 01       	movw	r24, r28
     c98:	6e d3       	rcall	.+1756   	; 0x1376 <nwkTxFrame>
     c9a:	22 c0       	rjmp	.+68     	; 0xce0 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     c9c:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     c9e:	be 84       	ldd	r11, Y+14	; 0x0e
     ca0:	1f de       	rcall	.-962    	; 0x8e0 <nwkFrameAlloc>
     ca2:	7c 01       	movw	r14, r24
     ca4:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     ca6:	d1 f0       	breq	.+52     	; 0xcdc <nwkRouteFrame+0x80>
     ca8:	83 de       	rcall	.-762    	; 0x9b0 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     caa:	f7 01       	movw	r30, r14
     cac:	81 81       	ldd	r24, Z+1	; 0x01
     cae:	8a 5f       	subi	r24, 0xFA	; 250
     cb0:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     cb2:	e9 57       	subi	r30, 0x79	; 121
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	11 82       	std	Z+1, r1	; 0x01
     cb8:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     cba:	f7 01       	movw	r30, r14
     cbc:	b0 8a       	std	Z+16, r11	; 0x10
     cbe:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     cc0:	ef 57       	subi	r30, 0x7F	; 127
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	01 90       	ld	r0, Z+
     cc6:	f0 81       	ld	r31, Z
     cc8:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 83       	st	Z, r24
  command->srcAddr = src;
     cce:	b2 82       	std	Z+2, r11	; 0x02
     cd0:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     cd2:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     cd4:	c3 82       	std	Z+3, r12	; 0x03
     cd6:	15 83       	std	Z+5, r17	; 0x05
     cd8:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     cda:	4d d3       	rcall	.+1690   	; 0x1376 <nwkTxFrame>
     cdc:	ce 01       	movw	r24, r28
     cde:	39 de       	rcall	.-910    	; 0x952 <nwkFrameFree>
  }
}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	08 95       	ret

00000cf4 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     cf4:	fc 01       	movw	r30, r24
     cf6:	21 85       	ldd	r18, Z+9	; 0x09
     cf8:	26 30       	cpi	r18, 0x06	; 6
     cfa:	49 f4       	brne	.+18     	; 0xd0e <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     cfc:	07 80       	ldd	r0, Z+7	; 0x07
     cfe:	f0 85       	ldd	r31, Z+8	; 0x08
     d00:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     d02:	65 81       	ldd	r22, Z+5	; 0x05
     d04:	83 81       	ldd	r24, Z+3	; 0x03
     d06:	94 81       	ldd	r25, Z+4	; 0x04
     d08:	ef de       	rcall	.-546    	; 0xae8 <nwkRouteRemove>

  return true;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     d0e:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     d10:	08 95       	ret

00000d12 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     d12:	dc 01       	movw	r26, r24
     d14:	19 96       	adiw	r26, 0x09	; 9
     d16:	2c 91       	ld	r18, X
     d18:	19 97       	sbiw	r26, 0x09	; 9
     d1a:	22 23       	and	r18, r18
     d1c:	71 f0       	breq	.+28     	; 0xd3a <nwkRxServiceDataInd+0x28>
     d1e:	17 96       	adiw	r26, 0x07	; 7
     d20:	ed 91       	ld	r30, X+
     d22:	fc 91       	ld	r31, X
     d24:	18 97       	sbiw	r26, 0x08	; 8
     d26:	20 81       	ld	r18, Z
     d28:	22 23       	and	r18, r18
     d2a:	19 f0       	breq	.+6      	; 0xd32 <nwkRxServiceDataInd+0x20>
     d2c:	21 30       	cpi	r18, 0x01	; 1
     d2e:	19 f0       	breq	.+6      	; 0xd36 <nwkRxServiceDataInd+0x24>
     d30:	06 c0       	rjmp	.+12     	; 0xd3e <nwkRxServiceDataInd+0x2c>
     d32:	b2 c3       	rjmp	.+1892   	; 0x1498 <nwkTxAckReceived>
     d34:	08 95       	ret
     d36:	de cf       	rjmp	.-68     	; 0xcf4 <nwkRouteErrorReceived>
     d38:	08 95       	ret
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	08 95       	ret
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 95       	ret

00000d42 <nwkRxDuplicateRejectionTimerHandler>:
     d42:	bc 01       	movw	r22, r24
     d44:	e6 e1       	ldi	r30, 0x16	; 22
     d46:	f9 e1       	ldi	r31, 0x19	; 25
     d48:	28 e4       	ldi	r18, 0x48	; 72
     d4a:	39 e1       	ldi	r19, 0x19	; 25
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	51 e0       	ldi	r21, 0x01	; 1
     d50:	90 81       	ld	r25, Z
     d52:	99 23       	and	r25, r25
     d54:	19 f0       	breq	.+6      	; 0xd5c <nwkRxDuplicateRejectionTimerHandler+0x1a>
     d56:	91 50       	subi	r25, 0x01	; 1
     d58:	90 83       	st	Z, r25
     d5a:	45 2f       	mov	r20, r21
     d5c:	35 96       	adiw	r30, 0x05	; 5
     d5e:	e2 17       	cp	r30, r18
     d60:	f3 07       	cpc	r31, r19
     d62:	b1 f7       	brne	.-20     	; 0xd50 <nwkRxDuplicateRejectionTimerHandler+0xe>
     d64:	44 23       	and	r20, r20
     d66:	11 f0       	breq	.+4      	; 0xd6c <nwkRxDuplicateRejectionTimerHandler+0x2a>
     d68:	cb 01       	movw	r24, r22
     d6a:	6d c6       	rjmp	.+3290   	; 0x1a46 <SYS_TimerStart>
     d6c:	08 95       	ret

00000d6e <nwkRxInit>:
     d6e:	e6 e1       	ldi	r30, 0x16	; 22
     d70:	f9 e1       	ldi	r31, 0x19	; 25
     d72:	88 e4       	ldi	r24, 0x48	; 72
     d74:	99 e1       	ldi	r25, 0x19	; 25
     d76:	10 82       	st	Z, r1
     d78:	35 96       	adiw	r30, 0x05	; 5
     d7a:	e8 17       	cp	r30, r24
     d7c:	f9 07       	cpc	r31, r25
     d7e:	d9 f7       	brne	.-10     	; 0xd76 <nwkRxInit+0x8>
     d80:	e4 e0       	ldi	r30, 0x04	; 4
     d82:	f9 e1       	ldi	r31, 0x19	; 25
     d84:	84 e6       	ldi	r24, 0x64	; 100
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a0 e0       	ldi	r26, 0x00	; 0
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	86 83       	std	Z+6, r24	; 0x06
     d8e:	97 83       	std	Z+7, r25	; 0x07
     d90:	a0 87       	std	Z+8, r26	; 0x08
     d92:	b1 87       	std	Z+9, r27	; 0x09
     d94:	12 86       	std	Z+10, r1	; 0x0a
     d96:	81 ea       	ldi	r24, 0xA1	; 161
     d98:	96 e0       	ldi	r25, 0x06	; 6
     d9a:	94 87       	std	Z+12, r25	; 0x0c
     d9c:	83 87       	std	Z+11, r24	; 0x0b
     d9e:	69 e8       	ldi	r22, 0x89	; 137
     da0:	76 e0       	ldi	r23, 0x06	; 6
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	96 cc       	rjmp	.-1748   	; 0x6d2 <NWK_OpenEndpoint>
     da6:	08 95       	ret

00000da8 <PHY_DataInd>:
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	dc 01       	movw	r26, r24
     dae:	ed 91       	ld	r30, X+
     db0:	fc 91       	ld	r31, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 81       	ldd	r18, Z+1	; 0x01
     db6:	28 38       	cpi	r18, 0x88	; 136
     db8:	f1 f4       	brne	.+60     	; 0xdf6 <PHY_DataInd+0x4e>
     dba:	20 81       	ld	r18, Z
     dbc:	2f 7d       	andi	r18, 0xDF	; 223
     dbe:	21 34       	cpi	r18, 0x41	; 65
     dc0:	d1 f4       	brne	.+52     	; 0xdf6 <PHY_DataInd+0x4e>
     dc2:	12 96       	adiw	r26, 0x02	; 2
     dc4:	2c 91       	ld	r18, X
     dc6:	20 31       	cpi	r18, 0x10	; 16
     dc8:	b0 f0       	brcs	.+44     	; 0xdf6 <PHY_DataInd+0x4e>
     dca:	ec 01       	movw	r28, r24
     dcc:	89 dd       	rcall	.-1262   	; 0x8e0 <nwkFrameAlloc>
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	91 f0       	breq	.+36     	; 0xdf6 <PHY_DataInd+0x4e>
     dd2:	20 e2       	ldi	r18, 0x20	; 32
     dd4:	fc 01       	movw	r30, r24
     dd6:	20 83       	st	Z, r18
     dd8:	2a 81       	ldd	r18, Y+2	; 0x02
     dda:	21 83       	std	Z+1, r18	; 0x01
     ddc:	2b 81       	ldd	r18, Y+3	; 0x03
     dde:	ed 57       	subi	r30, 0x7D	; 125
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	20 83       	st	Z, r18
     de4:	2c 81       	ldd	r18, Y+4	; 0x04
     de6:	31 96       	adiw	r30, 0x01	; 1
     de8:	20 83       	st	Z, r18
     dea:	4a 81       	ldd	r20, Y+2	; 0x02
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	68 81       	ld	r22, Y
     df0:	79 81       	ldd	r23, Y+1	; 0x01
     df2:	02 96       	adiw	r24, 0x02	; 2
     df4:	15 d7       	rcall	.+3626   	; 0x1c20 <memcpy>
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     dfc:	2f 92       	push	r2
     dfe:	3f 92       	push	r3
     e00:	4f 92       	push	r4
     e02:	5f 92       	push	r5
     e04:	6f 92       	push	r6
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	2c 97       	sbiw	r28, 0x0c	; 12
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     e34:	0f 2e       	mov	r0, r31
     e36:	f4 e2       	ldi	r31, 0x24	; 36
     e38:	bf 2e       	mov	r11, r31
     e3a:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     e3c:	0f 2e       	mov	r0, r31
     e3e:	f7 ee       	ldi	r31, 0xE7	; 231
     e40:	ef 2e       	mov	r14, r31
     e42:	f9 e1       	ldi	r31, 0x19	; 25
     e44:	ff 2e       	mov	r15, r31
     e46:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     e48:	55 24       	eor	r5, r5
     e4a:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     e4c:	68 94       	set
     e4e:	aa 24       	eor	r10, r10
     e50:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     e52:	68 94       	set
     e54:	77 24       	eor	r7, r7
     e56:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     e58:	68 94       	set
     e5a:	66 24       	eor	r6, r6
     e5c:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     e5e:	31 2c       	mov	r3, r1
     e60:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     e62:	0f 2e       	mov	r0, r31
     e64:	ff e1       	ldi	r31, 0x1F	; 31
     e66:	4f 2e       	mov	r4, r31
     e68:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     e6a:	cc 24       	eor	r12, r12
     e6c:	c3 94       	inc	r12
     e6e:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     e70:	da c1       	rjmp	.+948    	; 0x1226 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     e72:	d8 01       	movw	r26, r16
     e74:	8c 91       	ld	r24, X
     e76:	82 32       	cpi	r24, 0x22	; 34
     e78:	09 f4       	brne	.+2      	; 0xe7c <nwkRxTaskHandler+0x80>
     e7a:	05 c1       	rjmp	.+522    	; 0x1086 <nwkRxTaskHandler+0x28a>
     e7c:	18 f4       	brcc	.+6      	; 0xe84 <nwkRxTaskHandler+0x88>
     e7e:	80 32       	cpi	r24, 0x20	; 32
     e80:	41 f0       	breq	.+16     	; 0xe92 <nwkRxTaskHandler+0x96>
     e82:	d1 c1       	rjmp	.+930    	; 0x1226 <nwkRxTaskHandler+0x42a>
     e84:	83 32       	cpi	r24, 0x23	; 35
     e86:	09 f4       	brne	.+2      	; 0xe8a <nwkRxTaskHandler+0x8e>
     e88:	c9 c1       	rjmp	.+914    	; 0x121c <nwkRxTaskHandler+0x420>
     e8a:	84 32       	cpi	r24, 0x24	; 36
     e8c:	09 f4       	brne	.+2      	; 0xe90 <nwkRxTaskHandler+0x94>
     e8e:	c9 c1       	rjmp	.+914    	; 0x1222 <nwkRxTaskHandler+0x426>
     e90:	ca c1       	rjmp	.+916    	; 0x1226 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     e92:	f8 01       	movw	r30, r16
     e94:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     e96:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     e98:	98 2f       	mov	r25, r24
     e9a:	9a 70       	andi	r25, 0x0A	; 10
     e9c:	09 f0       	breq	.+2      	; 0xea0 <nwkRxTaskHandler+0xa4>
     e9e:	c3 c1       	rjmp	.+902    	; 0x1226 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     ea0:	25 81       	ldd	r18, Z+5	; 0x05
     ea2:	36 81       	ldd	r19, Z+6	; 0x06
     ea4:	2f 3f       	cpi	r18, 0xFF	; 255
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
     ea8:	91 f4       	brne	.+36     	; 0xece <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     eaa:	d8 01       	movw	r26, r16
     eac:	1f 96       	adiw	r26, 0x0f	; 15
     eae:	8d 91       	ld	r24, X+
     eb0:	9c 91       	ld	r25, X
     eb2:	50 97       	sbiw	r26, 0x10	; 16
     eb4:	f7 01       	movw	r30, r14
     eb6:	20 81       	ld	r18, Z
     eb8:	31 81       	ldd	r19, Z+1	; 0x01
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	19 f0       	breq	.+6      	; 0xec6 <nwkRxTaskHandler+0xca>
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <nwkRxTaskHandler+0xca>
     ec4:	b0 c1       	rjmp	.+864    	; 0x1226 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     ec6:	e2 e2       	ldi	r30, 0x22	; 34
     ec8:	d8 01       	movw	r26, r16
     eca:	ec 93       	st	X, r30
     ecc:	ac c1       	rjmp	.+856    	; 0x1226 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     ece:	d8 01       	movw	r26, r16
     ed0:	1f 96       	adiw	r26, 0x0f	; 15
     ed2:	2d 91       	ld	r18, X+
     ed4:	3c 91       	ld	r19, X
     ed6:	50 97       	sbiw	r26, 0x10	; 16
     ed8:	2f 3f       	cpi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	11 f4       	brne	.+4      	; 0xee2 <nwkRxTaskHandler+0xe6>
     ede:	80 fd       	sbrc	r24, 0
     ee0:	a2 c1       	rjmp	.+836    	; 0x1226 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     ee2:	f7 01       	movw	r30, r14
     ee4:	20 81       	ld	r18, Z
     ee6:	31 81       	ldd	r19, Z+1	; 0x01
     ee8:	d8 01       	movw	r26, r16
     eea:	1d 96       	adiw	r26, 0x0d	; 13
     eec:	8d 91       	ld	r24, X+
     eee:	9c 91       	ld	r25, X
     ef0:	1e 97       	sbiw	r26, 0x0e	; 14
     ef2:	28 17       	cp	r18, r24
     ef4:	39 07       	cpc	r19, r25
     ef6:	09 f4       	brne	.+2      	; 0xefa <nwkRxTaskHandler+0xfe>
     ef8:	96 c1       	rjmp	.+812    	; 0x1226 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     efa:	c8 01       	movw	r24, r16
     efc:	fa dd       	rcall	.-1036   	; 0xaf2 <nwkRouteFrameReceived>
     efe:	e2 e1       	ldi	r30, 0x12	; 18
     f00:	f9 e1       	ldi	r31, 0x19	; 25
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f06:	83 2c       	mov	r8, r3
     f08:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     f0a:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     f0c:	44 81       	ldd	r20, Z+4	; 0x04
     f0e:	44 23       	and	r20, r20
     f10:	09 f4       	brne	.+2      	; 0xf14 <nwkRxTaskHandler+0x118>
     f12:	74 c0       	rjmp	.+232    	; 0xffc <nwkRxTaskHandler+0x200>
     f14:	d8 01       	movw	r26, r16
     f16:	1d 96       	adiw	r26, 0x0d	; 13
     f18:	6d 91       	ld	r22, X+
     f1a:	7c 91       	ld	r23, X
     f1c:	1e 97       	sbiw	r26, 0x0e	; 14
     f1e:	40 81       	ld	r20, Z
     f20:	51 81       	ldd	r21, Z+1	; 0x01
     f22:	64 17       	cp	r22, r20
     f24:	75 07       	cpc	r23, r21
     f26:	09 f0       	breq	.+2      	; 0xf2a <nwkRxTaskHandler+0x12e>
     f28:	6a c0       	rjmp	.+212    	; 0xffe <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     f2a:	1c 96       	adiw	r26, 0x0c	; 12
     f2c:	8c 91       	ld	r24, X
     f2e:	1c 97       	sbiw	r26, 0x0c	; 12
     f30:	f9 01       	movw	r30, r18
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	e2 0f       	add	r30, r18
     f3c:	f3 1f       	adc	r31, r19
     f3e:	ee 5e       	subi	r30, 0xEE	; 238
     f40:	f6 4e       	sbci	r31, 0xE6	; 230
     f42:	92 81       	ldd	r25, Z+2	; 0x02
     f44:	98 1b       	sub	r25, r24

      if (diff < 8)
     f46:	98 30       	cpi	r25, 0x08	; 8
     f48:	08 f0       	brcs	.+2      	; 0xf4c <nwkRxTaskHandler+0x150>
     f4a:	3e c0       	rjmp	.+124    	; 0xfc8 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     f4c:	f9 01       	movw	r30, r18
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	e2 0f       	add	r30, r18
     f58:	f3 1f       	adc	r31, r19
     f5a:	ee 5e       	subi	r30, 0xEE	; 238
     f5c:	f6 4e       	sbci	r31, 0xE6	; 230
     f5e:	83 81       	ldd	r24, Z+3	; 0x03
     f60:	48 2f       	mov	r20, r24
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	09 2e       	mov	r0, r25
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <nwkRxTaskHandler+0x170>
     f68:	55 95       	asr	r21
     f6a:	47 95       	ror	r20
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <nwkRxTaskHandler+0x16c>
     f70:	40 ff       	sbrs	r20, 0
     f72:	17 c0       	rjmp	.+46     	; 0xfa2 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     f74:	f7 01       	movw	r30, r14
     f76:	20 81       	ld	r18, Z
     f78:	31 81       	ldd	r19, Z+1	; 0x01
     f7a:	17 96       	adiw	r26, 0x07	; 7
     f7c:	8d 91       	ld	r24, X+
     f7e:	9c 91       	ld	r25, X
     f80:	18 97       	sbiw	r26, 0x08	; 8
     f82:	28 17       	cp	r18, r24
     f84:	39 07       	cpc	r19, r25
     f86:	09 f0       	breq	.+2      	; 0xf8a <nwkRxTaskHandler+0x18e>
     f88:	4e c1       	rjmp	.+668    	; 0x1226 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     f8a:	1b 96       	adiw	r26, 0x0b	; 11
     f8c:	6c 91       	ld	r22, X
     f8e:	1b 97       	sbiw	r26, 0x0b	; 11
     f90:	63 fb       	bst	r22, 3
     f92:	66 27       	eor	r22, r22
     f94:	60 f9       	bld	r22, 0
     f96:	1f 96       	adiw	r26, 0x0f	; 15
     f98:	8d 91       	ld	r24, X+
     f9a:	9c 91       	ld	r25, X
     f9c:	50 97       	sbiw	r26, 0x10	; 16
     f9e:	a4 dd       	rcall	.-1208   	; 0xae8 <nwkRouteRemove>
     fa0:	42 c1       	rjmp	.+644    	; 0x1226 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     fa2:	f9 01       	movw	r30, r18
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	ee 0f       	add	r30, r30
     faa:	ff 1f       	adc	r31, r31
     fac:	2e 0f       	add	r18, r30
     fae:	3f 1f       	adc	r19, r31
     fb0:	f9 01       	movw	r30, r18
     fb2:	ee 5e       	subi	r30, 0xEE	; 238
     fb4:	f6 4e       	sbci	r31, 0xE6	; 230
     fb6:	96 01       	movw	r18, r12
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <nwkRxTaskHandler+0x1c2>
     fba:	22 0f       	add	r18, r18
     fbc:	33 1f       	adc	r19, r19
     fbe:	9a 95       	dec	r25
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <nwkRxTaskHandler+0x1be>
     fc2:	82 2b       	or	r24, r18
     fc4:	83 83       	std	Z+3, r24	; 0x03
     fc6:	36 c1       	rjmp	.+620    	; 0x1234 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     fc8:	f9 01       	movw	r30, r18
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	2e 0f       	add	r18, r30
     fd4:	3f 1f       	adc	r19, r31
     fd6:	f9 01       	movw	r30, r18
     fd8:	ee 5e       	subi	r30, 0xEE	; 238
     fda:	f6 4e       	sbci	r31, 0xE6	; 230
     fdc:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     fde:	83 81       	ldd	r24, Z+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	91 95       	neg	r25
     fe6:	a9 01       	movw	r20, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <nwkRxTaskHandler+0x1f2>
     fea:	44 0f       	add	r20, r20
     fec:	55 1f       	adc	r21, r21
     fee:	9a 95       	dec	r25
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <nwkRxTaskHandler+0x1ee>
     ff2:	ca 01       	movw	r24, r20
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     ff8:	44 82       	std	Z+4, r4	; 0x04
     ffa:	1c c1       	rjmp	.+568    	; 0x1234 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
     ffc:	4f 01       	movw	r8, r30
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1002:	8a 30       	cpi	r24, 0x0A	; 10
    1004:	91 05       	cpc	r25, r1
    1006:	09 f0       	breq	.+2      	; 0x100a <nwkRxTaskHandler+0x20e>
    1008:	80 cf       	rjmp	.-256    	; 0xf0a <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    100a:	81 14       	cp	r8, r1
    100c:	91 04       	cpc	r9, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <nwkRxTaskHandler+0x216>
    1010:	0a c1       	rjmp	.+532    	; 0x1226 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1012:	d8 01       	movw	r26, r16
    1014:	1d 96       	adiw	r26, 0x0d	; 13
    1016:	8d 91       	ld	r24, X+
    1018:	9c 91       	ld	r25, X
    101a:	1e 97       	sbiw	r26, 0x0e	; 14
    101c:	f4 01       	movw	r30, r8
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1022:	1c 96       	adiw	r26, 0x0c	; 12
    1024:	8c 91       	ld	r24, X
    1026:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1028:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    102a:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    102c:	84 e0       	ldi	r24, 0x04	; 4
    102e:	99 e1       	ldi	r25, 0x19	; 25
    1030:	0a d5       	rcall	.+2580   	; 0x1a46 <SYS_TimerStart>
    1032:	00 c1       	rjmp	.+512    	; 0x1234 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1034:	d7 01       	movw	r26, r14
    1036:	2d 91       	ld	r18, X+
    1038:	3c 91       	ld	r19, X
    103a:	f8 01       	movw	r30, r16
    103c:	87 85       	ldd	r24, Z+15	; 0x0f
    103e:	90 89       	ldd	r25, Z+16	; 0x10
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	81 f0       	breq	.+32     	; 0x1066 <nwkRxTaskHandler+0x26a>
    1046:	43 85       	ldd	r20, Z+11	; 0x0b
    1048:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    104a:	0b c0       	rjmp	.+22     	; 0x1062 <nwkRxTaskHandler+0x266>
    104c:	c8 01       	movw	r24, r16
    104e:	e1 d1       	rcall	.+962    	; 0x1412 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1050:	d7 01       	movw	r26, r14
    1052:	2d 91       	ld	r18, X+
    1054:	3c 91       	ld	r19, X
    1056:	f8 01       	movw	r30, r16
    1058:	87 85       	ldd	r24, Z+15	; 0x0f
    105a:	90 89       	ldd	r25, Z+16	; 0x10
    105c:	28 17       	cp	r18, r24
    105e:	39 07       	cpc	r19, r25
    1060:	11 f0       	breq	.+4      	; 0x1066 <nwkRxTaskHandler+0x26a>
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	21 f4       	brne	.+8      	; 0x106e <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1066:	e2 e2       	ldi	r30, 0x22	; 34
    1068:	d8 01       	movw	r26, r16
    106a:	ec 93       	st	X, r30
    106c:	dc c0       	rjmp	.+440    	; 0x1226 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    106e:	d8 01       	movw	r26, r16
    1070:	17 96       	adiw	r26, 0x07	; 7
    1072:	8d 91       	ld	r24, X+
    1074:	9c 91       	ld	r25, X
    1076:	18 97       	sbiw	r26, 0x08	; 8
    1078:	82 17       	cp	r24, r18
    107a:	93 07       	cpc	r25, r19
    107c:	09 f0       	breq	.+2      	; 0x1080 <nwkRxTaskHandler+0x284>
    107e:	d3 c0       	rjmp	.+422    	; 0x1226 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1080:	e3 e2       	ldi	r30, 0x23	; 35
    1082:	ec 93       	st	X, r30
    1084:	d0 c0       	rjmp	.+416    	; 0x1226 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1086:	10 92 11 19 	sts	0x1911, r1	; 0x801911 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    108a:	d8 01       	movw	r26, r16
    108c:	51 96       	adiw	r26, 0x11	; 17
    108e:	8c 91       	ld	r24, X
    1090:	51 97       	sbiw	r26, 0x11	; 17
    1092:	82 95       	swap	r24
    1094:	8f 70       	andi	r24, 0x0F	; 15
    1096:	e8 2f       	mov	r30, r24
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e3 51       	subi	r30, 0x13	; 19
    10a0:	f6 4e       	sbci	r31, 0xE6	; 230
    10a2:	01 90       	ld	r0, Z+
    10a4:	f0 81       	ld	r31, Z
    10a6:	e0 2d       	mov	r30, r0
    10a8:	30 97       	sbiw	r30, 0x00	; 0
    10aa:	09 f4       	brne	.+2      	; 0x10ae <nwkRxTaskHandler+0x2b2>
    10ac:	60 c0       	rjmp	.+192    	; 0x116e <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    10ae:	1d 96       	adiw	r26, 0x0d	; 13
    10b0:	2d 91       	ld	r18, X+
    10b2:	3c 91       	ld	r19, X
    10b4:	1e 97       	sbiw	r26, 0x0e	; 14
    10b6:	3a 83       	std	Y+2, r19	; 0x02
    10b8:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    10ba:	1f 96       	adiw	r26, 0x0f	; 15
    10bc:	4d 91       	ld	r20, X+
    10be:	5c 91       	ld	r21, X
    10c0:	50 97       	sbiw	r26, 0x10	; 16
    10c2:	5c 83       	std	Y+4, r21	; 0x04
    10c4:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    10c6:	51 96       	adiw	r26, 0x11	; 17
    10c8:	9c 91       	ld	r25, X
    10ca:	51 97       	sbiw	r26, 0x11	; 17
    10cc:	9f 70       	andi	r25, 0x0F	; 15
    10ce:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    10d0:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    10d2:	af 57       	subi	r26, 0x7F	; 127
    10d4:	bf 4f       	sbci	r27, 0xFF	; 255
    10d6:	8d 91       	ld	r24, X+
    10d8:	9c 91       	ld	r25, X
    10da:	99 87       	std	Y+9, r25	; 0x09
    10dc:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    10de:	b8 01       	movw	r22, r16
    10e0:	6e 5f       	subi	r22, 0xFE	; 254
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    10e4:	86 1b       	sub	r24, r22
    10e6:	97 0b       	sbc	r25, r23
    10e8:	d8 01       	movw	r26, r16
    10ea:	11 96       	adiw	r26, 0x01	; 1
    10ec:	9c 91       	ld	r25, X
    10ee:	11 97       	sbiw	r26, 0x01	; 1
    10f0:	98 1b       	sub	r25, r24
    10f2:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    10f4:	ad 57       	subi	r26, 0x7D	; 125
    10f6:	bf 4f       	sbci	r27, 0xFF	; 255
    10f8:	8c 91       	ld	r24, X
    10fa:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    10fc:	11 96       	adiw	r26, 0x01	; 1
    10fe:	8c 91       	ld	r24, X
    1100:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1102:	d8 01       	movw	r26, r16
    1104:	1b 96       	adiw	r26, 0x0b	; 11
    1106:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1108:	69 2f       	mov	r22, r25
    110a:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    110c:	92 fd       	sbrc	r25, 2
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <nwkRxTaskHandler+0x318>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <nwkRxTaskHandler+0x31a>
    1114:	80 e2       	ldi	r24, 0x20	; 32
    1116:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1118:	93 fd       	sbrc	r25, 3
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <nwkRxTaskHandler+0x324>
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <nwkRxTaskHandler+0x326>
    1120:	90 e4       	ldi	r25, 0x40	; 64
    1122:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1124:	4f 3f       	cpi	r20, 0xFF	; 255
    1126:	5f 4f       	sbci	r21, 0xFF	; 255
    1128:	11 f0       	breq	.+4      	; 0x112e <nwkRxTaskHandler+0x332>
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <nwkRxTaskHandler+0x334>
    112e:	96 2d       	mov	r25, r6
    1130:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1132:	d8 01       	movw	r26, r16
    1134:	19 96       	adiw	r26, 0x09	; 9
    1136:	4d 91       	ld	r20, X+
    1138:	5c 91       	ld	r21, X
    113a:	1a 97       	sbiw	r26, 0x0a	; 10
    113c:	24 17       	cp	r18, r20
    113e:	35 07       	cpc	r19, r21
    1140:	11 f0       	breq	.+4      	; 0x1146 <nwkRxTaskHandler+0x34a>
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <nwkRxTaskHandler+0x34c>
    1146:	97 2d       	mov	r25, r7
    1148:	89 2b       	or	r24, r25
    114a:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    114c:	d8 01       	movw	r26, r16
    114e:	15 96       	adiw	r26, 0x05	; 5
    1150:	2d 91       	ld	r18, X+
    1152:	3c 91       	ld	r19, X
    1154:	16 97       	sbiw	r26, 0x06	; 6
    1156:	2f 3f       	cpi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	11 f0       	breq	.+4      	; 0x1160 <nwkRxTaskHandler+0x364>
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <nwkRxTaskHandler+0x366>
    1160:	9a 2d       	mov	r25, r10
    1162:	89 2b       	or	r24, r25
    1164:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1166:	ce 01       	movw	r24, r28
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	19 95       	eicall
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    116e:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1170:	f8 01       	movw	r30, r16
    1172:	93 85       	ldd	r25, Z+11	; 0x0b
    1174:	90 ff       	sbrs	r25, 0
    ack = false;
    1176:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1178:	d8 01       	movw	r26, r16
    117a:	17 96       	adiw	r26, 0x07	; 7
    117c:	2d 91       	ld	r18, X+
    117e:	3c 91       	ld	r19, X
    1180:	18 97       	sbiw	r26, 0x08	; 8
    1182:	2f 3f       	cpi	r18, 0xFF	; 255
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	69 f4       	brne	.+26     	; 0x11a2 <nwkRxTaskHandler+0x3a6>
    1188:	f7 01       	movw	r30, r14
    118a:	40 81       	ld	r20, Z
    118c:	51 81       	ldd	r21, Z+1	; 0x01
    118e:	d8 01       	movw	r26, r16
    1190:	1f 96       	adiw	r26, 0x0f	; 15
    1192:	2d 91       	ld	r18, X+
    1194:	3c 91       	ld	r19, X
    1196:	50 97       	sbiw	r26, 0x10	; 16
    1198:	42 17       	cp	r20, r18
    119a:	53 07       	cpc	r21, r19
    119c:	11 f4       	brne	.+4      	; 0x11a2 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    119e:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    11a0:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    11a2:	f8 01       	movw	r30, r16
    11a4:	25 81       	ldd	r18, Z+5	; 0x05
    11a6:	36 81       	ldd	r19, Z+6	; 0x06
    11a8:	2f 3f       	cpi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	a1 f1       	breq	.+104    	; 0x1216 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    11ae:	d7 01       	movw	r26, r14
    11b0:	2d 91       	ld	r18, X+
    11b2:	3c 91       	ld	r19, X
    11b4:	2f 3f       	cpi	r18, 0xFF	; 255
    11b6:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    11b8:	71 f1       	breq	.+92     	; 0x1216 <nwkRxTaskHandler+0x41a>
    11ba:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    11bc:	61 f1       	breq	.+88     	; 0x1216 <nwkRxTaskHandler+0x41a>
    11be:	90 db       	rcall	.-2272   	; 0x8e0 <nwkFrameAlloc>
    11c0:	4c 01       	movw	r8, r24
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    11c4:	41 f1       	breq	.+80     	; 0x1216 <nwkRxTaskHandler+0x41a>
    11c6:	f4 db       	rcall	.-2072   	; 0x9b0 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    11c8:	f4 01       	movw	r30, r8
    11ca:	81 81       	ldd	r24, Z+1	; 0x01
    11cc:	8d 5f       	subi	r24, 0xFD	; 253
    11ce:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    11d0:	e9 57       	subi	r30, 0x79	; 121
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	11 82       	std	Z+1, r1	; 0x01
    11d6:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    11d8:	d8 01       	movw	r26, r16
    11da:	1b 96       	adiw	r26, 0x0b	; 11
    11dc:	8c 91       	ld	r24, X
    11de:	1b 97       	sbiw	r26, 0x0b	; 11
    11e0:	86 95       	lsr	r24
    11e2:	81 70       	andi	r24, 0x01	; 1
    11e4:	f4 01       	movw	r30, r8
    11e6:	93 85       	ldd	r25, Z+11	; 0x0b
    11e8:	80 fb       	bst	r24, 0
    11ea:	91 f9       	bld	r25, 1
    11ec:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    11ee:	1d 96       	adiw	r26, 0x0d	; 13
    11f0:	8d 91       	ld	r24, X+
    11f2:	9c 91       	ld	r25, X
    11f4:	1e 97       	sbiw	r26, 0x0e	; 14
    11f6:	90 8b       	std	Z+16, r25	; 0x10
    11f8:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    11fa:	ef 57       	subi	r30, 0x7F	; 127
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	01 90       	ld	r0, Z+
    1200:	f0 81       	ld	r31, Z
    1202:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1204:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1206:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    120a:	82 83       	std	Z+2, r24	; 0x02
    120c:	1c 96       	adiw	r26, 0x0c	; 12
    120e:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    1210:	81 83       	std	Z+1, r24	; 0x01
    1212:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1214:	b0 d0       	rcall	.+352    	; 0x1376 <nwkTxFrame>
    1216:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1218:	bc 92       	st	X, r11
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <nwkRxTaskHandler+0x42a>
    121c:	c8 01       	movw	r24, r16
      } break;
    121e:	1e dd       	rcall	.-1476   	; 0xc5c <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <nwkRxTaskHandler+0x42a>
    1222:	c8 01       	movw	r24, r16
    1224:	96 db       	rcall	.-2260   	; 0x952 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1226:	c8 01       	movw	r24, r16
    1228:	9e db       	rcall	.-2244   	; 0x966 <nwkFrameNext>
    122a:	8c 01       	movw	r16, r24
    122c:	89 2b       	or	r24, r25
    122e:	09 f0       	breq	.+2      	; 0x1232 <nwkRxTaskHandler+0x436>
    1230:	20 ce       	rjmp	.-960    	; 0xe72 <nwkRxTaskHandler+0x76>
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <nwkRxTaskHandler+0x446>
    1234:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1236:	87 81       	ldd	r24, Z+7	; 0x07
    1238:	90 85       	ldd	r25, Z+8	; 0x08
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	09 f0       	breq	.+2      	; 0x1240 <nwkRxTaskHandler+0x444>
    123e:	08 cf       	rjmp	.-496    	; 0x1050 <nwkRxTaskHandler+0x254>
    1240:	f9 ce       	rjmp	.-526    	; 0x1034 <nwkRxTaskHandler+0x238>
    1242:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	8f 90       	pop	r8
    1266:	7f 90       	pop	r7
    1268:	6f 90       	pop	r6
    126a:	5f 90       	pop	r5
    126c:	4f 90       	pop	r4
    126e:	3f 90       	pop	r3
    1270:	2f 90       	pop	r2
    1272:	08 95       	ret

00001274 <nwkTxDelayTimerHandler>:
    1274:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	7c 01       	movw	r14, r24
    1280:	10 e0       	ldi	r17, 0x00	; 0
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	01 e0       	ldi	r16, 0x01	; 1
    1288:	c3 e1       	ldi	r28, 0x13	; 19
    128a:	13 c0       	rjmp	.+38     	; 0x12b2 <nwkTxDelayTimerHandler+0x3e>
    128c:	fc 01       	movw	r30, r24
    128e:	20 81       	ld	r18, Z
    1290:	21 31       	cpi	r18, 0x11	; 17
    1292:	79 f4       	brne	.+30     	; 0x12b2 <nwkTxDelayTimerHandler+0x3e>
    1294:	ec 57       	subi	r30, 0x7C	; 124
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	20 81       	ld	r18, Z
    129a:	31 81       	ldd	r19, Z+1	; 0x01
    129c:	21 50       	subi	r18, 0x01	; 1
    129e:	31 09       	sbc	r19, r1
    12a0:	31 83       	std	Z+1, r19	; 0x01
    12a2:	20 83       	st	Z, r18
    12a4:	23 2b       	or	r18, r19
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <nwkTxDelayTimerHandler+0x3c>
    12a8:	fc 01       	movw	r30, r24
    12aa:	c0 83       	st	Z, r28
    12ac:	10 2f       	mov	r17, r16
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <nwkTxDelayTimerHandler+0x3e>
    12b0:	10 2f       	mov	r17, r16
    12b2:	59 db       	rcall	.-2382   	; 0x966 <nwkFrameNext>
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	51 f7       	brne	.-44     	; 0x128c <nwkTxDelayTimerHandler+0x18>
    12b8:	11 23       	and	r17, r17
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <nwkTxDelayTimerHandler+0x4c>
    12bc:	c7 01       	movw	r24, r14
    12be:	c3 d3       	rcall	.+1926   	; 0x1a46 <SYS_TimerStart>
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	08 95       	ret

000012cc <nwkTxAckWaitTimerHandler>:
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	7c 01       	movw	r14, r24
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	01 e0       	ldi	r16, 0x01	; 1
    12e2:	d7 e1       	ldi	r29, 0x17	; 23
    12e4:	c0 e1       	ldi	r28, 0x10	; 16
    12e6:	16 c0       	rjmp	.+44     	; 0x1314 <nwkTxAckWaitTimerHandler+0x48>
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 81       	ld	r18, Z
    12ec:	26 31       	cpi	r18, 0x16	; 22
    12ee:	91 f4       	brne	.+36     	; 0x1314 <nwkTxAckWaitTimerHandler+0x48>
    12f0:	ec 57       	subi	r30, 0x7C	; 124
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	20 81       	ld	r18, Z
    12f6:	31 81       	ldd	r19, Z+1	; 0x01
    12f8:	21 50       	subi	r18, 0x01	; 1
    12fa:	31 09       	sbc	r19, r1
    12fc:	31 83       	std	Z+1, r19	; 0x01
    12fe:	20 83       	st	Z, r18
    1300:	23 2b       	or	r18, r19
    1302:	39 f4       	brne	.+14     	; 0x1312 <nwkTxAckWaitTimerHandler+0x46>
    1304:	fc 01       	movw	r30, r24
    1306:	d0 83       	st	Z, r29
    1308:	ed 57       	subi	r30, 0x7D	; 125
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	c0 83       	st	Z, r28
    130e:	10 2f       	mov	r17, r16
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <nwkTxAckWaitTimerHandler+0x48>
    1312:	10 2f       	mov	r17, r16
    1314:	28 db       	rcall	.-2480   	; 0x966 <nwkFrameNext>
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	39 f7       	brne	.-50     	; 0x12e8 <nwkTxAckWaitTimerHandler+0x1c>
    131a:	11 23       	and	r17, r17
    131c:	11 f0       	breq	.+4      	; 0x1322 <nwkTxAckWaitTimerHandler+0x56>
    131e:	c7 01       	movw	r24, r14
    1320:	92 d3       	rcall	.+1828   	; 0x1a46 <SYS_TimerStart>
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	08 95       	ret

00001330 <nwkTxInit>:
    1330:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    1334:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <nwkTxPhyActiveFrame>
    1338:	e1 e5       	ldi	r30, 0x51	; 81
    133a:	f9 e1       	ldi	r31, 0x19	; 25
    133c:	82 e3       	ldi	r24, 0x32	; 50
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 e0       	ldi	r26, 0x00	; 0
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	86 83       	std	Z+6, r24	; 0x06
    1346:	97 83       	std	Z+7, r25	; 0x07
    1348:	a0 87       	std	Z+8, r26	; 0x08
    134a:	b1 87       	std	Z+9, r27	; 0x09
    134c:	12 86       	std	Z+10, r1	; 0x0a
    134e:	86 e6       	ldi	r24, 0x66	; 102
    1350:	99 e0       	ldi	r25, 0x09	; 9
    1352:	94 87       	std	Z+12, r25	; 0x0c
    1354:	83 87       	std	Z+11, r24	; 0x0b
    1356:	e4 e4       	ldi	r30, 0x44	; 68
    1358:	f9 e1       	ldi	r31, 0x19	; 25
    135a:	8a e0       	ldi	r24, 0x0A	; 10
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a0 e0       	ldi	r26, 0x00	; 0
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	86 83       	std	Z+6, r24	; 0x06
    1364:	97 83       	std	Z+7, r25	; 0x07
    1366:	a0 87       	std	Z+8, r26	; 0x08
    1368:	b1 87       	std	Z+9, r27	; 0x09
    136a:	12 86       	std	Z+10, r1	; 0x0a
    136c:	8a e3       	ldi	r24, 0x3A	; 58
    136e:	99 e0       	ldi	r25, 0x09	; 9
    1370:	94 87       	std	Z+12, r25	; 0x0c
    1372:	83 87       	std	Z+11, r24	; 0x0b
    1374:	08 95       	ret

00001376 <nwkTxFrame>:
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ec 01       	movw	r28, r24
    137c:	fc 01       	movw	r30, r24
    137e:	ea 57       	subi	r30, 0x7A	; 122
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	80 81       	ld	r24, Z
    1384:	81 ff       	sbrs	r24, 1
    1386:	03 c0       	rjmp	.+6      	; 0x138e <nwkTxFrame+0x18>
    1388:	92 e1       	ldi	r25, 0x12	; 18
    138a:	98 83       	st	Y, r25
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <nwkTxFrame+0x1c>
    138e:	92 e1       	ldi	r25, 0x12	; 18
    1390:	98 83       	st	Y, r25
    1392:	fe 01       	movw	r30, r28
    1394:	ed 57       	subi	r30, 0x7D	; 125
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	10 82       	st	Z, r1
    139a:	80 ff       	sbrs	r24, 0
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <nwkTxFrame+0x32>
    139e:	2f ef       	ldi	r18, 0xFF	; 255
    13a0:	3f ef       	ldi	r19, 0xFF	; 255
    13a2:	3e 83       	std	Y+6, r19	; 0x06
    13a4:	2d 83       	std	Y+5, r18	; 0x05
    13a6:	06 c0       	rjmp	.+12     	; 0x13b4 <nwkTxFrame+0x3e>
    13a8:	20 91 e9 19 	lds	r18, 0x19E9	; 0x8019e9 <nwkIb+0x2>
    13ac:	30 91 ea 19 	lds	r19, 0x19EA	; 0x8019ea <nwkIb+0x3>
    13b0:	3e 83       	std	Y+6, r19	; 0x06
    13b2:	2d 83       	std	Y+5, r18	; 0x05
    13b4:	85 70       	andi	r24, 0x05	; 5
    13b6:	19 f4       	brne	.+6      	; 0x13be <nwkTxFrame+0x48>
    13b8:	ce 01       	movw	r24, r28
    13ba:	31 dc       	rcall	.-1950   	; 0xc1e <nwkRoutePrepareTx>
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <nwkTxFrame+0x50>
    13be:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c0:	98 89       	ldd	r25, Y+16	; 0x10
    13c2:	98 87       	std	Y+8, r25	; 0x08
    13c4:	8f 83       	std	Y+7, r24	; 0x07
    13c6:	e7 ee       	ldi	r30, 0xE7	; 231
    13c8:	f9 e1       	ldi	r31, 0x19	; 25
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	9a 87       	std	Y+10, r25	; 0x0a
    13d0:	89 87       	std	Y+9, r24	; 0x09
    13d2:	85 81       	ldd	r24, Z+5	; 0x05
    13d4:	8f 5f       	subi	r24, 0xFF	; 255
    13d6:	85 83       	std	Z+5, r24	; 0x05
    13d8:	8c 83       	std	Y+4, r24	; 0x04
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	98 85       	ldd	r25, Y+8	; 0x08
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	69 f4       	brne	.+26     	; 0x13fc <nwkTxFrame+0x86>
    13e2:	81 e4       	ldi	r24, 0x41	; 65
    13e4:	98 e8       	ldi	r25, 0x88	; 136
    13e6:	9b 83       	std	Y+3, r25	; 0x03
    13e8:	8a 83       	std	Y+2, r24	; 0x02
    13ea:	0c d4       	rcall	.+2072   	; 0x1c04 <rand>
    13ec:	cc 57       	subi	r28, 0x7C	; 124
    13ee:	df 4f       	sbci	r29, 0xFF	; 255
    13f0:	87 70       	andi	r24, 0x07	; 7
    13f2:	99 27       	eor	r25, r25
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	99 83       	std	Y+1, r25	; 0x01
    13f8:	88 83       	st	Y, r24
    13fa:	08 c0       	rjmp	.+16     	; 0x140c <nwkTxFrame+0x96>
    13fc:	81 e6       	ldi	r24, 0x61	; 97
    13fe:	98 e8       	ldi	r25, 0x88	; 136
    1400:	9b 83       	std	Y+3, r25	; 0x03
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	cc 57       	subi	r28, 0x7C	; 124
    1406:	df 4f       	sbci	r29, 0xFF	; 255
    1408:	19 82       	std	Y+1, r1	; 0x01
    140a:	18 82       	st	Y, r1
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <nwkTxBroadcastFrame>:
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	8c 01       	movw	r16, r24
    141c:	61 da       	rcall	.-2878   	; 0x8e0 <nwkFrameAlloc>
    141e:	ec 01       	movw	r28, r24
    1420:	89 2b       	or	r24, r25
    1422:	a9 f1       	breq	.+106    	; 0x148e <nwkTxBroadcastFrame+0x7c>
    1424:	82 e1       	ldi	r24, 0x12	; 18
    1426:	88 83       	st	Y, r24
    1428:	f8 01       	movw	r30, r16
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	fe 01       	movw	r30, r28
    1430:	ed 57       	subi	r30, 0x7D	; 125
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	10 82       	st	Z, r1
    1436:	e6 d3       	rcall	.+1996   	; 0x1c04 <rand>
    1438:	fe 01       	movw	r30, r28
    143a:	ec 57       	subi	r30, 0x7C	; 124
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	87 70       	andi	r24, 0x07	; 7
    1440:	99 27       	eor	r25, r25
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
    1448:	33 96       	adiw	r30, 0x03	; 3
    144a:	11 82       	std	Z+1, r1	; 0x01
    144c:	10 82       	st	Z, r1
    144e:	f8 01       	movw	r30, r16
    1450:	41 81       	ldd	r20, Z+1	; 0x01
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	b8 01       	movw	r22, r16
    1456:	6e 5f       	subi	r22, 0xFE	; 254
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	ce 01       	movw	r24, r28
    145c:	02 96       	adiw	r24, 0x02	; 2
    145e:	e0 d3       	rcall	.+1984   	; 0x1c20 <memcpy>
    1460:	81 e4       	ldi	r24, 0x41	; 65
    1462:	98 e8       	ldi	r25, 0x88	; 136
    1464:	9b 83       	std	Y+3, r25	; 0x03
    1466:	8a 83       	std	Y+2, r24	; 0x02
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	9f ef       	ldi	r25, 0xFF	; 255
    146c:	98 87       	std	Y+8, r25	; 0x08
    146e:	8f 83       	std	Y+7, r24	; 0x07
    1470:	f8 01       	movw	r30, r16
    1472:	85 81       	ldd	r24, Z+5	; 0x05
    1474:	96 81       	ldd	r25, Z+6	; 0x06
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	e7 ee       	ldi	r30, 0xE7	; 231
    147c:	f9 e1       	ldi	r31, 0x19	; 25
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	9a 87       	std	Y+10, r25	; 0x0a
    1484:	89 87       	std	Y+9, r24	; 0x09
    1486:	85 81       	ldd	r24, Z+5	; 0x05
    1488:	8f 5f       	subi	r24, 0xFF	; 255
    148a:	85 83       	std	Z+5, r24	; 0x05
    148c:	8c 83       	std	Y+4, r24	; 0x04
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <nwkTxAckReceived>:
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	fc 01       	movw	r30, r24
    149e:	21 85       	ldd	r18, Z+9	; 0x09
    14a0:	23 30       	cpi	r18, 0x03	; 3
    14a2:	d9 f4       	brne	.+54     	; 0x14da <nwkTxAckReceived+0x42>
    14a4:	10 c0       	rjmp	.+32     	; 0x14c6 <nwkTxAckReceived+0x2e>
    14a6:	fc 01       	movw	r30, r24
    14a8:	20 81       	ld	r18, Z
    14aa:	26 31       	cpi	r18, 0x16	; 22
    14ac:	89 f4       	brne	.+34     	; 0x14d0 <nwkTxAckReceived+0x38>
    14ae:	34 85       	ldd	r19, Z+12	; 0x0c
    14b0:	29 81       	ldd	r18, Y+1	; 0x01
    14b2:	32 13       	cpse	r19, r18
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <nwkTxAckReceived+0x38>
    14b6:	27 e1       	ldi	r18, 0x17	; 23
    14b8:	20 83       	st	Z, r18
    14ba:	2a 81       	ldd	r18, Y+2	; 0x02
    14bc:	ea 57       	subi	r30, 0x7A	; 122
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	20 83       	st	Z, r18
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <nwkTxAckReceived+0x44>
    14c6:	fc 01       	movw	r30, r24
    14c8:	c7 81       	ldd	r28, Z+7	; 0x07
    14ca:	d0 85       	ldd	r29, Z+8	; 0x08
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	4a da       	rcall	.-2924   	; 0x966 <nwkFrameNext>
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	41 f7       	brne	.-48     	; 0x14a6 <nwkTxAckReceived+0xe>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <nwkTxAckReceived+0x44>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	08 95       	ret

000014e2 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    14e2:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <nwkTxPhyActiveFrame>
    14e6:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <PHY_DataConf+0x14>
    14ee:	48 f0       	brcs	.+18     	; 0x1502 <PHY_DataConf+0x20>
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	19 f0       	breq	.+6      	; 0x14fa <PHY_DataConf+0x18>
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    14f6:	80 e2       	ldi	r24, 0x20	; 32
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    14fa:	81 e2       	ldi	r24, 0x21	; 33
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1502:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1504:	df 01       	movw	r26, r30
    1506:	ad 57       	subi	r26, 0x7D	; 125
    1508:	bf 4f       	sbci	r27, 0xFF	; 255
    150a:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    150c:	85 e1       	ldi	r24, 0x15	; 21
    150e:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1510:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    1514:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    1518:	e7 ee       	ldi	r30, 0xE7	; 231
    151a:	f9 e1       	ldi	r31, 0x19	; 25
    151c:	86 a1       	ldd	r24, Z+38	; 0x26
    151e:	97 a1       	ldd	r25, Z+39	; 0x27
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	97 a3       	std	Z+39, r25	; 0x27
    1524:	86 a3       	std	Z+38, r24	; 0x26
    1526:	08 95       	ret

00001528 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1528:	9f 92       	push	r9
    152a:	af 92       	push	r10
    152c:	bf 92       	push	r11
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    153e:	c0 e0       	ldi	r28, 0x00	; 0
    1540:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1542:	0f 2e       	mov	r0, r31
    1544:	f4 e1       	ldi	r31, 0x14	; 20
    1546:	af 2e       	mov	r10, r31
    1548:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    154a:	07 ee       	ldi	r16, 0xE7	; 231
    154c:	19 e1       	ldi	r17, 0x19	; 25
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    154e:	0f 2e       	mov	r0, r31
    1550:	f7 e1       	ldi	r31, 0x17	; 23
    1552:	df 2e       	mov	r13, r31
    1554:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1556:	0f 2e       	mov	r0, r31
    1558:	f6 e1       	ldi	r31, 0x16	; 22
    155a:	9f 2e       	mov	r9, r31
    155c:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    155e:	0f 2e       	mov	r0, r31
    1560:	f9 e2       	ldi	r31, 0x29	; 41
    1562:	ef 2e       	mov	r14, r31
    1564:	f1 2c       	mov	r15, r1
    1566:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1568:	0f 2e       	mov	r0, r31
    156a:	f3 e1       	ldi	r31, 0x13	; 19
    156c:	cf 2e       	mov	r12, r31
    156e:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1570:	0f 2e       	mov	r0, r31
    1572:	f1 e1       	ldi	r31, 0x11	; 17
    1574:	bf 2e       	mov	r11, r31
    1576:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1578:	60 c0       	rjmp	.+192    	; 0x163a <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    157a:	88 81       	ld	r24, Y
    157c:	83 31       	cpi	r24, 0x13	; 19
    157e:	c1 f0       	breq	.+48     	; 0x15b0 <nwkTxTaskHandler+0x88>
    1580:	18 f4       	brcc	.+6      	; 0x1588 <nwkTxTaskHandler+0x60>
    1582:	82 31       	cpi	r24, 0x12	; 18
    1584:	39 f0       	breq	.+14     	; 0x1594 <nwkTxTaskHandler+0x6c>
    1586:	59 c0       	rjmp	.+178    	; 0x163a <nwkTxTaskHandler+0x112>
    1588:	85 31       	cpi	r24, 0x15	; 21
    158a:	49 f1       	breq	.+82     	; 0x15de <nwkTxTaskHandler+0xb6>
    158c:	87 31       	cpi	r24, 0x17	; 23
    158e:	09 f4       	brne	.+2      	; 0x1592 <nwkTxTaskHandler+0x6a>
    1590:	45 c0       	rjmp	.+138    	; 0x161c <nwkTxTaskHandler+0xf4>
    1592:	53 c0       	rjmp	.+166    	; 0x163a <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1594:	fe 01       	movw	r30, r28
    1596:	ec 57       	subi	r30, 0x7C	; 124
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	89 2b       	or	r24, r25
    15a0:	29 f0       	breq	.+10     	; 0x15ac <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    15a2:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    15a4:	84 e4       	ldi	r24, 0x44	; 68
    15a6:	99 e1       	ldi	r25, 0x19	; 25
    15a8:	4e d2       	rcall	.+1180   	; 0x1a46 <SYS_TimerStart>
    15aa:	47 c0       	rjmp	.+142    	; 0x163a <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15ac:	c8 82       	st	Y, r12
    15ae:	45 c0       	rjmp	.+138    	; 0x163a <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    15b0:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <nwkTxPhyActiveFrame>
    15b4:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    15b8:	89 2b       	or	r24, r25
    15ba:	09 f0       	breq	.+2      	; 0x15be <nwkTxTaskHandler+0x96>
    15bc:	3e c0       	rjmp	.+124    	; 0x163a <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    15be:	d0 93 5f 19 	sts	0x195F, r29	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    15c2:	c0 93 5e 19 	sts	0x195E, r28	; 0x80195e <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    15c6:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    15c8:	69 81       	ldd	r22, Y+1	; 0x01
    15ca:	ce 01       	movw	r24, r28
    15cc:	02 96       	adiw	r24, 0x02	; 2
    15ce:	cb d0       	rcall	.+406    	; 0x1766 <PHY_DataReq>
          nwkIb.lock++;
    15d0:	f8 01       	movw	r30, r16
    15d2:	86 a1       	ldd	r24, Z+38	; 0x26
    15d4:	97 a1       	ldd	r25, Z+39	; 0x27
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	97 a3       	std	Z+39, r25	; 0x27
    15da:	86 a3       	std	Z+38, r24	; 0x26
    15dc:	2e c0       	rjmp	.+92     	; 0x163a <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    15de:	fe 01       	movw	r30, r28
    15e0:	ed 57       	subi	r30, 0x7D	; 125
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	81 11       	cpse	r24, r1
    15e8:	17 c0       	rjmp	.+46     	; 0x1618 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    15ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    15ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    15ee:	f8 01       	movw	r30, r16
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	28 17       	cp	r18, r24
    15f6:	39 07       	cpc	r19, r25
    15f8:	69 f4       	brne	.+26     	; 0x1614 <nwkTxTaskHandler+0xec>
    15fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    15fc:	80 ff       	sbrs	r24, 0
    15fe:	0a c0       	rjmp	.+20     	; 0x1614 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1600:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1602:	fe 01       	movw	r30, r28
    1604:	ec 57       	subi	r30, 0x7C	; 124
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	f1 82       	std	Z+1, r15	; 0x01
    160a:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    160c:	81 e5       	ldi	r24, 0x51	; 81
    160e:	99 e1       	ldi	r25, 0x19	; 25
    1610:	1a d2       	rcall	.+1076   	; 0x1a46 <SYS_TimerStart>
    1612:	13 c0       	rjmp	.+38     	; 0x163a <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1614:	d8 82       	st	Y, r13
    1616:	11 c0       	rjmp	.+34     	; 0x163a <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1618:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    161a:	0f c0       	rjmp	.+30     	; 0x163a <nwkTxTaskHandler+0x112>
    161c:	ce 01       	movw	r24, r28
    161e:	b8 da       	rcall	.-2704   	; 0xb90 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1620:	fe 01       	movw	r30, r28
    1622:	e9 57       	subi	r30, 0x79	; 121
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	01 90       	ld	r0, Z+
    1628:	f0 81       	ld	r31, Z
    162a:	e0 2d       	mov	r30, r0
    162c:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    162e:	19 f4       	brne	.+6      	; 0x1636 <nwkTxTaskHandler+0x10e>
    1630:	ce 01       	movw	r24, r28
    1632:	8f d9       	rcall	.-3298   	; 0x952 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    1634:	02 c0       	rjmp	.+4      	; 0x163a <nwkTxTaskHandler+0x112>
    1636:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1638:	19 95       	eicall
    163a:	ce 01       	movw	r24, r28
    163c:	94 d9       	rcall	.-3288   	; 0x966 <nwkFrameNext>
    163e:	ec 01       	movw	r28, r24
    1640:	89 2b       	or	r24, r25
    1642:	09 f0       	breq	.+2      	; 0x1646 <nwkTxTaskHandler+0x11e>
    1644:	9a cf       	rjmp	.-204    	; 0x157a <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	df 90       	pop	r13
    1654:	cf 90       	pop	r12
    1656:	bf 90       	pop	r11
    1658:	af 90       	pop	r10
    165a:	9f 90       	pop	r9
    165c:	08 95       	ret

0000165e <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    165e:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <phyBand>
    1662:	98 2f       	mov	r25, r24
    1664:	9f 70       	andi	r25, 0x0F	; 15
    1666:	e4 e5       	ldi	r30, 0x54	; 84
    1668:	f1 e0       	ldi	r31, 0x01	; 1
    166a:	80 81       	ld	r24, Z
    166c:	80 7f       	andi	r24, 0xF0	; 240
    166e:	89 2b       	or	r24, r25
    1670:	80 83       	st	Z, r24
    1672:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <phyBand>
    1676:	88 23       	and	r24, r24
    1678:	29 f0       	breq	.+10     	; 0x1684 <phySetChannel+0x26>
    167a:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <phyChannel>
    167e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    1682:	08 95       	ret
    1684:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <phyChannel>
    1688:	98 2f       	mov	r25, r24
    168a:	9f 71       	andi	r25, 0x1F	; 31
    168c:	e8 e4       	ldi	r30, 0x48	; 72
    168e:	f1 e0       	ldi	r31, 0x01	; 1
    1690:	80 81       	ld	r24, Z
    1692:	80 7e       	andi	r24, 0xE0	; 224
    1694:	89 2b       	or	r24, r25
    1696:	80 83       	st	Z, r24
    1698:	08 95       	ret

0000169a <phyTrxSetState>:
    169a:	93 e0       	ldi	r25, 0x03	; 3
    169c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    16a0:	e1 e4       	ldi	r30, 0x41	; 65
    16a2:	f1 e0       	ldi	r31, 0x01	; 1
    16a4:	90 81       	ld	r25, Z
    16a6:	9f 71       	andi	r25, 0x1F	; 31
    16a8:	98 30       	cpi	r25, 0x08	; 8
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <phyTrxSetState+0xa>
    16ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    16b0:	e1 e4       	ldi	r30, 0x41	; 65
    16b2:	f1 e0       	ldi	r31, 0x01	; 1
    16b4:	90 81       	ld	r25, Z
    16b6:	9f 71       	andi	r25, 0x1F	; 31
    16b8:	89 13       	cpse	r24, r25
    16ba:	fc cf       	rjmp	.-8      	; 0x16b4 <phyTrxSetState+0x1a>
    16bc:	08 95       	ret

000016be <phySetRxState>:
    16be:	88 e0       	ldi	r24, 0x08	; 8
    16c0:	ec df       	rcall	.-40     	; 0x169a <phyTrxSetState>
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    16c8:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <phyRxState>
    16cc:	88 23       	and	r24, r24
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <phySetRxState+0x16>
    16d0:	86 e1       	ldi	r24, 0x16	; 22
    16d2:	e3 cf       	rjmp	.-58     	; 0x169a <phyTrxSetState>
    16d4:	08 95       	ret

000016d6 <PHY_Init>:
    16d6:	e9 e3       	ldi	r30, 0x39	; 57
    16d8:	f1 e0       	ldi	r31, 0x01	; 1
    16da:	80 81       	ld	r24, Z
    16dc:	81 60       	ori	r24, 0x01	; 1
    16de:	80 83       	st	Z, r24
    16e0:	10 92 62 19 	sts	0x1962, r1	; 0x801962 <phyRxState>
    16e4:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <phyBand>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>
    16ee:	88 e0       	ldi	r24, 0x08	; 8
    16f0:	d4 df       	rcall	.-88     	; 0x169a <phyTrxSetState>
    16f2:	8b ee       	ldi	r24, 0xEB	; 235
    16f4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    16f8:	ec e4       	ldi	r30, 0x4C	; 76
    16fa:	f1 e0       	ldi	r31, 0x01	; 1
    16fc:	80 81       	ld	r24, Z
    16fe:	80 68       	ori	r24, 0x80	; 128
    1700:	80 83       	st	Z, r24
    1702:	08 95       	ret

00001704 <PHY_SetRxState>:
    1704:	80 93 62 19 	sts	0x1962, r24	; 0x801962 <phyRxState>
    1708:	da cf       	rjmp	.-76     	; 0x16be <phySetRxState>
    170a:	08 95       	ret

0000170c <PHY_SetChannel>:
    170c:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <phyChannel>
    1710:	a6 cf       	rjmp	.-180    	; 0x165e <phySetChannel>
    1712:	08 95       	ret

00001714 <PHY_SetPanId>:
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	1f 92       	push	r1
    171a:	1f 92       	push	r1
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <PHY_SetShortAddr>:
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	1f 92       	push	r1
    173e:	1f 92       	push	r1
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	9a 83       	std	Y+2, r25	; 0x02
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    1752:	99 81       	ldd	r25, Y+1	; 0x01
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	89 0f       	add	r24, r25
    1758:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	08 95       	ret

00001766 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	18 2f       	mov	r17, r24
    176e:	d9 2f       	mov	r29, r25
    1770:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1772:	89 e1       	ldi	r24, 0x19	; 25
    1774:	92 df       	rcall	.-220    	; 0x169a <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	8c 0f       	add	r24, r28
    1780:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    1784:	cc 23       	and	r28, r28
    1786:	71 f0       	breq	.+28     	; 0x17a4 <PHY_DataReq+0x3e>
    1788:	a1 2f       	mov	r26, r17
    178a:	bd 2f       	mov	r27, r29
    178c:	c1 50       	subi	r28, 0x01	; 1
    178e:	6c 2f       	mov	r22, r28
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	6e 57       	subi	r22, 0x7E	; 126
    1794:	7e 4f       	sbci	r23, 0xFE	; 254
    1796:	e1 e8       	ldi	r30, 0x81	; 129
    1798:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    179a:	8d 91       	ld	r24, X+
    179c:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    179e:	e6 17       	cp	r30, r22
    17a0:	f7 07       	cpc	r31, r23
    17a2:	d9 f7       	brne	.-10     	; 0x179a <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	08 95       	ret

000017b8 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <PHY_TaskHandler+0x8>
    17c0:	1f 92       	push	r1
    17c2:	1f 92       	push	r1
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    17c8:	80 91 e3 19 	lds	r24, 0x19E3	; 0x8019e3 <phyState>
    17cc:	82 30       	cpi	r24, 0x02	; 2
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <PHY_TaskHandler+0x1a>
    17d0:	65 c0       	rjmp	.+202    	; 0x189c <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    17d2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    17d6:	83 ff       	sbrs	r24, 3
    17d8:	3e c0       	rjmp	.+124    	; 0x1856 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    17da:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    17de:	6a 2f       	mov	r22, r26
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	ab 01       	movw	r20, r22
    17e4:	4f 5f       	subi	r20, 0xFF	; 255
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    17ee:	fc 01       	movw	r30, r24
    17f0:	e0 58       	subi	r30, 0x80	; 128
    17f2:	fe 4f       	sbci	r31, 0xFE	; 254
    17f4:	30 81       	ld	r19, Z
    17f6:	fc 01       	movw	r30, r24
    17f8:	ed 59       	subi	r30, 0x9D	; 157
    17fa:	f6 4e       	sbci	r31, 0xE6	; 230
    17fc:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    17fe:	2f 5f       	subi	r18, 0xFF	; 255
    1800:	82 2f       	mov	r24, r18
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	84 17       	cp	r24, r20
    1806:	95 07       	cpc	r25, r21
    1808:	94 f3       	brlt	.-28     	; 0x17ee <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    180a:	83 e6       	ldi	r24, 0x63	; 99
    180c:	99 e1       	ldi	r25, 0x19	; 25
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1812:	a2 50       	subi	r26, 0x02	; 2
    1814:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1816:	fb 01       	movw	r30, r22
    1818:	ed 59       	subi	r30, 0x9D	; 157
    181a:	f6 4e       	sbci	r31, 0xE6	; 230
    181c:	80 81       	ld	r24, Z
    181e:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1820:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1824:	8a 55       	subi	r24, 0x5A	; 90
    1826:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1828:	ce 01       	movw	r24, r28
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	bd da       	rcall	.-2694   	; 0xda8 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    182e:	e1 e4       	ldi	r30, 0x41	; 65
    1830:	f1 e0       	ldi	r31, 0x01	; 1
    1832:	80 81       	ld	r24, Z
    1834:	8f 71       	andi	r24, 0x1F	; 31
    1836:	86 31       	cpi	r24, 0x16	; 22
    1838:	e1 f7       	brne	.-8      	; 0x1832 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    183a:	ef e4       	ldi	r30, 0x4F	; 79
    183c:	f1 e0       	ldi	r31, 0x01	; 1
    183e:	80 81       	ld	r24, Z
    1840:	88 60       	ori	r24, 0x08	; 8
    1842:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1844:	ec e4       	ldi	r30, 0x4C	; 76
    1846:	f1 e0       	ldi	r31, 0x01	; 1
    1848:	80 81       	ld	r24, Z
    184a:	8f 77       	andi	r24, 0x7F	; 127
    184c:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    184e:	80 81       	ld	r24, Z
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	80 83       	st	Z, r24
    1854:	23 c0       	rjmp	.+70     	; 0x189c <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    1856:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    185a:	86 ff       	sbrs	r24, 6
    185c:	1f c0       	rjmp	.+62     	; 0x189c <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    185e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1862:	8f 71       	andi	r24, 0x1F	; 31
    1864:	89 31       	cpi	r24, 0x19	; 25
    1866:	a9 f4       	brne	.+42     	; 0x1892 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    1868:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    186c:	12 95       	swap	r17
    186e:	16 95       	lsr	r17
    1870:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1872:	49 f0       	breq	.+18     	; 0x1886 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1874:	13 30       	cpi	r17, 0x03	; 3
    1876:	21 f0       	breq	.+8      	; 0x1880 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    1878:	15 30       	cpi	r17, 0x05	; 5
    187a:	21 f0       	breq	.+8      	; 0x1884 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    187c:	13 e0       	ldi	r17, 0x03	; 3
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1880:	11 e0       	ldi	r17, 0x01	; 1
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    1884:	12 e0       	ldi	r17, 0x02	; 2
    1886:	1b df       	rcall	.-458    	; 0x16be <phySetRxState>
      phyState = PHY_STATE_IDLE;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>

      PHY_DataConf(status);
    188e:	81 2f       	mov	r24, r17
    1890:	28 de       	rcall	.-944    	; 0x14e2 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    1892:	ef e4       	ldi	r30, 0x4F	; 79
    1894:	f1 e0       	ldi	r31, 0x01	; 1
    1896:	80 81       	ld	r24, Z
    1898:	80 64       	ori	r24, 0x40	; 64
    189a:	80 83       	st	Z, r24
  }
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	08 95       	ret

000018ae <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    18ae:	0e 94 a3 01 	call	0x346	; 0x346 <HAL_Init>
  SYS_TimerInit();
    18b2:	6d d0       	rcall	.+218    	; 0x198e <SYS_TimerInit>
  PHY_Init();
    18b4:	10 df       	rcall	.-480    	; 0x16d6 <PHY_Init>
    18b6:	0c 94 44 03 	jmp	0x688	; 0x688 <NWK_Init>
  NWK_Init();
    18ba:	08 95       	ret

000018bc <SYS_TaskHandler>:
    18bc:	7d df       	rcall	.-262    	; 0x17b8 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    18be:	0e 94 72 03 	call	0x6e4	; 0x6e4 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    18c2:	cc c0       	rjmp	.+408    	; 0x1a5c <SYS_TimerTaskHandler>
    18c4:	08 95       	ret

000018c6 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ec 01       	movw	r28, r24
  if (timers)
    18d0:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    18d4:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	09 f4       	brne	.+2      	; 0x18de <placeTimer+0x18>
    18dc:	45 c0       	rjmp	.+138    	; 0x1968 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    18de:	4e 81       	ldd	r20, Y+6	; 0x06
    18e0:	5f 81       	ldd	r21, Y+7	; 0x07
    18e2:	68 85       	ldd	r22, Y+8	; 0x08
    18e4:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    18e6:	fc 01       	movw	r30, r24
    18e8:	02 81       	ldd	r16, Z+2	; 0x02
    18ea:	13 81       	ldd	r17, Z+3	; 0x03
    18ec:	24 81       	ldd	r18, Z+4	; 0x04
    18ee:	35 81       	ldd	r19, Z+5	; 0x05
    18f0:	40 17       	cp	r20, r16
    18f2:	51 07       	cpc	r21, r17
    18f4:	62 07       	cpc	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	60 f0       	brcs	.+24     	; 0x1912 <placeTimer+0x4c>
    18fa:	dc 01       	movw	r26, r24
    18fc:	17 c0       	rjmp	.+46     	; 0x192c <placeTimer+0x66>
    18fe:	02 81       	ldd	r16, Z+2	; 0x02
    1900:	13 81       	ldd	r17, Z+3	; 0x03
    1902:	24 81       	ldd	r18, Z+4	; 0x04
    1904:	35 81       	ldd	r19, Z+5	; 0x05
    1906:	40 17       	cp	r20, r16
    1908:	51 07       	cpc	r21, r17
    190a:	62 07       	cpc	r22, r18
    190c:	73 07       	cpc	r23, r19
    190e:	68 f4       	brcc	.+26     	; 0x192a <placeTimer+0x64>
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1912:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1914:	a0 e0       	ldi	r26, 0x00	; 0
    1916:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1918:	04 1b       	sub	r16, r20
    191a:	15 0b       	sbc	r17, r21
    191c:	26 0b       	sbc	r18, r22
    191e:	37 0b       	sbc	r19, r23
    1920:	02 83       	std	Z+2, r16	; 0x02
    1922:	13 83       	std	Z+3, r17	; 0x03
    1924:	24 83       	std	Z+4, r18	; 0x04
    1926:	35 83       	std	Z+5, r19	; 0x05
         break;
    1928:	0a c0       	rjmp	.+20     	; 0x193e <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    192a:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    192c:	40 1b       	sub	r20, r16
    192e:	51 0b       	sbc	r21, r17
    1930:	62 0b       	sbc	r22, r18
    1932:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1934:	ed 91       	ld	r30, X+
    1936:	fc 91       	ld	r31, X
    1938:	11 97       	sbiw	r26, 0x01	; 1
    193a:	30 97       	sbiw	r30, 0x00	; 0
    193c:	01 f7       	brne	.-64     	; 0x18fe <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    193e:	4a 83       	std	Y+2, r20	; 0x02
    1940:	5b 83       	std	Y+3, r21	; 0x03
    1942:	6c 83       	std	Y+4, r22	; 0x04
    1944:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1946:	10 97       	sbiw	r26, 0x00	; 0
    1948:	41 f0       	breq	.+16     	; 0x195a <placeTimer+0x94>
    {
      timer->next = prev->next;
    194a:	8d 91       	ld	r24, X+
    194c:	9c 91       	ld	r25, X
    194e:	11 97       	sbiw	r26, 0x01	; 1
    1950:	99 83       	std	Y+1, r25	; 0x01
    1952:	88 83       	st	Y, r24
      prev->next = timer;
    1954:	cd 93       	st	X+, r28
    1956:	dc 93       	st	X, r29
    1958:	15 c0       	rjmp	.+42     	; 0x1984 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    195a:	99 83       	std	Y+1, r25	; 0x01
    195c:	88 83       	st	Y, r24
      timers = timer;
    195e:	d0 93 e5 19 	sts	0x19E5, r29	; 0x8019e5 <timers+0x1>
    1962:	c0 93 e4 19 	sts	0x19E4, r28	; 0x8019e4 <timers>
    1966:	0e c0       	rjmp	.+28     	; 0x1984 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1968:	19 82       	std	Y+1, r1	; 0x01
    196a:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    196c:	8e 81       	ldd	r24, Y+6	; 0x06
    196e:	9f 81       	ldd	r25, Y+7	; 0x07
    1970:	a8 85       	ldd	r26, Y+8	; 0x08
    1972:	b9 85       	ldd	r27, Y+9	; 0x09
    1974:	8a 83       	std	Y+2, r24	; 0x02
    1976:	9b 83       	std	Y+3, r25	; 0x03
    1978:	ac 83       	std	Y+4, r26	; 0x04
    197a:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    197c:	d0 93 e5 19 	sts	0x19E5, r29	; 0x8019e5 <timers+0x1>
    1980:	c0 93 e4 19 	sts	0x19E4, r28	; 0x8019e4 <timers>
  }
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    198e:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <timers+0x1>
    1992:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <timers>
    1996:	08 95       	ret

00001998 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    199c:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <timers>
    19a0:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <timers+0x1>
    19a4:	10 97       	sbiw	r26, 0x00	; 0
    19a6:	91 f1       	breq	.+100    	; 0x1a0c <SYS_TimerStop+0x74>
  {
    if (t == timer)
    19a8:	a8 17       	cp	r26, r24
    19aa:	b9 07       	cpc	r27, r25
    19ac:	51 f5       	brne	.+84     	; 0x1a02 <SYS_TimerStop+0x6a>
    19ae:	0a c0       	rjmp	.+20     	; 0x19c4 <SYS_TimerStop+0x2c>
    19b0:	8e 17       	cp	r24, r30
    19b2:	9f 07       	cpc	r25, r31
    19b4:	29 f5       	brne	.+74     	; 0x1a00 <SYS_TimerStop+0x68>
    {
      if (prev)
    19b6:	10 97       	sbiw	r26, 0x00	; 0
    19b8:	31 f0       	breq	.+12     	; 0x19c6 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    19ba:	20 81       	ld	r18, Z
    19bc:	31 81       	ldd	r19, Z+1	; 0x01
    19be:	2d 93       	st	X+, r18
    19c0:	3c 93       	st	X, r19
    19c2:	07 c0       	rjmp	.+14     	; 0x19d2 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    19c4:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    19c6:	20 81       	ld	r18, Z
    19c8:	31 81       	ldd	r19, Z+1	; 0x01
    19ca:	30 93 e5 19 	sts	0x19E5, r19	; 0x8019e5 <timers+0x1>
    19ce:	20 93 e4 19 	sts	0x19E4, r18	; 0x8019e4 <timers>

      if (t->next)
    19d2:	01 90       	ld	r0, Z+
    19d4:	f0 81       	ld	r31, Z
    19d6:	e0 2d       	mov	r30, r0
    19d8:	30 97       	sbiw	r30, 0x00	; 0
    19da:	c1 f0       	breq	.+48     	; 0x1a0c <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    19dc:	42 81       	ldd	r20, Z+2	; 0x02
    19de:	53 81       	ldd	r21, Z+3	; 0x03
    19e0:	64 81       	ldd	r22, Z+4	; 0x04
    19e2:	75 81       	ldd	r23, Z+5	; 0x05
    19e4:	ec 01       	movw	r28, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ea:	ac 81       	ldd	r26, Y+4	; 0x04
    19ec:	bd 81       	ldd	r27, Y+5	; 0x05
    19ee:	84 0f       	add	r24, r20
    19f0:	95 1f       	adc	r25, r21
    19f2:	a6 1f       	adc	r26, r22
    19f4:	b7 1f       	adc	r27, r23
    19f6:	82 83       	std	Z+2, r24	; 0x02
    19f8:	93 83       	std	Z+3, r25	; 0x03
    19fa:	a4 83       	std	Z+4, r26	; 0x04
    19fc:	b5 83       	std	Z+5, r27	; 0x05
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a00:	df 01       	movw	r26, r30
    1a02:	ed 91       	ld	r30, X+
    1a04:	fc 91       	ld	r31, X
    1a06:	11 97       	sbiw	r26, 0x01	; 1
    1a08:	30 97       	sbiw	r30, 0x00	; 0
    1a0a:	91 f6       	brne	.-92     	; 0x19b0 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a12:	e0 91 e4 19 	lds	r30, 0x19E4	; 0x8019e4 <timers>
    1a16:	f0 91 e5 19 	lds	r31, 0x19E5	; 0x8019e5 <timers+0x1>
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	71 f0       	breq	.+28     	; 0x1a3a <SYS_TimerStarted+0x28>
    if (t == timer)
    1a1e:	e8 17       	cp	r30, r24
    1a20:	f9 07       	cpc	r31, r25
    1a22:	21 f4       	brne	.+8      	; 0x1a2c <SYS_TimerStarted+0x1a>
    1a24:	0c c0       	rjmp	.+24     	; 0x1a3e <SYS_TimerStarted+0x2c>
    1a26:	8e 17       	cp	r24, r30
    1a28:	9f 07       	cpc	r25, r31
    1a2a:	59 f0       	breq	.+22     	; 0x1a42 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	f0 81       	ld	r31, Z
    1a30:	e0 2d       	mov	r30, r0
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	c1 f7       	brne	.-16     	; 0x1a26 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	08 95       	ret
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	08 95       	ret
    1a42:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1a44:	08 95       	ret

00001a46 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1a4c:	e2 df       	rcall	.-60     	; 0x1a12 <SYS_TimerStarted>
    1a4e:	81 11       	cpse	r24, r1
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <SYS_TimerStart+0x10>
    placeTimer(timer);
    1a52:	ce 01       	movw	r24, r28
    1a54:	38 df       	rcall	.-400    	; 0x18c6 <placeTimer>
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1a68:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    1a6c:	88 23       	and	r24, r24
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <SYS_TimerTaskHandler+0x16>
    1a70:	59 c0       	rjmp	.+178    	; 0x1b24 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1a72:	8f b7       	in	r24, 0x3f	; 63
    1a74:	f8 94       	cli
    cnt = halTimerIrqCount;
    1a76:	c0 90 e6 19 	lds	r12, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1a7a:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1a7e:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1a80:	d1 2c       	mov	r13, r1
    1a82:	e1 2c       	mov	r14, r1
    1a84:	f1 2c       	mov	r15, r1
    1a86:	cc 0c       	add	r12, r12
    1a88:	dd 1c       	adc	r13, r13
    1a8a:	ee 1c       	adc	r14, r14
    1a8c:	ff 1c       	adc	r15, r15
    1a8e:	d7 01       	movw	r26, r14
    1a90:	c6 01       	movw	r24, r12
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	aa 1f       	adc	r26, r26
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	aa 1f       	adc	r26, r26
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	c8 0e       	add	r12, r24
    1aa4:	d9 1e       	adc	r13, r25
    1aa6:	ea 1e       	adc	r14, r26
    1aa8:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1aaa:	c0 91 e4 19 	lds	r28, 0x19E4	; 0x8019e4 <timers>
    1aae:	d0 91 e5 19 	lds	r29, 0x19E5	; 0x8019e5 <timers+0x1>
    1ab2:	20 97       	sbiw	r28, 0x00	; 0
    1ab4:	b9 f1       	breq	.+110    	; 0x1b24 <SYS_TimerTaskHandler+0xc8>
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	ac 81       	ldd	r26, Y+4	; 0x04
    1abc:	bd 81       	ldd	r27, Y+5	; 0x05
    1abe:	c8 16       	cp	r12, r24
    1ac0:	d9 06       	cpc	r13, r25
    1ac2:	ea 06       	cpc	r14, r26
    1ac4:	fb 06       	cpc	r15, r27
    1ac6:	10 f1       	brcs	.+68     	; 0x1b0c <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1ac8:	c8 1a       	sub	r12, r24
    1aca:	d9 0a       	sbc	r13, r25
    1acc:	ea 0a       	sbc	r14, r26
    1ace:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1ad0:	88 81       	ld	r24, Y
    1ad2:	99 81       	ldd	r25, Y+1	; 0x01
    1ad4:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    1ad8:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1adc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	f0 de       	rcall	.-544    	; 0x18c6 <placeTimer>
    timer->handler(timer);
    1ae6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ae8:	fc 85       	ldd	r31, Y+12	; 0x0c
    1aea:	ce 01       	movw	r24, r28
    1aec:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1aee:	c0 91 e4 19 	lds	r28, 0x19E4	; 0x8019e4 <timers>
    1af2:	d0 91 e5 19 	lds	r29, 0x19E5	; 0x8019e5 <timers+0x1>
    1af6:	20 97       	sbiw	r28, 0x00	; 0
    1af8:	a9 f0       	breq	.+42     	; 0x1b24 <SYS_TimerTaskHandler+0xc8>
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	ac 81       	ldd	r26, Y+4	; 0x04
    1b00:	bd 81       	ldd	r27, Y+5	; 0x05
    1b02:	c8 16       	cp	r12, r24
    1b04:	d9 06       	cpc	r13, r25
    1b06:	ea 06       	cpc	r14, r26
    1b08:	fb 06       	cpc	r15, r27
    1b0a:	f0 f6       	brcc	.-68     	; 0x1ac8 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b10:	ac 81       	ldd	r26, Y+4	; 0x04
    1b12:	bd 81       	ldd	r27, Y+5	; 0x05
    1b14:	8c 19       	sub	r24, r12
    1b16:	9d 09       	sbc	r25, r13
    1b18:	ae 09       	sbc	r26, r14
    1b1a:	bf 09       	sbc	r27, r15
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	9b 83       	std	Y+3, r25	; 0x03
    1b20:	ac 83       	std	Y+4, r26	; 0x04
    1b22:	bd 83       	std	Y+5, r27	; 0x05
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	df 90       	pop	r13
    1b2e:	cf 90       	pop	r12
    1b30:	08 95       	ret

00001b32 <__udivmodsi4>:
    1b32:	a1 e2       	ldi	r26, 0x21	; 33
    1b34:	1a 2e       	mov	r1, r26
    1b36:	aa 1b       	sub	r26, r26
    1b38:	bb 1b       	sub	r27, r27
    1b3a:	fd 01       	movw	r30, r26
    1b3c:	0d c0       	rjmp	.+26     	; 0x1b58 <__udivmodsi4_ep>

00001b3e <__udivmodsi4_loop>:
    1b3e:	aa 1f       	adc	r26, r26
    1b40:	bb 1f       	adc	r27, r27
    1b42:	ee 1f       	adc	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	a2 17       	cp	r26, r18
    1b48:	b3 07       	cpc	r27, r19
    1b4a:	e4 07       	cpc	r30, r20
    1b4c:	f5 07       	cpc	r31, r21
    1b4e:	20 f0       	brcs	.+8      	; 0x1b58 <__udivmodsi4_ep>
    1b50:	a2 1b       	sub	r26, r18
    1b52:	b3 0b       	sbc	r27, r19
    1b54:	e4 0b       	sbc	r30, r20
    1b56:	f5 0b       	sbc	r31, r21

00001b58 <__udivmodsi4_ep>:
    1b58:	66 1f       	adc	r22, r22
    1b5a:	77 1f       	adc	r23, r23
    1b5c:	88 1f       	adc	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	1a 94       	dec	r1
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <__udivmodsi4_loop>
    1b64:	60 95       	com	r22
    1b66:	70 95       	com	r23
    1b68:	80 95       	com	r24
    1b6a:	90 95       	com	r25
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	ac 01       	movw	r20, r24
    1b70:	bd 01       	movw	r22, r26
    1b72:	cf 01       	movw	r24, r30
    1b74:	08 95       	ret

00001b76 <do_rand>:
    1b76:	8f 92       	push	r8
    1b78:	9f 92       	push	r9
    1b7a:	af 92       	push	r10
    1b7c:	bf 92       	push	r11
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	ec 01       	movw	r28, r24
    1b8c:	68 81       	ld	r22, Y
    1b8e:	79 81       	ldd	r23, Y+1	; 0x01
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	9b 81       	ldd	r25, Y+3	; 0x03
    1b94:	61 15       	cp	r22, r1
    1b96:	71 05       	cpc	r23, r1
    1b98:	81 05       	cpc	r24, r1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	21 f4       	brne	.+8      	; 0x1ba6 <do_rand+0x30>
    1b9e:	64 e2       	ldi	r22, 0x24	; 36
    1ba0:	79 ed       	ldi	r23, 0xD9	; 217
    1ba2:	8b e5       	ldi	r24, 0x5B	; 91
    1ba4:	97 e0       	ldi	r25, 0x07	; 7
    1ba6:	2d e1       	ldi	r18, 0x1D	; 29
    1ba8:	33 ef       	ldi	r19, 0xF3	; 243
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	41 d0       	rcall	.+130    	; 0x1c32 <__divmodsi4>
    1bb0:	49 01       	movw	r8, r18
    1bb2:	5a 01       	movw	r10, r20
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	a7 ea       	ldi	r26, 0xA7	; 167
    1bba:	b1 e4       	ldi	r27, 0x41	; 65
    1bbc:	56 d0       	rcall	.+172    	; 0x1c6a <__muluhisi3>
    1bbe:	6b 01       	movw	r12, r22
    1bc0:	7c 01       	movw	r14, r24
    1bc2:	ac ee       	ldi	r26, 0xEC	; 236
    1bc4:	b4 ef       	ldi	r27, 0xF4	; 244
    1bc6:	a5 01       	movw	r20, r10
    1bc8:	94 01       	movw	r18, r8
    1bca:	5b d0       	rcall	.+182    	; 0x1c82 <__mulohisi3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8c 0d       	add	r24, r12
    1bd2:	9d 1d       	adc	r25, r13
    1bd4:	ae 1d       	adc	r26, r14
    1bd6:	bf 1d       	adc	r27, r15
    1bd8:	b7 ff       	sbrs	r27, 7
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <do_rand+0x6c>
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	a1 09       	sbc	r26, r1
    1be0:	b0 48       	sbci	r27, 0x80	; 128
    1be2:	88 83       	st	Y, r24
    1be4:	99 83       	std	Y+1, r25	; 0x01
    1be6:	aa 83       	std	Y+2, r26	; 0x02
    1be8:	bb 83       	std	Y+3, r27	; 0x03
    1bea:	9f 77       	andi	r25, 0x7F	; 127
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	8f 90       	pop	r8
    1c00:	08 95       	ret

00001c02 <rand_r>:
    1c02:	b9 cf       	rjmp	.-142    	; 0x1b76 <do_rand>

00001c04 <rand>:
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	92 e0       	ldi	r25, 0x02	; 2
    1c08:	b6 cf       	rjmp	.-148    	; 0x1b76 <do_rand>

00001c0a <srand>:
    1c0a:	a0 e0       	ldi	r26, 0x00	; 0
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    1c12:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    1c16:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    1c1a:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    1c1e:	08 95       	ret

00001c20 <memcpy>:
    1c20:	fb 01       	movw	r30, r22
    1c22:	dc 01       	movw	r26, r24
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <memcpy+0xa>
    1c26:	01 90       	ld	r0, Z+
    1c28:	0d 92       	st	X+, r0
    1c2a:	41 50       	subi	r20, 0x01	; 1
    1c2c:	50 40       	sbci	r21, 0x00	; 0
    1c2e:	d8 f7       	brcc	.-10     	; 0x1c26 <memcpy+0x6>
    1c30:	08 95       	ret

00001c32 <__divmodsi4>:
    1c32:	05 2e       	mov	r0, r21
    1c34:	97 fb       	bst	r25, 7
    1c36:	16 f4       	brtc	.+4      	; 0x1c3c <__divmodsi4+0xa>
    1c38:	00 94       	com	r0
    1c3a:	0f d0       	rcall	.+30     	; 0x1c5a <__negsi2>
    1c3c:	57 fd       	sbrc	r21, 7
    1c3e:	05 d0       	rcall	.+10     	; 0x1c4a <__divmodsi4_neg2>
    1c40:	78 df       	rcall	.-272    	; 0x1b32 <__udivmodsi4>
    1c42:	07 fc       	sbrc	r0, 7
    1c44:	02 d0       	rcall	.+4      	; 0x1c4a <__divmodsi4_neg2>
    1c46:	46 f4       	brtc	.+16     	; 0x1c58 <__divmodsi4_exit>
    1c48:	08 c0       	rjmp	.+16     	; 0x1c5a <__negsi2>

00001c4a <__divmodsi4_neg2>:
    1c4a:	50 95       	com	r21
    1c4c:	40 95       	com	r20
    1c4e:	30 95       	com	r19
    1c50:	21 95       	neg	r18
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	4f 4f       	sbci	r20, 0xFF	; 255
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255

00001c58 <__divmodsi4_exit>:
    1c58:	08 95       	ret

00001c5a <__negsi2>:
    1c5a:	90 95       	com	r25
    1c5c:	80 95       	com	r24
    1c5e:	70 95       	com	r23
    1c60:	61 95       	neg	r22
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	8f 4f       	sbci	r24, 0xFF	; 255
    1c66:	9f 4f       	sbci	r25, 0xFF	; 255
    1c68:	08 95       	ret

00001c6a <__muluhisi3>:
    1c6a:	0f d0       	rcall	.+30     	; 0x1c8a <__umulhisi3>
    1c6c:	a5 9f       	mul	r26, r21
    1c6e:	90 0d       	add	r25, r0
    1c70:	b4 9f       	mul	r27, r20
    1c72:	90 0d       	add	r25, r0
    1c74:	a4 9f       	mul	r26, r20
    1c76:	80 0d       	add	r24, r0
    1c78:	91 1d       	adc	r25, r1
    1c7a:	11 24       	eor	r1, r1
    1c7c:	08 95       	ret

00001c7e <__mulshisi3>:
    1c7e:	b7 ff       	sbrs	r27, 7
    1c80:	f4 cf       	rjmp	.-24     	; 0x1c6a <__muluhisi3>

00001c82 <__mulohisi3>:
    1c82:	f3 df       	rcall	.-26     	; 0x1c6a <__muluhisi3>
    1c84:	82 1b       	sub	r24, r18
    1c86:	93 0b       	sbc	r25, r19
    1c88:	08 95       	ret

00001c8a <__umulhisi3>:
    1c8a:	a2 9f       	mul	r26, r18
    1c8c:	b0 01       	movw	r22, r0
    1c8e:	b3 9f       	mul	r27, r19
    1c90:	c0 01       	movw	r24, r0
    1c92:	a3 9f       	mul	r26, r19
    1c94:	70 0d       	add	r23, r0
    1c96:	81 1d       	adc	r24, r1
    1c98:	11 24       	eor	r1, r1
    1c9a:	91 1d       	adc	r25, r1
    1c9c:	b2 9f       	mul	r27, r18
    1c9e:	70 0d       	add	r23, r0
    1ca0:	81 1d       	adc	r24, r1
    1ca2:	11 24       	eor	r1, r1
    1ca4:	91 1d       	adc	r25, r1
    1ca6:	08 95       	ret

00001ca8 <_exit>:
    1ca8:	f8 94       	cli

00001caa <__stop_program>:
    1caa:	ff cf       	rjmp	.-2      	; 0x1caa <__stop_program>
